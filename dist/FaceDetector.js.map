{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 66531b12b7add8a95126","webpack:///./src/DecoderWorker.js","webpack:///./src/index.js","webpack:///./~/worker-loader/createInlineWorker.js"],"names":["Worker","require","lastMsgId","resolves","rejects","FaceDetectorCallback","e","id","data","resolve","undefined","results","result","map","boundingBox","res","landmarks","DEFAULT_OPTIONS","maxDetectedFaces","fastMode","MAX_WORK_SIZE_FAST","MAX_WORK_SIZE_SLOW","Library","options","config","Object","assign","maxWorkSize","worker","canvas","document","createElement","ctx","getContext","body","appendChild","onmessage","image","Promise","reject","msgId","scale","Math","min","naturalWidth","naturalHeight","width","height","drawImage","msg","getImageData","postMessage"],"mappings":"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","file":"FaceDetector.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"FaceDetector\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FaceDetector\"] = factory();\n\telse\n\t\troot[\"FaceDetector\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 66531b12b7add8a95126","module.exports = function() {\n\treturn require(\"!!C:\\\\Users\\\\gilad\\\\Desktop\\\\src-face-detector-polyfill\\\\node_modules\\\\worker-loader\\\\createInlineWorker.js\")(\"/******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n/******/\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId]) {\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\ti: moduleId,\\n/******/ \\t\\t\\tl: false,\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n/******/\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.l = true;\\n/******/\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/\\n/******/\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n/******/\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n/******/\\n/******/ \\t// identity function for calling harmony imports with the correct context\\n/******/ \\t__webpack_require__.i = function(value) { return value; };\\n/******/\\n/******/ \\t// define getter function for harmony exports\\n/******/ \\t__webpack_require__.d = function(exports, name, getter) {\\n/******/ \\t\\tif(!__webpack_require__.o(exports, name)) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, name, {\\n/******/ \\t\\t\\t\\tconfigurable: false,\\n/******/ \\t\\t\\t\\tenumerable: true,\\n/******/ \\t\\t\\t\\tget: getter\\n/******/ \\t\\t\\t});\\n/******/ \\t\\t}\\n/******/ \\t};\\n/******/\\n/******/ \\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t__webpack_require__.n = function(module) {\\n/******/ \\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\tfunction getDefault() { return module['default']; } :\\n/******/ \\t\\t\\tfunction getModuleExports() { return module; };\\n/******/ \\t\\t__webpack_require__.d(getter, 'a', getter);\\n/******/ \\t\\treturn getter;\\n/******/ \\t};\\n/******/\\n/******/ \\t// Object.prototype.hasOwnProperty.call\\n/******/ \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n/******/\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n/******/\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(__webpack_require__.s = 2);\\n/******/ })\\n/************************************************************************/\\n/******/ ([\\n/* 0 */\\n/***/ (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\n/* eslint-disable */\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n */\\n\\n// namespace ?\\nvar jsfeat = jsfeat || { REVISION: 'ALPHA' };\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n */\\n\\n(function (global) {\\n    \\\"use strict\\\";\\n    //\\n\\n    // CONSTANTS\\n\\n    var EPSILON = 0.0000001192092896;\\n    var FLT_MIN = 1E-37;\\n\\n    // implementation from CCV project\\n    // currently working only with u8,s32,f32\\n    var U8_t = 0x0100,\\n        S32_t = 0x0200,\\n        F32_t = 0x0400,\\n        S64_t = 0x0800,\\n        F64_t = 0x1000;\\n\\n    var C1_t = 0x01,\\n        C2_t = 0x02,\\n        C3_t = 0x03,\\n        C4_t = 0x04;\\n\\n    var _data_type_size = new Int32Array([-1, 1, 4, -1, 4, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, 8]);\\n\\n    var get_data_type = function () {\\n        return function (type) {\\n            return type & 0xFF00;\\n        };\\n    }();\\n\\n    var get_channel = function () {\\n        return function (type) {\\n            return type & 0xFF;\\n        };\\n    }();\\n\\n    var get_data_type_size = function () {\\n        return function (type) {\\n            return _data_type_size[(type & 0xFF00) >> 8];\\n        };\\n    }();\\n\\n    // color conversion\\n    var COLOR_RGBA2GRAY = 0;\\n    var COLOR_RGB2GRAY = 1;\\n    var COLOR_BGRA2GRAY = 2;\\n    var COLOR_BGR2GRAY = 3;\\n\\n    // box blur option\\n    var BOX_BLUR_NOSCALE = 0x01;\\n    // svd options\\n    var SVD_U_T = 0x01;\\n    var SVD_V_T = 0x02;\\n\\n    var data_t = function () {\\n        function data_t(size_in_bytes, buffer) {\\n            // we need align size to multiple of 8\\n            this.size = (size_in_bytes + 7 | 0) & -8;\\n            if (typeof buffer === \\\"undefined\\\") {\\n                this.buffer = new ArrayBuffer(this.size);\\n            } else {\\n                this.buffer = buffer;\\n                this.size = buffer.length;\\n            }\\n            this.u8 = new Uint8Array(this.buffer);\\n            this.i32 = new Int32Array(this.buffer);\\n            this.f32 = new Float32Array(this.buffer);\\n            this.f64 = new Float64Array(this.buffer);\\n        }\\n        return data_t;\\n    }();\\n\\n    var matrix_t = function () {\\n        // columns, rows, data_type\\n        function matrix_t(c, r, data_type, data_buffer) {\\n            this.type = get_data_type(data_type) | 0;\\n            this.channel = get_channel(data_type) | 0;\\n            this.cols = c | 0;\\n            this.rows = r | 0;\\n            if (typeof data_buffer === \\\"undefined\\\") {\\n                this.allocate();\\n            } else {\\n                this.buffer = data_buffer;\\n                // data user asked for\\n                this.data = this.type & U8_t ? this.buffer.u8 : this.type & S32_t ? this.buffer.i32 : this.type & F32_t ? this.buffer.f32 : this.buffer.f64;\\n            }\\n        }\\n        matrix_t.prototype.allocate = function () {\\n            // clear references\\n            delete this.data;\\n            delete this.buffer;\\n            //\\n            this.buffer = new data_t(this.cols * get_data_type_size(this.type) * this.channel * this.rows);\\n            this.data = this.type & U8_t ? this.buffer.u8 : this.type & S32_t ? this.buffer.i32 : this.type & F32_t ? this.buffer.f32 : this.buffer.f64;\\n        };\\n        matrix_t.prototype.copy_to = function (other) {\\n            var od = other.data,\\n                td = this.data;\\n            var i = 0,\\n                n = this.cols * this.rows * this.channel | 0;\\n            for (; i < n - 4; i += 4) {\\n                od[i] = td[i];\\n                od[i + 1] = td[i + 1];\\n                od[i + 2] = td[i + 2];\\n                od[i + 3] = td[i + 3];\\n            }\\n            for (; i < n; ++i) {\\n                od[i] = td[i];\\n            }\\n        };\\n        matrix_t.prototype.resize = function (c, r, ch) {\\n            if (typeof ch === \\\"undefined\\\") {\\n                ch = this.channel;\\n            }\\n            // relocate buffer only if new size doesnt fit\\n            var new_size = c * get_data_type_size(this.type) * ch * r;\\n            if (new_size > this.buffer.size) {\\n                this.cols = c;\\n                this.rows = r;\\n                this.channel = ch;\\n                this.allocate();\\n            } else {\\n                this.cols = c;\\n                this.rows = r;\\n                this.channel = ch;\\n            }\\n        };\\n\\n        return matrix_t;\\n    }();\\n\\n    var pyramid_t = function () {\\n\\n        function pyramid_t(levels) {\\n            this.levels = levels | 0;\\n            this.data = new Array(levels);\\n            this.pyrdown = jsfeat.imgproc.pyrdown;\\n        }\\n\\n        pyramid_t.prototype.allocate = function (start_w, start_h, data_type) {\\n            var i = this.levels;\\n            while (--i >= 0) {\\n                this.data[i] = new matrix_t(start_w >> i, start_h >> i, data_type);\\n            }\\n        };\\n\\n        pyramid_t.prototype.build = function (input, skip_first_level) {\\n            if (typeof skip_first_level === \\\"undefined\\\") {\\n                skip_first_level = true;\\n            }\\n            // just copy data to first level\\n            var i = 2,\\n                a = input,\\n                b = this.data[0];\\n            if (!skip_first_level) {\\n                var j = input.cols * input.rows;\\n                while (--j >= 0) {\\n                    b.data[j] = input.data[j];\\n                }\\n            }\\n            b = this.data[1];\\n            this.pyrdown(a, b);\\n            for (; i < this.levels; ++i) {\\n                a = b;\\n                b = this.data[i];\\n                this.pyrdown(a, b);\\n            }\\n        };\\n\\n        return pyramid_t;\\n    }();\\n\\n    var keypoint_t = function () {\\n        function keypoint_t(x, y, score, level, angle) {\\n            if (typeof x === \\\"undefined\\\") {\\n                x = 0;\\n            }\\n            if (typeof y === \\\"undefined\\\") {\\n                y = 0;\\n            }\\n            if (typeof score === \\\"undefined\\\") {\\n                score = 0;\\n            }\\n            if (typeof level === \\\"undefined\\\") {\\n                level = 0;\\n            }\\n            if (typeof angle === \\\"undefined\\\") {\\n                angle = -1.0;\\n            }\\n\\n            this.x = x;\\n            this.y = y;\\n            this.score = score;\\n            this.level = level;\\n            this.angle = angle;\\n        }\\n        return keypoint_t;\\n    }();\\n\\n    // data types\\n    global.U8_t = U8_t;\\n    global.S32_t = S32_t;\\n    global.F32_t = F32_t;\\n    global.S64_t = S64_t;\\n    global.F64_t = F64_t;\\n    // data channels\\n    global.C1_t = C1_t;\\n    global.C2_t = C2_t;\\n    global.C3_t = C3_t;\\n    global.C4_t = C4_t;\\n\\n    // popular formats\\n    global.U8C1_t = U8_t | C1_t;\\n    global.U8C3_t = U8_t | C3_t;\\n    global.U8C4_t = U8_t | C4_t;\\n\\n    global.F32C1_t = F32_t | C1_t;\\n    global.F32C2_t = F32_t | C2_t;\\n    global.S32C1_t = S32_t | C1_t;\\n    global.S32C2_t = S32_t | C2_t;\\n\\n    // constants\\n    global.EPSILON = EPSILON;\\n    global.FLT_MIN = FLT_MIN;\\n\\n    // color convert\\n    global.COLOR_RGBA2GRAY = COLOR_RGBA2GRAY;\\n    global.COLOR_RGB2GRAY = COLOR_RGB2GRAY;\\n    global.COLOR_BGRA2GRAY = COLOR_BGRA2GRAY;\\n    global.COLOR_BGR2GRAY = COLOR_BGR2GRAY;\\n\\n    // options\\n    global.BOX_BLUR_NOSCALE = BOX_BLUR_NOSCALE;\\n    global.SVD_U_T = SVD_U_T;\\n    global.SVD_V_T = SVD_V_T;\\n\\n    global.get_data_type = get_data_type;\\n    global.get_channel = get_channel;\\n    global.get_data_type_size = get_data_type_size;\\n\\n    global.data_t = data_t;\\n    global.matrix_t = matrix_t;\\n    global.pyramid_t = pyramid_t;\\n    global.keypoint_t = keypoint_t;\\n})(jsfeat);\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n */\\n\\n(function (global) {\\n    \\\"use strict\\\";\\n    //\\n\\n    var cache = function () {\\n\\n        // very primitive array cache, still need testing if it helps\\n        // of course V8 has its own powerful cache sys but i'm not sure\\n        // it caches several multichannel 640x480 buffer creations each frame\\n\\n        var _pool_node_t = function () {\\n            function _pool_node_t(size_in_bytes) {\\n                this.next = null;\\n                this.data = new jsfeat.data_t(size_in_bytes);\\n                this.size = this.data.size;\\n                this.buffer = this.data.buffer;\\n                this.u8 = this.data.u8;\\n                this.i32 = this.data.i32;\\n                this.f32 = this.data.f32;\\n                this.f64 = this.data.f64;\\n            }\\n            _pool_node_t.prototype.resize = function (size_in_bytes) {\\n                delete this.data;\\n                this.data = new jsfeat.data_t(size_in_bytes);\\n                this.size = this.data.size;\\n                this.buffer = this.data.buffer;\\n                this.u8 = this.data.u8;\\n                this.i32 = this.data.i32;\\n                this.f32 = this.data.f32;\\n                this.f64 = this.data.f64;\\n            };\\n            return _pool_node_t;\\n        }();\\n\\n        var _pool_head, _pool_tail;\\n        var _pool_size = 0;\\n\\n        return {\\n\\n            allocate: function allocate(capacity, data_size) {\\n                _pool_head = _pool_tail = new _pool_node_t(data_size);\\n                for (var i = 0; i < capacity; ++i) {\\n                    var node = new _pool_node_t(data_size);\\n                    _pool_tail = _pool_tail.next = node;\\n\\n                    _pool_size++;\\n                }\\n            },\\n\\n            get_buffer: function get_buffer(size_in_bytes) {\\n                // assume we have enough free nodes\\n                var node = _pool_head;\\n                _pool_head = _pool_head.next;\\n                _pool_size--;\\n\\n                if (size_in_bytes > node.size) {\\n                    node.resize(size_in_bytes);\\n                }\\n\\n                return node;\\n            },\\n\\n            put_buffer: function put_buffer(node) {\\n                _pool_tail = _pool_tail.next = node;\\n                _pool_size++;\\n            }\\n        };\\n    }();\\n\\n    global.cache = cache;\\n    // for now we dont need more than 30 buffers\\n    // if having cache sys really helps we can add auto extending sys\\n    cache.allocate(30, 640 * 4);\\n})(jsfeat);\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n */\\n\\n(function (global) {\\n    \\\"use strict\\\";\\n    //\\n\\n    var math = function () {\\n\\n        var qsort_stack = new Int32Array(48 * 2);\\n\\n        return {\\n            get_gaussian_kernel: function get_gaussian_kernel(size, sigma, kernel, data_type) {\\n                var i = 0,\\n                    x = 0.0,\\n                    t = 0.0,\\n                    sigma_x = 0.0,\\n                    scale_2x = 0.0;\\n                var sum = 0.0;\\n                var kern_node = jsfeat.cache.get_buffer(size << 2);\\n                var _kernel = kern_node.f32; //new Float32Array(size);\\n\\n                if ((size & 1) == 1 && size <= 7 && sigma <= 0) {\\n                    switch (size >> 1) {\\n                        case 0:\\n                            _kernel[0] = 1.0;\\n                            sum = 1.0;\\n                            break;\\n                        case 1:\\n                            _kernel[0] = 0.25, _kernel[1] = 0.5, _kernel[2] = 0.25;\\n                            sum = 0.25 + 0.5 + 0.25;\\n                            break;\\n                        case 2:\\n                            _kernel[0] = 0.0625, _kernel[1] = 0.25, _kernel[2] = 0.375, _kernel[3] = 0.25, _kernel[4] = 0.0625;\\n                            sum = 0.0625 + 0.25 + 0.375 + 0.25 + 0.0625;\\n                            break;\\n                        case 3:\\n                            _kernel[0] = 0.03125, _kernel[1] = 0.109375, _kernel[2] = 0.21875, _kernel[3] = 0.28125, _kernel[4] = 0.21875, _kernel[5] = 0.109375, _kernel[6] = 0.03125;\\n                            sum = 0.03125 + 0.109375 + 0.21875 + 0.28125 + 0.21875 + 0.109375 + 0.03125;\\n                            break;\\n                    }\\n                } else {\\n                    sigma_x = sigma > 0 ? sigma : ((size - 1) * 0.5 - 1.0) * 0.3 + 0.8;\\n                    scale_2x = -0.5 / (sigma_x * sigma_x);\\n\\n                    for (; i < size; ++i) {\\n                        x = i - (size - 1) * 0.5;\\n                        t = Math.exp(scale_2x * x * x);\\n\\n                        _kernel[i] = t;\\n                        sum += t;\\n                    }\\n                }\\n\\n                if (data_type & jsfeat.U8_t) {\\n                    // int based kernel\\n                    sum = 256.0 / sum;\\n                    for (i = 0; i < size; ++i) {\\n                        kernel[i] = _kernel[i] * sum + 0.5 | 0;\\n                    }\\n                } else {\\n                    // classic kernel\\n                    sum = 1.0 / sum;\\n                    for (i = 0; i < size; ++i) {\\n                        kernel[i] = _kernel[i] * sum;\\n                    }\\n                }\\n\\n                jsfeat.cache.put_buffer(kern_node);\\n            },\\n\\n            // model is 3x3 matrix_t\\n            perspective_4point_transform: function perspective_4point_transform(model, src_x0, src_y0, dst_x0, dst_y0, src_x1, src_y1, dst_x1, dst_y1, src_x2, src_y2, dst_x2, dst_y2, src_x3, src_y3, dst_x3, dst_y3) {\\n                var t1 = src_x0;\\n                var t2 = src_x2;\\n                var t4 = src_y1;\\n                var t5 = t1 * t2 * t4;\\n                var t6 = src_y3;\\n                var t7 = t1 * t6;\\n                var t8 = t2 * t7;\\n                var t9 = src_y2;\\n                var t10 = t1 * t9;\\n                var t11 = src_x1;\\n                var t14 = src_y0;\\n                var t15 = src_x3;\\n                var t16 = t14 * t15;\\n                var t18 = t16 * t11;\\n                var t20 = t15 * t11 * t9;\\n                var t21 = t15 * t4;\\n                var t24 = t15 * t9;\\n                var t25 = t2 * t4;\\n                var t26 = t6 * t2;\\n                var t27 = t6 * t11;\\n                var t28 = t9 * t11;\\n                var t30 = 1.0 / (t21 - t24 - t25 + t26 - t27 + t28);\\n                var t32 = t1 * t15;\\n                var t35 = t14 * t11;\\n                var t41 = t4 * t1;\\n                var t42 = t6 * t41;\\n                var t43 = t14 * t2;\\n                var t46 = t16 * t9;\\n                var t48 = t14 * t9 * t11;\\n                var t51 = t4 * t6 * t2;\\n                var t55 = t6 * t14;\\n                var Hr0 = -(t8 - t5 + t10 * t11 - t11 * t7 - t16 * t2 + t18 - t20 + t21 * t2) * t30;\\n                var Hr1 = (t5 - t8 - t32 * t4 + t32 * t9 + t18 - t2 * t35 + t27 * t2 - t20) * t30;\\n                var Hr2 = t1;\\n                var Hr3 = (-t9 * t7 + t42 + t43 * t4 - t16 * t4 + t46 - t48 + t27 * t9 - t51) * t30;\\n                var Hr4 = (-t42 + t41 * t9 - t55 * t2 + t46 - t48 + t55 * t11 + t51 - t21 * t9) * t30;\\n                var Hr5 = t14;\\n                var Hr6 = (-t10 + t41 + t43 - t35 + t24 - t21 - t26 + t27) * t30;\\n                var Hr7 = (-t7 + t10 + t16 - t43 + t27 - t28 - t21 + t25) * t30;\\n\\n                t1 = dst_x0;\\n                t2 = dst_x2;\\n                t4 = dst_y1;\\n                t5 = t1 * t2 * t4;\\n                t6 = dst_y3;\\n                t7 = t1 * t6;\\n                t8 = t2 * t7;\\n                t9 = dst_y2;\\n                t10 = t1 * t9;\\n                t11 = dst_x1;\\n                t14 = dst_y0;\\n                t15 = dst_x3;\\n                t16 = t14 * t15;\\n                t18 = t16 * t11;\\n                t20 = t15 * t11 * t9;\\n                t21 = t15 * t4;\\n                t24 = t15 * t9;\\n                t25 = t2 * t4;\\n                t26 = t6 * t2;\\n                t27 = t6 * t11;\\n                t28 = t9 * t11;\\n                t30 = 1.0 / (t21 - t24 - t25 + t26 - t27 + t28);\\n                t32 = t1 * t15;\\n                t35 = t14 * t11;\\n                t41 = t4 * t1;\\n                t42 = t6 * t41;\\n                t43 = t14 * t2;\\n                t46 = t16 * t9;\\n                t48 = t14 * t9 * t11;\\n                t51 = t4 * t6 * t2;\\n                t55 = t6 * t14;\\n                var Hl0 = -(t8 - t5 + t10 * t11 - t11 * t7 - t16 * t2 + t18 - t20 + t21 * t2) * t30;\\n                var Hl1 = (t5 - t8 - t32 * t4 + t32 * t9 + t18 - t2 * t35 + t27 * t2 - t20) * t30;\\n                var Hl2 = t1;\\n                var Hl3 = (-t9 * t7 + t42 + t43 * t4 - t16 * t4 + t46 - t48 + t27 * t9 - t51) * t30;\\n                var Hl4 = (-t42 + t41 * t9 - t55 * t2 + t46 - t48 + t55 * t11 + t51 - t21 * t9) * t30;\\n                var Hl5 = t14;\\n                var Hl6 = (-t10 + t41 + t43 - t35 + t24 - t21 - t26 + t27) * t30;\\n                var Hl7 = (-t7 + t10 + t16 - t43 + t27 - t28 - t21 + t25) * t30;\\n\\n                // the following code computes R = Hl * inverse Hr\\n                t2 = Hr4 - Hr7 * Hr5;\\n                t4 = Hr0 * Hr4;\\n                t5 = Hr0 * Hr5;\\n                t7 = Hr3 * Hr1;\\n                t8 = Hr2 * Hr3;\\n                t10 = Hr1 * Hr6;\\n                var t12 = Hr2 * Hr6;\\n                t15 = 1.0 / (t4 - t5 * Hr7 - t7 + t8 * Hr7 + t10 * Hr5 - t12 * Hr4);\\n                t18 = -Hr3 + Hr5 * Hr6;\\n                var t23 = -Hr3 * Hr7 + Hr4 * Hr6;\\n                t28 = -Hr1 + Hr2 * Hr7;\\n                var t31 = Hr0 - t12;\\n                t35 = Hr0 * Hr7 - t10;\\n                t41 = -Hr1 * Hr5 + Hr2 * Hr4;\\n                var t44 = t5 - t8;\\n                var t47 = t4 - t7;\\n                t48 = t2 * t15;\\n                var t49 = t28 * t15;\\n                var t50 = t41 * t15;\\n                var mat = model.data;\\n                mat[0] = Hl0 * t48 + Hl1 * (t18 * t15) - Hl2 * (t23 * t15);\\n                mat[1] = Hl0 * t49 + Hl1 * (t31 * t15) - Hl2 * (t35 * t15);\\n                mat[2] = -Hl0 * t50 - Hl1 * (t44 * t15) + Hl2 * (t47 * t15);\\n                mat[3] = Hl3 * t48 + Hl4 * (t18 * t15) - Hl5 * (t23 * t15);\\n                mat[4] = Hl3 * t49 + Hl4 * (t31 * t15) - Hl5 * (t35 * t15);\\n                mat[5] = -Hl3 * t50 - Hl4 * (t44 * t15) + Hl5 * (t47 * t15);\\n                mat[6] = Hl6 * t48 + Hl7 * (t18 * t15) - t23 * t15;\\n                mat[7] = Hl6 * t49 + Hl7 * (t31 * t15) - t35 * t15;\\n                mat[8] = -Hl6 * t50 - Hl7 * (t44 * t15) + t47 * t15;\\n            },\\n\\n            // The current implementation was derived from *BSD system qsort():\\n            // Copyright (c) 1992, 1993\\n            // The Regents of the University of California.  All rights reserved.\\n            qsort: function qsort(array, low, high, cmp) {\\n                var isort_thresh = 7;\\n                var t, ta, tb, tc;\\n                var sp = 0,\\n                    left = 0,\\n                    right = 0,\\n                    i = 0,\\n                    n = 0,\\n                    m = 0,\\n                    ptr = 0,\\n                    ptr2 = 0,\\n                    d = 0;\\n                var left0 = 0,\\n                    left1 = 0,\\n                    right0 = 0,\\n                    right1 = 0,\\n                    pivot = 0,\\n                    a = 0,\\n                    b = 0,\\n                    c = 0,\\n                    swap_cnt = 0;\\n\\n                var stack = qsort_stack;\\n\\n                if (high - low + 1 <= 1) return;\\n\\n                stack[0] = low;\\n                stack[1] = high;\\n\\n                while (sp >= 0) {\\n\\n                    left = stack[sp << 1];\\n                    right = stack[(sp << 1) + 1];\\n                    sp--;\\n\\n                    for (;;) {\\n                        n = right - left + 1;\\n\\n                        if (n <= isort_thresh) {\\n                            //insert_sort:\\n                            for (ptr = left + 1; ptr <= right; ptr++) {\\n                                for (ptr2 = ptr; ptr2 > left && cmp(array[ptr2], array[ptr2 - 1]); ptr2--) {\\n                                    t = array[ptr2];\\n                                    array[ptr2] = array[ptr2 - 1];\\n                                    array[ptr2 - 1] = t;\\n                                }\\n                            }\\n                            break;\\n                        } else {\\n                            swap_cnt = 0;\\n\\n                            left0 = left;\\n                            right0 = right;\\n                            pivot = left + (n >> 1);\\n\\n                            if (n > 40) {\\n                                d = n >> 3;\\n                                a = left, b = left + d, c = left + (d << 1);\\n                                ta = array[a], tb = array[b], tc = array[c];\\n                                left = cmp(ta, tb) ? cmp(tb, tc) ? b : cmp(ta, tc) ? c : a : cmp(tc, tb) ? b : cmp(ta, tc) ? a : c;\\n\\n                                a = pivot - d, b = pivot, c = pivot + d;\\n                                ta = array[a], tb = array[b], tc = array[c];\\n                                pivot = cmp(ta, tb) ? cmp(tb, tc) ? b : cmp(ta, tc) ? c : a : cmp(tc, tb) ? b : cmp(ta, tc) ? a : c;\\n\\n                                a = right - (d << 1), b = right - d, c = right;\\n                                ta = array[a], tb = array[b], tc = array[c];\\n                                right = cmp(ta, tb) ? cmp(tb, tc) ? b : cmp(ta, tc) ? c : a : cmp(tc, tb) ? b : cmp(ta, tc) ? a : c;\\n                            }\\n\\n                            a = left, b = pivot, c = right;\\n                            ta = array[a], tb = array[b], tc = array[c];\\n                            pivot = cmp(ta, tb) ? cmp(tb, tc) ? b : cmp(ta, tc) ? c : a : cmp(tc, tb) ? b : cmp(ta, tc) ? a : c;\\n                            if (pivot != left0) {\\n                                t = array[pivot];\\n                                array[pivot] = array[left0];\\n                                array[left0] = t;\\n                                pivot = left0;\\n                            }\\n                            left = left1 = left0 + 1;\\n                            right = right1 = right0;\\n\\n                            ta = array[pivot];\\n                            for (;;) {\\n                                while (left <= right && !cmp(ta, array[left])) {\\n                                    if (!cmp(array[left], ta)) {\\n                                        if (left > left1) {\\n                                            t = array[left1];\\n                                            array[left1] = array[left];\\n                                            array[left] = t;\\n                                        }\\n                                        swap_cnt = 1;\\n                                        left1++;\\n                                    }\\n                                    left++;\\n                                }\\n\\n                                while (left <= right && !cmp(array[right], ta)) {\\n                                    if (!cmp(ta, array[right])) {\\n                                        if (right < right1) {\\n                                            t = array[right1];\\n                                            array[right1] = array[right];\\n                                            array[right] = t;\\n                                        }\\n                                        swap_cnt = 1;\\n                                        right1--;\\n                                    }\\n                                    right--;\\n                                }\\n\\n                                if (left > right) break;\\n\\n                                t = array[left];\\n                                array[left] = array[right];\\n                                array[right] = t;\\n                                swap_cnt = 1;\\n                                left++;\\n                                right--;\\n                            }\\n\\n                            if (swap_cnt == 0) {\\n                                left = left0, right = right0;\\n                                //goto insert_sort;\\n                                for (ptr = left + 1; ptr <= right; ptr++) {\\n                                    for (ptr2 = ptr; ptr2 > left && cmp(array[ptr2], array[ptr2 - 1]); ptr2--) {\\n                                        t = array[ptr2];\\n                                        array[ptr2] = array[ptr2 - 1];\\n                                        array[ptr2 - 1] = t;\\n                                    }\\n                                }\\n                                break;\\n                            }\\n\\n                            n = Math.min(left1 - left0, left - left1);\\n                            m = left - n | 0;\\n                            for (i = 0; i < n; ++i, ++m) {\\n                                t = array[left0 + i];\\n                                array[left0 + i] = array[m];\\n                                array[m] = t;\\n                            }\\n\\n                            n = Math.min(right0 - right1, right1 - right);\\n                            m = right0 - n + 1 | 0;\\n                            for (i = 0; i < n; ++i, ++m) {\\n                                t = array[left + i];\\n                                array[left + i] = array[m];\\n                                array[m] = t;\\n                            }\\n                            n = left - left1;\\n                            m = right1 - right;\\n                            if (n > 1) {\\n                                if (m > 1) {\\n                                    if (n > m) {\\n                                        ++sp;\\n                                        stack[sp << 1] = left0;\\n                                        stack[(sp << 1) + 1] = left0 + n - 1;\\n                                        left = right0 - m + 1, right = right0;\\n                                    } else {\\n                                        ++sp;\\n                                        stack[sp << 1] = right0 - m + 1;\\n                                        stack[(sp << 1) + 1] = right0;\\n                                        left = left0, right = left0 + n - 1;\\n                                    }\\n                                } else {\\n                                    left = left0, right = left0 + n - 1;\\n                                }\\n                            } else if (m > 1) left = right0 - m + 1, right = right0;else break;\\n                        }\\n                    }\\n                }\\n            },\\n\\n            median: function median(array, low, high) {\\n                var w;\\n                var middle = 0,\\n                    ll = 0,\\n                    hh = 0,\\n                    median = low + high >> 1;\\n                for (;;) {\\n                    if (high <= low) return array[median];\\n                    if (high == low + 1) {\\n                        if (array[low] > array[high]) {\\n                            w = array[low];\\n                            array[low] = array[high];\\n                            array[high] = w;\\n                        }\\n                        return array[median];\\n                    }\\n                    middle = low + high >> 1;\\n                    if (array[middle] > array[high]) {\\n                        w = array[middle];\\n                        array[middle] = array[high];\\n                        array[high] = w;\\n                    }\\n                    if (array[low] > array[high]) {\\n                        w = array[low];\\n                        array[low] = array[high];\\n                        array[high] = w;\\n                    }\\n                    if (array[middle] > array[low]) {\\n                        w = array[middle];\\n                        array[middle] = array[low];\\n                        array[low] = w;\\n                    }\\n                    ll = low + 1;\\n                    w = array[middle];\\n                    array[middle] = array[ll];\\n                    array[ll] = w;\\n                    hh = high;\\n                    for (;;) {\\n                        do {\\n                            ++ll;\\n                        } while (array[low] > array[ll]);\\n                        do {\\n                            --hh;\\n                        } while (array[hh] > array[low]);\\n                        if (hh < ll) break;\\n                        w = array[ll];\\n                        array[ll] = array[hh];\\n                        array[hh] = w;\\n                    }\\n                    w = array[low];\\n                    array[low] = array[hh];\\n                    array[hh] = w;\\n                    if (hh <= median) low = ll;else if (hh >= median) high = hh - 1;\\n                }\\n                return 0;\\n            }\\n        };\\n    }();\\n\\n    global.math = math;\\n})(jsfeat);\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n *\\r\\n */\\n\\n(function (global) {\\n    \\\"use strict\\\";\\n    //\\n\\n    var matmath = function () {\\n\\n        return {\\n            identity: function identity(M, value) {\\n                if (typeof value === \\\"undefined\\\") {\\n                    value = 1;\\n                }\\n                var src = M.data;\\n                var rows = M.rows,\\n                    cols = M.cols,\\n                    cols_1 = cols + 1 | 0;\\n                var len = rows * cols;\\n                var k = len;\\n                while (--len >= 0) {\\n                    src[len] = 0.0;\\n                }len = k;\\n                k = 0;\\n                while (k < len) {\\n                    src[k] = value;\\n                    k = k + cols_1;\\n                }\\n            },\\n\\n            transpose: function transpose(At, A) {\\n                var i = 0,\\n                    j = 0,\\n                    nrows = A.rows,\\n                    ncols = A.cols;\\n                var Ai = 0,\\n                    Ati = 0,\\n                    pAt = 0;\\n                var ad = A.data,\\n                    atd = At.data;\\n\\n                for (; i < nrows; Ati += 1, Ai += ncols, i++) {\\n                    pAt = Ati;\\n                    for (j = 0; j < ncols; pAt += nrows, j++) {\\n                        atd[pAt] = ad[Ai + j];\\n                    }\\n                }\\n            },\\n\\n            // C = A * B\\n            multiply: function multiply(C, A, B) {\\n                var i = 0,\\n                    j = 0,\\n                    k = 0;\\n                var Ap = 0,\\n                    pA = 0,\\n                    pB = 0,\\n                    p_B = 0,\\n                    Cp = 0;\\n                var ncols = A.cols,\\n                    nrows = A.rows,\\n                    mcols = B.cols;\\n                var ad = A.data,\\n                    bd = B.data,\\n                    cd = C.data;\\n                var sum = 0.0;\\n\\n                for (; i < nrows; Ap += ncols, i++) {\\n                    for (p_B = 0, j = 0; j < mcols; Cp++, p_B++, j++) {\\n                        pB = p_B;\\n                        pA = Ap;\\n                        sum = 0.0;\\n                        for (k = 0; k < ncols; pA++, pB += mcols, k++) {\\n                            sum += ad[pA] * bd[pB];\\n                        }\\n                        cd[Cp] = sum;\\n                    }\\n                }\\n            },\\n\\n            // C = A * B'\\n            multiply_ABt: function multiply_ABt(C, A, B) {\\n                var i = 0,\\n                    j = 0,\\n                    k = 0;\\n                var Ap = 0,\\n                    pA = 0,\\n                    pB = 0,\\n                    Cp = 0;\\n                var ncols = A.cols,\\n                    nrows = A.rows,\\n                    mrows = B.rows;\\n                var ad = A.data,\\n                    bd = B.data,\\n                    cd = C.data;\\n                var sum = 0.0;\\n\\n                for (; i < nrows; Ap += ncols, i++) {\\n                    for (pB = 0, j = 0; j < mrows; Cp++, j++) {\\n                        pA = Ap;\\n                        sum = 0.0;\\n                        for (k = 0; k < ncols; pA++, pB++, k++) {\\n                            sum += ad[pA] * bd[pB];\\n                        }\\n                        cd[Cp] = sum;\\n                    }\\n                }\\n            },\\n\\n            // C = A' * B\\n            multiply_AtB: function multiply_AtB(C, A, B) {\\n                var i = 0,\\n                    j = 0,\\n                    k = 0;\\n                var Ap = 0,\\n                    pA = 0,\\n                    pB = 0,\\n                    p_B = 0,\\n                    Cp = 0;\\n                var ncols = A.cols,\\n                    nrows = A.rows,\\n                    mcols = B.cols;\\n                var ad = A.data,\\n                    bd = B.data,\\n                    cd = C.data;\\n                var sum = 0.0;\\n\\n                for (; i < ncols; Ap++, i++) {\\n                    for (p_B = 0, j = 0; j < mcols; Cp++, p_B++, j++) {\\n                        pB = p_B;\\n                        pA = Ap;\\n                        sum = 0.0;\\n                        for (k = 0; k < nrows; pA += ncols, pB += mcols, k++) {\\n                            sum += ad[pA] * bd[pB];\\n                        }\\n                        cd[Cp] = sum;\\n                    }\\n                }\\n            },\\n\\n            // C = A * A'\\n            multiply_AAt: function multiply_AAt(C, A) {\\n                var i = 0,\\n                    j = 0,\\n                    k = 0;\\n                var pCdiag = 0,\\n                    p_A = 0,\\n                    pA = 0,\\n                    pB = 0,\\n                    pC = 0,\\n                    pCt = 0;\\n                var ncols = A.cols,\\n                    nrows = A.rows;\\n                var ad = A.data,\\n                    cd = C.data;\\n                var sum = 0.0;\\n\\n                for (; i < nrows; pCdiag += nrows + 1, p_A = pA, i++) {\\n                    pC = pCdiag;\\n                    pCt = pCdiag;\\n                    pB = p_A;\\n                    for (j = i; j < nrows; pC++, pCt += nrows, j++) {\\n                        pA = p_A;\\n                        sum = 0.0;\\n                        for (k = 0; k < ncols; k++) {\\n                            sum += ad[pA++] * ad[pB++];\\n                        }\\n                        cd[pC] = sum;\\n                        cd[pCt] = sum;\\n                    }\\n                }\\n            },\\n\\n            // C = A' * A\\n            multiply_AtA: function multiply_AtA(C, A) {\\n                var i = 0,\\n                    j = 0,\\n                    k = 0;\\n                var p_A = 0,\\n                    pA = 0,\\n                    pB = 0,\\n                    p_C = 0,\\n                    pC = 0,\\n                    p_CC = 0;\\n                var ncols = A.cols,\\n                    nrows = A.rows;\\n                var ad = A.data,\\n                    cd = C.data;\\n                var sum = 0.0;\\n\\n                for (; i < ncols; p_C += ncols, i++) {\\n                    p_A = i;\\n                    p_CC = p_C + i;\\n                    pC = p_CC;\\n                    for (j = i; j < ncols; pC++, p_CC += ncols, j++) {\\n                        pA = p_A;\\n                        pB = j;\\n                        sum = 0.0;\\n                        for (k = 0; k < nrows; pA += ncols, pB += ncols, k++) {\\n                            sum += ad[pA] * ad[pB];\\n                        }\\n                        cd[pC] = sum;\\n                        cd[p_CC] = sum;\\n                    }\\n                }\\n            },\\n\\n            // various small matrix operations\\n            identity_3x3: function identity_3x3(M, value) {\\n                if (typeof value === \\\"undefined\\\") {\\n                    value = 1;\\n                }\\n                var dt = M.data;\\n                dt[0] = dt[4] = dt[8] = value;\\n                dt[1] = dt[2] = dt[3] = 0;\\n                dt[5] = dt[6] = dt[7] = 0;\\n            },\\n\\n            invert_3x3: function invert_3x3(from, to) {\\n                var A = from.data,\\n                    invA = to.data;\\n                var t1 = A[4];\\n                var t2 = A[8];\\n                var t4 = A[5];\\n                var t5 = A[7];\\n                var t8 = A[0];\\n\\n                var t9 = t8 * t1;\\n                var t11 = t8 * t4;\\n                var t13 = A[3];\\n                var t14 = A[1];\\n                var t15 = t13 * t14;\\n                var t17 = A[2];\\n                var t18 = t13 * t17;\\n                var t20 = A[6];\\n                var t21 = t20 * t14;\\n                var t23 = t20 * t17;\\n                var t26 = 1.0 / (t9 * t2 - t11 * t5 - t15 * t2 + t18 * t5 + t21 * t4 - t23 * t1);\\n                invA[0] = (t1 * t2 - t4 * t5) * t26;\\n                invA[1] = -(t14 * t2 - t17 * t5) * t26;\\n                invA[2] = -(-t14 * t4 + t17 * t1) * t26;\\n                invA[3] = -(t13 * t2 - t4 * t20) * t26;\\n                invA[4] = (t8 * t2 - t23) * t26;\\n                invA[5] = -(t11 - t18) * t26;\\n                invA[6] = -(-t13 * t5 + t1 * t20) * t26;\\n                invA[7] = -(t8 * t5 - t21) * t26;\\n                invA[8] = (t9 - t15) * t26;\\n            },\\n            // C = A * B\\n            multiply_3x3: function multiply_3x3(C, A, B) {\\n                var Cd = C.data,\\n                    Ad = A.data,\\n                    Bd = B.data;\\n                var m1_0 = Ad[0],\\n                    m1_1 = Ad[1],\\n                    m1_2 = Ad[2];\\n                var m1_3 = Ad[3],\\n                    m1_4 = Ad[4],\\n                    m1_5 = Ad[5];\\n                var m1_6 = Ad[6],\\n                    m1_7 = Ad[7],\\n                    m1_8 = Ad[8];\\n\\n                var m2_0 = Bd[0],\\n                    m2_1 = Bd[1],\\n                    m2_2 = Bd[2];\\n                var m2_3 = Bd[3],\\n                    m2_4 = Bd[4],\\n                    m2_5 = Bd[5];\\n                var m2_6 = Bd[6],\\n                    m2_7 = Bd[7],\\n                    m2_8 = Bd[8];\\n\\n                Cd[0] = m1_0 * m2_0 + m1_1 * m2_3 + m1_2 * m2_6;\\n                Cd[1] = m1_0 * m2_1 + m1_1 * m2_4 + m1_2 * m2_7;\\n                Cd[2] = m1_0 * m2_2 + m1_1 * m2_5 + m1_2 * m2_8;\\n                Cd[3] = m1_3 * m2_0 + m1_4 * m2_3 + m1_5 * m2_6;\\n                Cd[4] = m1_3 * m2_1 + m1_4 * m2_4 + m1_5 * m2_7;\\n                Cd[5] = m1_3 * m2_2 + m1_4 * m2_5 + m1_5 * m2_8;\\n                Cd[6] = m1_6 * m2_0 + m1_7 * m2_3 + m1_8 * m2_6;\\n                Cd[7] = m1_6 * m2_1 + m1_7 * m2_4 + m1_8 * m2_7;\\n                Cd[8] = m1_6 * m2_2 + m1_7 * m2_5 + m1_8 * m2_8;\\n            },\\n\\n            mat3x3_determinant: function mat3x3_determinant(M) {\\n                var md = M.data;\\n                return md[0] * md[4] * md[8] - md[0] * md[5] * md[7] - md[3] * md[1] * md[8] + md[3] * md[2] * md[7] + md[6] * md[1] * md[5] - md[6] * md[2] * md[4];\\n            },\\n\\n            determinant_3x3: function determinant_3x3(M11, M12, M13, M21, M22, M23, M31, M32, M33) {\\n                return M11 * M22 * M33 - M11 * M23 * M32 - M21 * M12 * M33 + M21 * M13 * M32 + M31 * M12 * M23 - M31 * M13 * M22;\\n            }\\n        };\\n    }();\\n\\n    global.matmath = matmath;\\n})(jsfeat);\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n *\\r\\n */\\n\\n(function (global) {\\n    \\\"use strict\\\";\\n    //\\n\\n    var linalg = function () {\\n\\n        var swap = function swap(A, i0, i1, t) {\\n            t = A[i0];\\n            A[i0] = A[i1];\\n            A[i1] = t;\\n        };\\n\\n        var hypot = function hypot(a, b) {\\n            a = Math.abs(a);\\n            b = Math.abs(b);\\n            if (a > b) {\\n                b /= a;\\n                return a * Math.sqrt(1.0 + b * b);\\n            }\\n            if (b > 0) {\\n                a /= b;\\n                return b * Math.sqrt(1.0 + a * a);\\n            }\\n            return 0.0;\\n        };\\n\\n        var JacobiImpl = function JacobiImpl(A, astep, W, V, vstep, n) {\\n            var eps = jsfeat.EPSILON;\\n            var i = 0,\\n                j = 0,\\n                k = 0,\\n                m = 0,\\n                l = 0,\\n                idx = 0,\\n                _in = 0,\\n                _in2 = 0;\\n            var iters = 0,\\n                max_iter = n * n * 30;\\n            var mv = 0.0,\\n                val = 0.0,\\n                p = 0.0,\\n                y = 0.0,\\n                t = 0.0,\\n                s = 0.0,\\n                c = 0.0,\\n                a0 = 0.0,\\n                b0 = 0.0;\\n\\n            var indR_buff = jsfeat.cache.get_buffer(n << 2);\\n            var indC_buff = jsfeat.cache.get_buffer(n << 2);\\n            var indR = indR_buff.i32;\\n            var indC = indC_buff.i32;\\n\\n            if (V) {\\n                for (; i < n; i++) {\\n                    k = i * vstep;\\n                    for (j = 0; j < n; j++) {\\n                        V[k + j] = 0.0;\\n                    }\\n                    V[k + i] = 1.0;\\n                }\\n            }\\n\\n            for (k = 0; k < n; k++) {\\n                W[k] = A[(astep + 1) * k];\\n                if (k < n - 1) {\\n                    for (m = k + 1, mv = Math.abs(A[astep * k + m]), i = k + 2; i < n; i++) {\\n                        val = Math.abs(A[astep * k + i]);\\n                        if (mv < val) mv = val, m = i;\\n                    }\\n                    indR[k] = m;\\n                }\\n                if (k > 0) {\\n                    for (m = 0, mv = Math.abs(A[k]), i = 1; i < k; i++) {\\n                        val = Math.abs(A[astep * i + k]);\\n                        if (mv < val) mv = val, m = i;\\n                    }\\n                    indC[k] = m;\\n                }\\n            }\\n\\n            if (n > 1) for (; iters < max_iter; iters++) {\\n                // find index (k,l) of pivot p\\n                for (k = 0, mv = Math.abs(A[indR[0]]), i = 1; i < n - 1; i++) {\\n                    val = Math.abs(A[astep * i + indR[i]]);\\n                    if (mv < val) mv = val, k = i;\\n                }\\n                l = indR[k];\\n                for (i = 1; i < n; i++) {\\n                    val = Math.abs(A[astep * indC[i] + i]);\\n                    if (mv < val) mv = val, k = indC[i], l = i;\\n                }\\n\\n                p = A[astep * k + l];\\n\\n                if (Math.abs(p) <= eps) break;\\n\\n                y = (W[l] - W[k]) * 0.5;\\n                t = Math.abs(y) + hypot(p, y);\\n                s = hypot(p, t);\\n                c = t / s;\\n                s = p / s;t = p / t * p;\\n                if (y < 0) s = -s, t = -t;\\n                A[astep * k + l] = 0;\\n\\n                W[k] -= t;\\n                W[l] += t;\\n\\n                // rotate rows and columns k and l\\n                for (i = 0; i < k; i++) {\\n                    _in = astep * i + k;\\n                    _in2 = astep * i + l;\\n                    a0 = A[_in];\\n                    b0 = A[_in2];\\n                    A[_in] = a0 * c - b0 * s;\\n                    A[_in2] = a0 * s + b0 * c;\\n                }\\n                for (i = k + 1; i < l; i++) {\\n                    _in = astep * k + i;\\n                    _in2 = astep * i + l;\\n                    a0 = A[_in];\\n                    b0 = A[_in2];\\n                    A[_in] = a0 * c - b0 * s;\\n                    A[_in2] = a0 * s + b0 * c;\\n                }\\n                i = l + 1;\\n                _in = astep * k + i;\\n                _in2 = astep * l + i;\\n                for (; i < n; i++, _in++, _in2++) {\\n                    a0 = A[_in];\\n                    b0 = A[_in2];\\n                    A[_in] = a0 * c - b0 * s;\\n                    A[_in2] = a0 * s + b0 * c;\\n                }\\n\\n                // rotate eigenvectors\\n                if (V) {\\n                    _in = vstep * k;\\n                    _in2 = vstep * l;\\n                    for (i = 0; i < n; i++, _in++, _in2++) {\\n                        a0 = V[_in];\\n                        b0 = V[_in2];\\n                        V[_in] = a0 * c - b0 * s;\\n                        V[_in2] = a0 * s + b0 * c;\\n                    }\\n                }\\n\\n                for (j = 0; j < 2; j++) {\\n                    idx = j == 0 ? k : l;\\n                    if (idx < n - 1) {\\n                        for (m = idx + 1, mv = Math.abs(A[astep * idx + m]), i = idx + 2; i < n; i++) {\\n                            val = Math.abs(A[astep * idx + i]);\\n                            if (mv < val) mv = val, m = i;\\n                        }\\n                        indR[idx] = m;\\n                    }\\n                    if (idx > 0) {\\n                        for (m = 0, mv = Math.abs(A[idx]), i = 1; i < idx; i++) {\\n                            val = Math.abs(A[astep * i + idx]);\\n                            if (mv < val) mv = val, m = i;\\n                        }\\n                        indC[idx] = m;\\n                    }\\n                }\\n            }\\n\\n            // sort eigenvalues & eigenvectors\\n            for (k = 0; k < n - 1; k++) {\\n                m = k;\\n                for (i = k + 1; i < n; i++) {\\n                    if (W[m] < W[i]) m = i;\\n                }\\n                if (k != m) {\\n                    swap(W, m, k, mv);\\n                    if (V) {\\n                        for (i = 0; i < n; i++) {\\n                            swap(V, vstep * m + i, vstep * k + i, mv);\\n                        }\\n                    }\\n                }\\n            }\\n\\n            jsfeat.cache.put_buffer(indR_buff);\\n            jsfeat.cache.put_buffer(indC_buff);\\n        };\\n\\n        var JacobiSVDImpl = function JacobiSVDImpl(At, astep, _W, Vt, vstep, m, n, n1) {\\n            var eps = jsfeat.EPSILON * 2.0;\\n            var minval = jsfeat.FLT_MIN;\\n            var i = 0,\\n                j = 0,\\n                k = 0,\\n                iter = 0,\\n                max_iter = Math.max(m, 30);\\n            var Ai = 0,\\n                Aj = 0,\\n                Vi = 0,\\n                Vj = 0,\\n                changed = 0;\\n            var c = 0.0,\\n                s = 0.0,\\n                t = 0.0;\\n            var t0 = 0.0,\\n                t1 = 0.0,\\n                sd = 0.0,\\n                beta = 0.0,\\n                gamma = 0.0,\\n                delta = 0.0,\\n                a = 0.0,\\n                p = 0.0,\\n                b = 0.0;\\n            var seed = 0x1234;\\n            var val = 0.0,\\n                val0 = 0.0,\\n                asum = 0.0;\\n\\n            var W_buff = jsfeat.cache.get_buffer(n << 3);\\n            var W = W_buff.f64;\\n\\n            for (; i < n; i++) {\\n                for (k = 0, sd = 0; k < m; k++) {\\n                    t = At[i * astep + k];\\n                    sd += t * t;\\n                }\\n                W[i] = sd;\\n\\n                if (Vt) {\\n                    for (k = 0; k < n; k++) {\\n                        Vt[i * vstep + k] = 0;\\n                    }\\n                    Vt[i * vstep + i] = 1;\\n                }\\n            }\\n\\n            for (; iter < max_iter; iter++) {\\n                changed = 0;\\n\\n                for (i = 0; i < n - 1; i++) {\\n                    for (j = i + 1; j < n; j++) {\\n                        Ai = i * astep | 0, Aj = j * astep | 0;\\n                        a = W[i], p = 0, b = W[j];\\n\\n                        k = 2;\\n                        p += At[Ai] * At[Aj];\\n                        p += At[Ai + 1] * At[Aj + 1];\\n\\n                        for (; k < m; k++) {\\n                            p += At[Ai + k] * At[Aj + k];\\n                        }if (Math.abs(p) <= eps * Math.sqrt(a * b)) continue;\\n\\n                        p *= 2.0;\\n                        beta = a - b, gamma = hypot(p, beta);\\n                        if (beta < 0) {\\n                            delta = (gamma - beta) * 0.5;\\n                            s = Math.sqrt(delta / gamma);\\n                            c = p / (gamma * s * 2.0);\\n                        } else {\\n                            c = Math.sqrt((gamma + beta) / (gamma * 2.0));\\n                            s = p / (gamma * c * 2.0);\\n                        }\\n\\n                        a = 0.0, b = 0.0;\\n\\n                        k = 2; // unroll\\n                        t0 = c * At[Ai] + s * At[Aj];\\n                        t1 = -s * At[Ai] + c * At[Aj];\\n                        At[Ai] = t0;At[Aj] = t1;\\n                        a += t0 * t0;b += t1 * t1;\\n\\n                        t0 = c * At[Ai + 1] + s * At[Aj + 1];\\n                        t1 = -s * At[Ai + 1] + c * At[Aj + 1];\\n                        At[Ai + 1] = t0;At[Aj + 1] = t1;\\n                        a += t0 * t0;b += t1 * t1;\\n\\n                        for (; k < m; k++) {\\n                            t0 = c * At[Ai + k] + s * At[Aj + k];\\n                            t1 = -s * At[Ai + k] + c * At[Aj + k];\\n                            At[Ai + k] = t0;At[Aj + k] = t1;\\n\\n                            a += t0 * t0;b += t1 * t1;\\n                        }\\n\\n                        W[i] = a;W[j] = b;\\n\\n                        changed = 1;\\n\\n                        if (Vt) {\\n                            Vi = i * vstep | 0, Vj = j * vstep | 0;\\n\\n                            k = 2;\\n                            t0 = c * Vt[Vi] + s * Vt[Vj];\\n                            t1 = -s * Vt[Vi] + c * Vt[Vj];\\n                            Vt[Vi] = t0;Vt[Vj] = t1;\\n\\n                            t0 = c * Vt[Vi + 1] + s * Vt[Vj + 1];\\n                            t1 = -s * Vt[Vi + 1] + c * Vt[Vj + 1];\\n                            Vt[Vi + 1] = t0;Vt[Vj + 1] = t1;\\n\\n                            for (; k < n; k++) {\\n                                t0 = c * Vt[Vi + k] + s * Vt[Vj + k];\\n                                t1 = -s * Vt[Vi + k] + c * Vt[Vj + k];\\n                                Vt[Vi + k] = t0;Vt[Vj + k] = t1;\\n                            }\\n                        }\\n                    }\\n                }\\n                if (changed == 0) break;\\n            }\\n\\n            for (i = 0; i < n; i++) {\\n                for (k = 0, sd = 0; k < m; k++) {\\n                    t = At[i * astep + k];\\n                    sd += t * t;\\n                }\\n                W[i] = Math.sqrt(sd);\\n            }\\n\\n            for (i = 0; i < n - 1; i++) {\\n                j = i;\\n                for (k = i + 1; k < n; k++) {\\n                    if (W[j] < W[k]) j = k;\\n                }\\n                if (i != j) {\\n                    swap(W, i, j, sd);\\n                    if (Vt) {\\n                        for (k = 0; k < m; k++) {\\n                            swap(At, i * astep + k, j * astep + k, t);\\n                        }\\n\\n                        for (k = 0; k < n; k++) {\\n                            swap(Vt, i * vstep + k, j * vstep + k, t);\\n                        }\\n                    }\\n                }\\n            }\\n\\n            for (i = 0; i < n; i++) {\\n                _W[i] = W[i];\\n            }\\n\\n            if (!Vt) {\\n                jsfeat.cache.put_buffer(W_buff);\\n                return;\\n            }\\n\\n            for (i = 0; i < n1; i++) {\\n\\n                sd = i < n ? W[i] : 0;\\n\\n                while (sd <= minval) {\\n                    // if we got a zero singular value, then in order to get the corresponding left singular vector\\n                    // we generate a random vector, project it to the previously computed left singular vectors,\\n                    // subtract the projection and normalize the difference.\\n                    val0 = 1.0 / m;\\n                    for (k = 0; k < m; k++) {\\n                        seed = seed * 214013 + 2531011;\\n                        val = (seed >> 16 & 0x7fff & 256) != 0 ? val0 : -val0;\\n                        At[i * astep + k] = val;\\n                    }\\n                    for (iter = 0; iter < 2; iter++) {\\n                        for (j = 0; j < i; j++) {\\n                            sd = 0;\\n                            for (k = 0; k < m; k++) {\\n                                sd += At[i * astep + k] * At[j * astep + k];\\n                            }\\n                            asum = 0.0;\\n                            for (k = 0; k < m; k++) {\\n                                t = At[i * astep + k] - sd * At[j * astep + k];\\n                                At[i * astep + k] = t;\\n                                asum += Math.abs(t);\\n                            }\\n                            asum = asum ? 1.0 / asum : 0;\\n                            for (k = 0; k < m; k++) {\\n                                At[i * astep + k] *= asum;\\n                            }\\n                        }\\n                    }\\n                    sd = 0;\\n                    for (k = 0; k < m; k++) {\\n                        t = At[i * astep + k];\\n                        sd += t * t;\\n                    }\\n                    sd = Math.sqrt(sd);\\n                }\\n\\n                s = 1.0 / sd;\\n                for (k = 0; k < m; k++) {\\n                    At[i * astep + k] *= s;\\n                }\\n            }\\n\\n            jsfeat.cache.put_buffer(W_buff);\\n        };\\n\\n        return {\\n\\n            lu_solve: function lu_solve(A, B) {\\n                var i = 0,\\n                    j = 0,\\n                    k = 0,\\n                    p = 1,\\n                    astep = A.cols;\\n                var ad = A.data,\\n                    bd = B.data;\\n                var t, alpha, d, s;\\n\\n                for (i = 0; i < astep; i++) {\\n                    k = i;\\n                    for (j = i + 1; j < astep; j++) {\\n                        if (Math.abs(ad[j * astep + i]) > Math.abs(ad[k * astep + i])) {\\n                            k = j;\\n                        }\\n                    }\\n\\n                    if (Math.abs(ad[k * astep + i]) < jsfeat.EPSILON) {\\n                        return 0; // FAILED\\n                    }\\n\\n                    if (k != i) {\\n                        for (j = i; j < astep; j++) {\\n                            swap(ad, i * astep + j, k * astep + j, t);\\n                        }\\n\\n                        swap(bd, i, k, t);\\n                        p = -p;\\n                    }\\n\\n                    d = -1.0 / ad[i * astep + i];\\n\\n                    for (j = i + 1; j < astep; j++) {\\n                        alpha = ad[j * astep + i] * d;\\n\\n                        for (k = i + 1; k < astep; k++) {\\n                            ad[j * astep + k] += alpha * ad[i * astep + k];\\n                        }\\n\\n                        bd[j] += alpha * bd[i];\\n                    }\\n\\n                    ad[i * astep + i] = -d;\\n                }\\n\\n                for (i = astep - 1; i >= 0; i--) {\\n                    s = bd[i];\\n                    for (k = i + 1; k < astep; k++) {\\n                        s -= ad[i * astep + k] * bd[k];\\n                    }\\n                    bd[i] = s * ad[i * astep + i];\\n                }\\n\\n                return 1; // OK\\n            },\\n\\n            cholesky_solve: function cholesky_solve(A, B) {\\n                var col = 0,\\n                    row = 0,\\n                    col2 = 0,\\n                    cs = 0,\\n                    rs = 0,\\n                    i = 0,\\n                    j = 0;\\n                var size = A.cols;\\n                var ad = A.data,\\n                    bd = B.data;\\n                var val, inv_diag;\\n\\n                for (col = 0; col < size; col++) {\\n                    inv_diag = 1.0;\\n                    cs = col * size;\\n                    rs = cs;\\n                    for (row = col; row < size; row++) {\\n                        // correct for the parts of cholesky already computed\\n                        val = ad[rs + col];\\n                        for (col2 = 0; col2 < col; col2++) {\\n                            val -= ad[col2 * size + col] * ad[rs + col2];\\n                        }\\n                        if (row == col) {\\n                            // this is the diagonal element so don't divide\\n                            ad[rs + col] = val;\\n                            if (val == 0) {\\n                                return 0;\\n                            }\\n                            inv_diag = 1.0 / val;\\n                        } else {\\n                            // cache the value without division in the upper half\\n                            ad[cs + row] = val;\\n                            // divide my the diagonal element for all others\\n                            ad[rs + col] = val * inv_diag;\\n                        }\\n                        rs = rs + size;\\n                    }\\n                }\\n\\n                // first backsub through L\\n                cs = 0;\\n                for (i = 0; i < size; i++) {\\n                    val = bd[i];\\n                    for (j = 0; j < i; j++) {\\n                        val -= ad[cs + j] * bd[j];\\n                    }\\n                    bd[i] = val;\\n                    cs = cs + size;\\n                }\\n                // backsub through diagonal\\n                cs = 0;\\n                for (i = 0; i < size; i++) {\\n                    bd[i] /= ad[cs + i];\\n                    cs = cs + size;\\n                }\\n                // backsub through L Transpose\\n                i = size - 1;\\n                for (; i >= 0; i--) {\\n                    val = bd[i];\\n                    j = i + 1;\\n                    cs = j * size;\\n                    for (; j < size; j++) {\\n                        val -= ad[cs + i] * bd[j];\\n                        cs = cs + size;\\n                    }\\n                    bd[i] = val;\\n                }\\n\\n                return 1;\\n            },\\n\\n            svd_decompose: function svd_decompose(A, W, U, V, options) {\\n                if (typeof options === \\\"undefined\\\") {\\n                    options = 0;\\n                };\\n                var at = 0,\\n                    i = 0,\\n                    j = 0,\\n                    _m = A.rows,\\n                    _n = A.cols,\\n                    m = _m,\\n                    n = _n;\\n                var dt = A.type | jsfeat.C1_t; // we only work with single channel\\n\\n                if (m < n) {\\n                    at = 1;\\n                    i = m;\\n                    m = n;\\n                    n = i;\\n                }\\n\\n                var a_buff = jsfeat.cache.get_buffer(m * m << 3);\\n                var w_buff = jsfeat.cache.get_buffer(n << 3);\\n                var v_buff = jsfeat.cache.get_buffer(n * n << 3);\\n\\n                var a_mt = new jsfeat.matrix_t(m, m, dt, a_buff.data);\\n                var w_mt = new jsfeat.matrix_t(1, n, dt, w_buff.data);\\n                var v_mt = new jsfeat.matrix_t(n, n, dt, v_buff.data);\\n\\n                if (at == 0) {\\n                    // transpose\\n                    jsfeat.matmath.transpose(a_mt, A);\\n                } else {\\n                    for (i = 0; i < _n * _m; i++) {\\n                        a_mt.data[i] = A.data[i];\\n                    }\\n                    for (; i < n * m; i++) {\\n                        a_mt.data[i] = 0;\\n                    }\\n                }\\n\\n                JacobiSVDImpl(a_mt.data, m, w_mt.data, v_mt.data, n, m, n, m);\\n\\n                if (W) {\\n                    for (i = 0; i < n; i++) {\\n                        W.data[i] = w_mt.data[i];\\n                    }\\n                    for (; i < _n; i++) {\\n                        W.data[i] = 0;\\n                    }\\n                }\\n\\n                if (at == 0) {\\n                    if (U && options & jsfeat.SVD_U_T) {\\n                        i = m * m;\\n                        while (--i >= 0) {\\n                            U.data[i] = a_mt.data[i];\\n                        }\\n                    } else if (U) {\\n                        jsfeat.matmath.transpose(U, a_mt);\\n                    }\\n\\n                    if (V && options & jsfeat.SVD_V_T) {\\n                        i = n * n;\\n                        while (--i >= 0) {\\n                            V.data[i] = v_mt.data[i];\\n                        }\\n                    } else if (V) {\\n                        jsfeat.matmath.transpose(V, v_mt);\\n                    }\\n                } else {\\n                    if (U && options & jsfeat.SVD_U_T) {\\n                        i = n * n;\\n                        while (--i >= 0) {\\n                            U.data[i] = v_mt.data[i];\\n                        }\\n                    } else if (U) {\\n                        jsfeat.matmath.transpose(U, v_mt);\\n                    }\\n\\n                    if (V && options & jsfeat.SVD_V_T) {\\n                        i = m * m;\\n                        while (--i >= 0) {\\n                            V.data[i] = a_mt.data[i];\\n                        }\\n                    } else if (V) {\\n                        jsfeat.matmath.transpose(V, a_mt);\\n                    }\\n                }\\n\\n                jsfeat.cache.put_buffer(a_buff);\\n                jsfeat.cache.put_buffer(w_buff);\\n                jsfeat.cache.put_buffer(v_buff);\\n            },\\n\\n            svd_solve: function svd_solve(A, X, B) {\\n                var i = 0,\\n                    j = 0,\\n                    k = 0;\\n                var pu = 0,\\n                    pv = 0;\\n                var nrows = A.rows,\\n                    ncols = A.cols;\\n                var sum = 0.0,\\n                    xsum = 0.0,\\n                    tol = 0.0;\\n                var dt = A.type | jsfeat.C1_t;\\n\\n                var u_buff = jsfeat.cache.get_buffer(nrows * nrows << 3);\\n                var w_buff = jsfeat.cache.get_buffer(ncols << 3);\\n                var v_buff = jsfeat.cache.get_buffer(ncols * ncols << 3);\\n\\n                var u_mt = new jsfeat.matrix_t(nrows, nrows, dt, u_buff.data);\\n                var w_mt = new jsfeat.matrix_t(1, ncols, dt, w_buff.data);\\n                var v_mt = new jsfeat.matrix_t(ncols, ncols, dt, v_buff.data);\\n\\n                var bd = B.data,\\n                    ud = u_mt.data,\\n                    wd = w_mt.data,\\n                    vd = v_mt.data;\\n\\n                this.svd_decompose(A, w_mt, u_mt, v_mt, 0);\\n\\n                tol = jsfeat.EPSILON * wd[0] * ncols;\\n\\n                for (; i < ncols; i++, pv += ncols) {\\n                    xsum = 0.0;\\n                    for (j = 0; j < ncols; j++) {\\n                        if (wd[j] > tol) {\\n                            for (k = 0, sum = 0.0, pu = 0; k < nrows; k++, pu += ncols) {\\n                                sum += ud[pu + j] * bd[k];\\n                            }\\n                            xsum += sum * vd[pv + j] / wd[j];\\n                        }\\n                    }\\n                    X.data[i] = xsum;\\n                }\\n\\n                jsfeat.cache.put_buffer(u_buff);\\n                jsfeat.cache.put_buffer(w_buff);\\n                jsfeat.cache.put_buffer(v_buff);\\n            },\\n\\n            svd_invert: function svd_invert(Ai, A) {\\n                var i = 0,\\n                    j = 0,\\n                    k = 0;\\n                var pu = 0,\\n                    pv = 0,\\n                    pa = 0;\\n                var nrows = A.rows,\\n                    ncols = A.cols;\\n                var sum = 0.0,\\n                    tol = 0.0;\\n                var dt = A.type | jsfeat.C1_t;\\n\\n                var u_buff = jsfeat.cache.get_buffer(nrows * nrows << 3);\\n                var w_buff = jsfeat.cache.get_buffer(ncols << 3);\\n                var v_buff = jsfeat.cache.get_buffer(ncols * ncols << 3);\\n\\n                var u_mt = new jsfeat.matrix_t(nrows, nrows, dt, u_buff.data);\\n                var w_mt = new jsfeat.matrix_t(1, ncols, dt, w_buff.data);\\n                var v_mt = new jsfeat.matrix_t(ncols, ncols, dt, v_buff.data);\\n\\n                var id = Ai.data,\\n                    ud = u_mt.data,\\n                    wd = w_mt.data,\\n                    vd = v_mt.data;\\n\\n                this.svd_decompose(A, w_mt, u_mt, v_mt, 0);\\n\\n                tol = jsfeat.EPSILON * wd[0] * ncols;\\n\\n                for (; i < ncols; i++, pv += ncols) {\\n                    for (j = 0, pu = 0; j < nrows; j++, pa++) {\\n                        for (k = 0, sum = 0.0; k < ncols; k++, pu++) {\\n                            if (wd[k] > tol) sum += vd[pv + k] * ud[pu] / wd[k];\\n                        }\\n                        id[pa] = sum;\\n                    }\\n                }\\n\\n                jsfeat.cache.put_buffer(u_buff);\\n                jsfeat.cache.put_buffer(w_buff);\\n                jsfeat.cache.put_buffer(v_buff);\\n            },\\n\\n            eigenVV: function eigenVV(A, vects, vals) {\\n                var n = A.cols,\\n                    i = n * n;\\n                var dt = A.type | jsfeat.C1_t;\\n\\n                var a_buff = jsfeat.cache.get_buffer(n * n << 3);\\n                var w_buff = jsfeat.cache.get_buffer(n << 3);\\n                var a_mt = new jsfeat.matrix_t(n, n, dt, a_buff.data);\\n                var w_mt = new jsfeat.matrix_t(1, n, dt, w_buff.data);\\n\\n                while (--i >= 0) {\\n                    a_mt.data[i] = A.data[i];\\n                }\\n\\n                JacobiImpl(a_mt.data, n, w_mt.data, vects ? vects.data : null, n, n);\\n\\n                if (vals) {\\n                    while (--n >= 0) {\\n                        vals.data[n] = w_mt.data[n];\\n                    }\\n                }\\n\\n                jsfeat.cache.put_buffer(a_buff);\\n                jsfeat.cache.put_buffer(w_buff);\\n            }\\n\\n        };\\n    }();\\n\\n    global.linalg = linalg;\\n})(jsfeat);\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n *\\r\\n */\\n\\n(function (global) {\\n    \\\"use strict\\\";\\n    //\\n\\n    var motion_model = function () {\\n\\n        var sqr = function sqr(x) {\\n            return x * x;\\n        };\\n\\n        // does isotropic normalization\\n        var iso_normalize_points = function iso_normalize_points(from, to, T0, T1, count) {\\n            var i = 0;\\n            var cx0 = 0.0,\\n                cy0 = 0.0,\\n                d0 = 0.0,\\n                s0 = 0.0;\\n            var cx1 = 0.0,\\n                cy1 = 0.0,\\n                d1 = 0.0,\\n                s1 = 0.0;\\n            var dx = 0.0,\\n                dy = 0.0;\\n\\n            for (; i < count; ++i) {\\n                cx0 += from[i].x;\\n                cy0 += from[i].y;\\n                cx1 += to[i].x;\\n                cy1 += to[i].y;\\n            }\\n\\n            cx0 /= count;cy0 /= count;\\n            cx1 /= count;cy1 /= count;\\n\\n            for (i = 0; i < count; ++i) {\\n                dx = from[i].x - cx0;\\n                dy = from[i].y - cy0;\\n                d0 += Math.sqrt(dx * dx + dy * dy);\\n                dx = to[i].x - cx1;\\n                dy = to[i].y - cy1;\\n                d1 += Math.sqrt(dx * dx + dy * dy);\\n            }\\n\\n            d0 /= count;d1 /= count;\\n\\n            s0 = Math.SQRT2 / d0;s1 = Math.SQRT2 / d1;\\n\\n            T0[0] = T0[4] = s0;\\n            T0[2] = -cx0 * s0;\\n            T0[5] = -cy0 * s0;\\n            T0[1] = T0[3] = T0[6] = T0[7] = 0.0;\\n            T0[8] = 1.0;\\n\\n            T1[0] = T1[4] = s1;\\n            T1[2] = -cx1 * s1;\\n            T1[5] = -cy1 * s1;\\n            T1[1] = T1[3] = T1[6] = T1[7] = 0.0;\\n            T1[8] = 1.0;\\n        };\\n\\n        var have_collinear_points = function have_collinear_points(points, count) {\\n            var j = 0,\\n                k = 0,\\n                i = count - 1 | 0;\\n            var dx1 = 0.0,\\n                dy1 = 0.0,\\n                dx2 = 0.0,\\n                dy2 = 0.0;\\n\\n            // check that the i-th selected point does not belong\\n            // to a line connecting some previously selected points\\n            for (; j < i; ++j) {\\n                dx1 = points[j].x - points[i].x;\\n                dy1 = points[j].y - points[i].y;\\n                for (k = 0; k < j; ++k) {\\n                    dx2 = points[k].x - points[i].x;\\n                    dy2 = points[k].y - points[i].y;\\n                    if (Math.abs(dx2 * dy1 - dy2 * dx1) <= jsfeat.EPSILON * (Math.abs(dx1) + Math.abs(dy1) + Math.abs(dx2) + Math.abs(dy2))) return true;\\n                }\\n            }\\n            return false;\\n        };\\n\\n        var T0 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t | jsfeat.C1_t);\\n        var T1 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t | jsfeat.C1_t);\\n        var AtA = new jsfeat.matrix_t(6, 6, jsfeat.F32_t | jsfeat.C1_t);\\n        var AtB = new jsfeat.matrix_t(6, 1, jsfeat.F32_t | jsfeat.C1_t);\\n\\n        var affine2d = function () {\\n\\n            function affine2d() {\\n                // empty constructor\\n            }\\n\\n            affine2d.prototype.run = function (from, to, model, count) {\\n                var i = 0,\\n                    j = 0;\\n                var dt = model.type | jsfeat.C1_t;\\n                var md = model.data,\\n                    t0d = T0.data,\\n                    t1d = T1.data;\\n                var pt0,\\n                    pt1,\\n                    px = 0.0,\\n                    py = 0.0;\\n\\n                iso_normalize_points(from, to, t0d, t1d, count);\\n\\n                var a_buff = jsfeat.cache.get_buffer(2 * count * 6 << 3);\\n                var b_buff = jsfeat.cache.get_buffer(2 * count << 3);\\n\\n                var a_mt = new jsfeat.matrix_t(6, 2 * count, dt, a_buff.data);\\n                var b_mt = new jsfeat.matrix_t(1, 2 * count, dt, b_buff.data);\\n                var ad = a_mt.data,\\n                    bd = b_mt.data;\\n\\n                for (; i < count; ++i) {\\n                    pt0 = from[i];\\n                    pt1 = to[i];\\n\\n                    px = t0d[0] * pt0.x + t0d[1] * pt0.y + t0d[2];\\n                    py = t0d[3] * pt0.x + t0d[4] * pt0.y + t0d[5];\\n\\n                    j = i * 2 * 6;\\n                    ad[j] = px, ad[j + 1] = py, ad[j + 2] = 1.0, ad[j + 3] = 0.0, ad[j + 4] = 0.0, ad[j + 5] = 0.0;\\n\\n                    j += 6;\\n                    ad[j] = 0.0, ad[j + 1] = 0.0, ad[j + 2] = 0.0, ad[j + 3] = px, ad[j + 4] = py, ad[j + 5] = 1.0;\\n\\n                    bd[i << 1] = t1d[0] * pt1.x + t1d[1] * pt1.y + t1d[2];\\n                    bd[(i << 1) + 1] = t1d[3] * pt1.x + t1d[4] * pt1.y + t1d[5];\\n                }\\n\\n                jsfeat.matmath.multiply_AtA(AtA, a_mt);\\n                jsfeat.matmath.multiply_AtB(AtB, a_mt, b_mt);\\n\\n                jsfeat.linalg.lu_solve(AtA, AtB);\\n\\n                md[0] = AtB.data[0], md[1] = AtB.data[1], md[2] = AtB.data[2];\\n                md[3] = AtB.data[3], md[4] = AtB.data[4], md[5] = AtB.data[5];\\n                md[6] = 0.0, md[7] = 0.0, md[8] = 1.0; // fill last row\\n\\n                // denormalize\\n                jsfeat.matmath.invert_3x3(T1, T1);\\n                jsfeat.matmath.multiply_3x3(model, T1, model);\\n                jsfeat.matmath.multiply_3x3(model, model, T0);\\n\\n                // free buffer\\n                jsfeat.cache.put_buffer(a_buff);\\n                jsfeat.cache.put_buffer(b_buff);\\n\\n                return 1;\\n            };\\n\\n            affine2d.prototype.error = function (from, to, model, err, count) {\\n                var i = 0;\\n                var pt0, pt1;\\n                var m = model.data;\\n\\n                for (; i < count; ++i) {\\n                    pt0 = from[i];\\n                    pt1 = to[i];\\n\\n                    err[i] = sqr(pt1.x - m[0] * pt0.x - m[1] * pt0.y - m[2]) + sqr(pt1.y - m[3] * pt0.x - m[4] * pt0.y - m[5]);\\n                }\\n            };\\n\\n            affine2d.prototype.check_subset = function (from, to, count) {\\n                return true; // all good\\n            };\\n\\n            return affine2d;\\n        }();\\n\\n        var mLtL = new jsfeat.matrix_t(9, 9, jsfeat.F32_t | jsfeat.C1_t);\\n        var Evec = new jsfeat.matrix_t(9, 9, jsfeat.F32_t | jsfeat.C1_t);\\n\\n        var homography2d = function () {\\n\\n            function homography2d() {\\n                // empty constructor\\n                //this.T0 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\\n                //this.T1 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\\n                //this.mLtL = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\\n                //this.Evec = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\\n            }\\n\\n            homography2d.prototype.run = function (from, to, model, count) {\\n                var i = 0,\\n                    j = 0;\\n                var md = model.data,\\n                    t0d = T0.data,\\n                    t1d = T1.data;\\n                var LtL = mLtL.data,\\n                    evd = Evec.data;\\n                var x = 0.0,\\n                    y = 0.0,\\n                    X = 0.0,\\n                    Y = 0.0;\\n\\n                // norm\\n                var smx = 0.0,\\n                    smy = 0.0,\\n                    cmx = 0.0,\\n                    cmy = 0.0,\\n                    sMx = 0.0,\\n                    sMy = 0.0,\\n                    cMx = 0.0,\\n                    cMy = 0.0;\\n\\n                for (; i < count; ++i) {\\n                    cmx += to[i].x;\\n                    cmy += to[i].y;\\n                    cMx += from[i].x;\\n                    cMy += from[i].y;\\n                }\\n\\n                cmx /= count;cmy /= count;\\n                cMx /= count;cMy /= count;\\n\\n                for (i = 0; i < count; ++i) {\\n                    smx += Math.abs(to[i].x - cmx);\\n                    smy += Math.abs(to[i].y - cmy);\\n                    sMx += Math.abs(from[i].x - cMx);\\n                    sMy += Math.abs(from[i].y - cMy);\\n                }\\n\\n                if (Math.abs(smx) < jsfeat.EPSILON || Math.abs(smy) < jsfeat.EPSILON || Math.abs(sMx) < jsfeat.EPSILON || Math.abs(sMy) < jsfeat.EPSILON) return 0;\\n\\n                smx = count / smx;smy = count / smy;\\n                sMx = count / sMx;sMy = count / sMy;\\n\\n                t0d[0] = sMx;t0d[1] = 0;t0d[2] = -cMx * sMx;\\n                t0d[3] = 0;t0d[4] = sMy;t0d[5] = -cMy * sMy;\\n                t0d[6] = 0;t0d[7] = 0;t0d[8] = 1;\\n\\n                t1d[0] = 1.0 / smx;t1d[1] = 0;t1d[2] = cmx;\\n                t1d[3] = 0;t1d[4] = 1.0 / smy;t1d[5] = cmy;\\n                t1d[6] = 0;t1d[7] = 0;t1d[8] = 1;\\n                //\\n\\n                // construct system\\n                i = 81;\\n                while (--i >= 0) {\\n                    LtL[i] = 0.0;\\n                }\\n                for (i = 0; i < count; ++i) {\\n                    x = (to[i].x - cmx) * smx;\\n                    y = (to[i].y - cmy) * smy;\\n                    X = (from[i].x - cMx) * sMx;\\n                    Y = (from[i].y - cMy) * sMy;\\n\\n                    LtL[0] += X * X;\\n                    LtL[1] += X * Y;\\n                    LtL[2] += X;\\n\\n                    LtL[6] += X * -x * X;\\n                    LtL[7] += X * -x * Y;\\n                    LtL[8] += X * -x;\\n                    LtL[10] += Y * Y;\\n                    LtL[11] += Y;\\n\\n                    LtL[15] += Y * -x * X;\\n                    LtL[16] += Y * -x * Y;\\n                    LtL[17] += Y * -x;\\n                    LtL[20] += 1.0;\\n\\n                    LtL[24] += -x * X;\\n                    LtL[25] += -x * Y;\\n                    LtL[26] += -x;\\n                    LtL[30] += X * X;\\n                    LtL[31] += X * Y;\\n                    LtL[32] += X;\\n                    LtL[33] += X * -y * X;\\n                    LtL[34] += X * -y * Y;\\n                    LtL[35] += X * -y;\\n                    LtL[40] += Y * Y;\\n                    LtL[41] += Y;\\n                    LtL[42] += Y * -y * X;\\n                    LtL[43] += Y * -y * Y;\\n                    LtL[44] += Y * -y;\\n                    LtL[50] += 1.0;\\n                    LtL[51] += -y * X;\\n                    LtL[52] += -y * Y;\\n                    LtL[53] += -y;\\n                    LtL[60] += -x * X * -x * X + -y * X * -y * X;\\n                    LtL[61] += -x * X * -x * Y + -y * X * -y * Y;\\n                    LtL[62] += -x * X * -x + -y * X * -y;\\n                    LtL[70] += -x * Y * -x * Y + -y * Y * -y * Y;\\n                    LtL[71] += -x * Y * -x + -y * Y * -y;\\n                    LtL[80] += -x * -x + -y * -y;\\n                }\\n                //\\n\\n                // symmetry\\n                for (i = 0; i < 9; ++i) {\\n                    for (j = 0; j < i; ++j) {\\n                        LtL[i * 9 + j] = LtL[j * 9 + i];\\n                    }\\n                }\\n\\n                jsfeat.linalg.eigenVV(mLtL, Evec);\\n\\n                md[0] = evd[72], md[1] = evd[73], md[2] = evd[74];\\n                md[3] = evd[75], md[4] = evd[76], md[5] = evd[77];\\n                md[6] = evd[78], md[7] = evd[79], md[8] = evd[80];\\n\\n                // denormalize\\n                jsfeat.matmath.multiply_3x3(model, T1, model);\\n                jsfeat.matmath.multiply_3x3(model, model, T0);\\n\\n                // set bottom right to 1.0\\n                x = 1.0 / md[8];\\n                md[0] *= x;md[1] *= x;md[2] *= x;\\n                md[3] *= x;md[4] *= x;md[5] *= x;\\n                md[6] *= x;md[7] *= x;md[8] = 1.0;\\n\\n                return 1;\\n            };\\n\\n            homography2d.prototype.error = function (from, to, model, err, count) {\\n                var i = 0;\\n                var pt0,\\n                    pt1,\\n                    ww = 0.0,\\n                    dx = 0.0,\\n                    dy = 0.0;\\n                var m = model.data;\\n\\n                for (; i < count; ++i) {\\n                    pt0 = from[i];\\n                    pt1 = to[i];\\n\\n                    ww = 1.0 / (m[6] * pt0.x + m[7] * pt0.y + 1.0);\\n                    dx = (m[0] * pt0.x + m[1] * pt0.y + m[2]) * ww - pt1.x;\\n                    dy = (m[3] * pt0.x + m[4] * pt0.y + m[5]) * ww - pt1.y;\\n                    err[i] = dx * dx + dy * dy;\\n                }\\n            };\\n\\n            homography2d.prototype.check_subset = function (from, to, count) {\\n                // seems to reject good subsets actually\\n                //if( have_collinear_points(from, count) || have_collinear_points(to, count) ) {\\n                //return false;\\n                //}\\n                if (count == 4) {\\n                    var negative = 0;\\n\\n                    var fp0 = from[0],\\n                        fp1 = from[1],\\n                        fp2 = from[2],\\n                        fp3 = from[3];\\n                    var tp0 = to[0],\\n                        tp1 = to[1],\\n                        tp2 = to[2],\\n                        tp3 = to[3];\\n\\n                    // set1\\n                    var A11 = fp0.x,\\n                        A12 = fp0.y,\\n                        A13 = 1.0;\\n                    var A21 = fp1.x,\\n                        A22 = fp1.y,\\n                        A23 = 1.0;\\n                    var A31 = fp2.x,\\n                        A32 = fp2.y,\\n                        A33 = 1.0;\\n\\n                    var B11 = tp0.x,\\n                        B12 = tp0.y,\\n                        B13 = 1.0;\\n                    var B21 = tp1.x,\\n                        B22 = tp1.y,\\n                        B23 = 1.0;\\n                    var B31 = tp2.x,\\n                        B32 = tp2.y,\\n                        B33 = 1.0;\\n\\n                    var detA = jsfeat.matmath.determinant_3x3(A11, A12, A13, A21, A22, A23, A31, A32, A33);\\n                    var detB = jsfeat.matmath.determinant_3x3(B11, B12, B13, B21, B22, B23, B31, B32, B33);\\n\\n                    if (detA * detB < 0) negative++;\\n\\n                    // set2\\n                    A11 = fp1.x, A12 = fp1.y;\\n                    A21 = fp2.x, A22 = fp2.y;\\n                    A31 = fp3.x, A32 = fp3.y;\\n\\n                    B11 = tp1.x, B12 = tp1.y;\\n                    B21 = tp2.x, B22 = tp2.y;\\n                    B31 = tp3.x, B32 = tp3.y;\\n\\n                    detA = jsfeat.matmath.determinant_3x3(A11, A12, A13, A21, A22, A23, A31, A32, A33);\\n                    detB = jsfeat.matmath.determinant_3x3(B11, B12, B13, B21, B22, B23, B31, B32, B33);\\n\\n                    if (detA * detB < 0) negative++;\\n\\n                    // set3\\n                    A11 = fp0.x, A12 = fp0.y;\\n                    A21 = fp2.x, A22 = fp2.y;\\n                    A31 = fp3.x, A32 = fp3.y;\\n\\n                    B11 = tp0.x, B12 = tp0.y;\\n                    B21 = tp2.x, B22 = tp2.y;\\n                    B31 = tp3.x, B32 = tp3.y;\\n\\n                    detA = jsfeat.matmath.determinant_3x3(A11, A12, A13, A21, A22, A23, A31, A32, A33);\\n                    detB = jsfeat.matmath.determinant_3x3(B11, B12, B13, B21, B22, B23, B31, B32, B33);\\n\\n                    if (detA * detB < 0) negative++;\\n\\n                    // set4\\n                    A11 = fp0.x, A12 = fp0.y;\\n                    A21 = fp1.x, A22 = fp1.y;\\n                    A31 = fp3.x, A32 = fp3.y;\\n\\n                    B11 = tp0.x, B12 = tp0.y;\\n                    B21 = tp1.x, B22 = tp1.y;\\n                    B31 = tp3.x, B32 = tp3.y;\\n\\n                    detA = jsfeat.matmath.determinant_3x3(A11, A12, A13, A21, A22, A23, A31, A32, A33);\\n                    detB = jsfeat.matmath.determinant_3x3(B11, B12, B13, B21, B22, B23, B31, B32, B33);\\n\\n                    if (detA * detB < 0) negative++;\\n\\n                    if (negative != 0 && negative != 4) {\\n                        return false;\\n                    }\\n                }\\n                return true; // all good\\n            };\\n\\n            return homography2d;\\n        }();\\n\\n        return {\\n\\n            affine2d: affine2d,\\n            homography2d: homography2d\\n\\n        };\\n    }();\\n\\n    var ransac_params_t = function () {\\n        function ransac_params_t(size, thresh, eps, prob) {\\n            if (typeof size === \\\"undefined\\\") {\\n                size = 0;\\n            }\\n            if (typeof thresh === \\\"undefined\\\") {\\n                thresh = 0.5;\\n            }\\n            if (typeof eps === \\\"undefined\\\") {\\n                eps = 0.5;\\n            }\\n            if (typeof prob === \\\"undefined\\\") {\\n                prob = 0.99;\\n            }\\n\\n            this.size = size;\\n            this.thresh = thresh;\\n            this.eps = eps;\\n            this.prob = prob;\\n        };\\n        ransac_params_t.prototype.update_iters = function (_eps, max_iters) {\\n            var num = Math.log(1 - this.prob);\\n            var denom = Math.log(1 - Math.pow(1 - _eps, this.size));\\n            return (denom >= 0 || -num >= max_iters * -denom ? max_iters : Math.round(num / denom)) | 0;\\n        };\\n        return ransac_params_t;\\n    }();\\n\\n    var motion_estimator = function () {\\n\\n        var get_subset = function get_subset(kernel, from, to, need_cnt, max_cnt, from_sub, to_sub) {\\n            var max_try = 1000;\\n            var indices = [];\\n            var i = 0,\\n                j = 0,\\n                ssiter = 0,\\n                idx_i = 0,\\n                ok = false;\\n            for (; ssiter < max_try; ++ssiter) {\\n                i = 0;\\n                for (; i < need_cnt && ssiter < max_try;) {\\n                    ok = false;\\n                    idx_i = 0;\\n                    while (!ok) {\\n                        ok = true;\\n                        idx_i = indices[i] = Math.floor(Math.random() * max_cnt) | 0;\\n                        for (j = 0; j < i; ++j) {\\n                            if (idx_i == indices[j]) {\\n                                ok = false;break;\\n                            }\\n                        }\\n                    }\\n                    from_sub[i] = from[idx_i];\\n                    to_sub[i] = to[idx_i];\\n                    if (!kernel.check_subset(from_sub, to_sub, i + 1)) {\\n                        ssiter++;\\n                        continue;\\n                    }\\n                    ++i;\\n                }\\n                break;\\n            }\\n\\n            return i == need_cnt && ssiter < max_try;\\n        };\\n\\n        var find_inliers = function find_inliers(kernel, model, from, to, count, thresh, err, mask) {\\n            var numinliers = 0,\\n                i = 0,\\n                f = 0;\\n            var t = thresh * thresh;\\n\\n            kernel.error(from, to, model, err, count);\\n\\n            for (; i < count; ++i) {\\n                f = err[i] <= t;\\n                mask[i] = f;\\n                numinliers += f;\\n            }\\n            return numinliers;\\n        };\\n\\n        return {\\n\\n            ransac: function ransac(params, kernel, from, to, count, model, mask, max_iters) {\\n                if (typeof max_iters === \\\"undefined\\\") {\\n                    max_iters = 1000;\\n                }\\n\\n                if (count < params.size) return false;\\n\\n                var model_points = params.size;\\n                var niters = max_iters,\\n                    iter = 0;\\n                var result = false;\\n\\n                var subset0 = [];\\n                var subset1 = [];\\n                var found = false;\\n\\n                var mc = model.cols,\\n                    mr = model.rows;\\n                var dt = model.type | jsfeat.C1_t;\\n\\n                var m_buff = jsfeat.cache.get_buffer(mc * mr << 3);\\n                var ms_buff = jsfeat.cache.get_buffer(count);\\n                var err_buff = jsfeat.cache.get_buffer(count << 2);\\n                var M = new jsfeat.matrix_t(mc, mr, dt, m_buff.data);\\n                var curr_mask = new jsfeat.matrix_t(count, 1, jsfeat.U8C1_t, ms_buff.data);\\n\\n                var inliers_max = -1,\\n                    numinliers = 0;\\n                var nmodels = 0;\\n\\n                var err = err_buff.f32;\\n\\n                // special case\\n                if (count == model_points) {\\n                    if (kernel.run(from, to, M, count) <= 0) {\\n                        jsfeat.cache.put_buffer(m_buff);\\n                        jsfeat.cache.put_buffer(ms_buff);\\n                        jsfeat.cache.put_buffer(err_buff);\\n                        return false;\\n                    }\\n\\n                    M.copy_to(model);\\n                    if (mask) {\\n                        while (--count >= 0) {\\n                            mask.data[count] = 1;\\n                        }\\n                    }\\n                    jsfeat.cache.put_buffer(m_buff);\\n                    jsfeat.cache.put_buffer(ms_buff);\\n                    jsfeat.cache.put_buffer(err_buff);\\n                    return true;\\n                }\\n\\n                for (; iter < niters; ++iter) {\\n                    // generate subset\\n                    found = get_subset(kernel, from, to, model_points, count, subset0, subset1);\\n                    if (!found) {\\n                        if (iter == 0) {\\n                            jsfeat.cache.put_buffer(m_buff);\\n                            jsfeat.cache.put_buffer(ms_buff);\\n                            jsfeat.cache.put_buffer(err_buff);\\n                            return false;\\n                        }\\n                        break;\\n                    }\\n\\n                    nmodels = kernel.run(subset0, subset1, M, model_points);\\n                    if (nmodels <= 0) continue;\\n\\n                    // TODO handle multimodel output\\n\\n                    numinliers = find_inliers(kernel, M, from, to, count, params.thresh, err, curr_mask.data);\\n\\n                    if (numinliers > Math.max(inliers_max, model_points - 1)) {\\n                        M.copy_to(model);\\n                        inliers_max = numinliers;\\n                        if (mask) curr_mask.copy_to(mask);\\n                        niters = params.update_iters((count - numinliers) / count, niters);\\n                        result = true;\\n                    }\\n                }\\n\\n                jsfeat.cache.put_buffer(m_buff);\\n                jsfeat.cache.put_buffer(ms_buff);\\n                jsfeat.cache.put_buffer(err_buff);\\n\\n                return result;\\n            },\\n\\n            lmeds: function lmeds(params, kernel, from, to, count, model, mask, max_iters) {\\n                if (typeof max_iters === \\\"undefined\\\") {\\n                    max_iters = 1000;\\n                }\\n\\n                if (count < params.size) return false;\\n\\n                var model_points = params.size;\\n                var niters = max_iters,\\n                    iter = 0;\\n                var result = false;\\n\\n                var subset0 = [];\\n                var subset1 = [];\\n                var found = false;\\n\\n                var mc = model.cols,\\n                    mr = model.rows;\\n                var dt = model.type | jsfeat.C1_t;\\n\\n                var m_buff = jsfeat.cache.get_buffer(mc * mr << 3);\\n                var ms_buff = jsfeat.cache.get_buffer(count);\\n                var err_buff = jsfeat.cache.get_buffer(count << 2);\\n                var M = new jsfeat.matrix_t(mc, mr, dt, m_buff.data);\\n                var curr_mask = new jsfeat.matrix_t(count, 1, jsfeat.U8_t | jsfeat.C1_t, ms_buff.data);\\n\\n                var numinliers = 0;\\n                var nmodels = 0;\\n\\n                var err = err_buff.f32;\\n                var min_median = 1000000000.0,\\n                    sigma = 0.0,\\n                    median = 0.0;\\n\\n                params.eps = 0.45;\\n                niters = params.update_iters(params.eps, niters);\\n\\n                // special case\\n                if (count == model_points) {\\n                    if (kernel.run(from, to, M, count) <= 0) {\\n                        jsfeat.cache.put_buffer(m_buff);\\n                        jsfeat.cache.put_buffer(ms_buff);\\n                        jsfeat.cache.put_buffer(err_buff);\\n                        return false;\\n                    }\\n\\n                    M.copy_to(model);\\n                    if (mask) {\\n                        while (--count >= 0) {\\n                            mask.data[count] = 1;\\n                        }\\n                    }\\n                    jsfeat.cache.put_buffer(m_buff);\\n                    jsfeat.cache.put_buffer(ms_buff);\\n                    jsfeat.cache.put_buffer(err_buff);\\n                    return true;\\n                }\\n\\n                for (; iter < niters; ++iter) {\\n                    // generate subset\\n                    found = get_subset(kernel, from, to, model_points, count, subset0, subset1);\\n                    if (!found) {\\n                        if (iter == 0) {\\n                            jsfeat.cache.put_buffer(m_buff);\\n                            jsfeat.cache.put_buffer(ms_buff);\\n                            jsfeat.cache.put_buffer(err_buff);\\n                            return false;\\n                        }\\n                        break;\\n                    }\\n\\n                    nmodels = kernel.run(subset0, subset1, M, model_points);\\n                    if (nmodels <= 0) continue;\\n\\n                    // TODO handle multimodel output\\n\\n                    kernel.error(from, to, M, err, count);\\n                    median = jsfeat.math.median(err, 0, count - 1);\\n\\n                    if (median < min_median) {\\n                        min_median = median;\\n                        M.copy_to(model);\\n                        result = true;\\n                    }\\n                }\\n\\n                if (result) {\\n                    sigma = 2.5 * 1.4826 * (1 + 5.0 / (count - model_points)) * Math.sqrt(min_median);\\n                    sigma = Math.max(sigma, 0.001);\\n\\n                    numinliers = find_inliers(kernel, model, from, to, count, sigma, err, curr_mask.data);\\n                    if (mask) curr_mask.copy_to(mask);\\n\\n                    result = numinliers >= model_points;\\n                }\\n\\n                jsfeat.cache.put_buffer(m_buff);\\n                jsfeat.cache.put_buffer(ms_buff);\\n                jsfeat.cache.put_buffer(err_buff);\\n\\n                return result;\\n            }\\n\\n        };\\n    }();\\n\\n    global.ransac_params_t = ransac_params_t;\\n    global.motion_model = motion_model;\\n    global.motion_estimator = motion_estimator;\\n})(jsfeat);\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n */\\n\\n(function (global) {\\n    \\\"use strict\\\";\\n    //\\n\\n    var imgproc = function () {\\n\\n        var _resample_u8 = function _resample_u8(src, dst, nw, nh) {\\n            var xofs_count = 0;\\n            var ch = src.channel,\\n                w = src.cols,\\n                h = src.rows;\\n            var src_d = src.data,\\n                dst_d = dst.data;\\n            var scale_x = w / nw,\\n                scale_y = h / nh;\\n            var inv_scale_256 = scale_x * scale_y * 0x10000 | 0;\\n            var dx = 0,\\n                dy = 0,\\n                sx = 0,\\n                sy = 0,\\n                sx1 = 0,\\n                sx2 = 0,\\n                i = 0,\\n                k = 0,\\n                fsx1 = 0.0,\\n                fsx2 = 0.0;\\n            var a = 0,\\n                b = 0,\\n                dxn = 0,\\n                alpha = 0,\\n                beta = 0,\\n                beta1 = 0;\\n\\n            var buf_node = jsfeat.cache.get_buffer(nw * ch << 2);\\n            var sum_node = jsfeat.cache.get_buffer(nw * ch << 2);\\n            var xofs_node = jsfeat.cache.get_buffer(w * 2 * 3 << 2);\\n\\n            var buf = buf_node.i32;\\n            var sum = sum_node.i32;\\n            var xofs = xofs_node.i32;\\n\\n            for (; dx < nw; dx++) {\\n                fsx1 = dx * scale_x, fsx2 = fsx1 + scale_x;\\n                sx1 = fsx1 + 1.0 - 1e-6 | 0, sx2 = fsx2 | 0;\\n                sx1 = Math.min(sx1, w - 1);\\n                sx2 = Math.min(sx2, w - 1);\\n\\n                if (sx1 > fsx1) {\\n                    xofs[k++] = dx * ch | 0;\\n                    xofs[k++] = (sx1 - 1) * ch | 0;\\n                    xofs[k++] = (sx1 - fsx1) * 0x100 | 0;\\n                    xofs_count++;\\n                }\\n                for (sx = sx1; sx < sx2; sx++) {\\n                    xofs_count++;\\n                    xofs[k++] = dx * ch | 0;\\n                    xofs[k++] = sx * ch | 0;\\n                    xofs[k++] = 256;\\n                }\\n                if (fsx2 - sx2 > 1e-3) {\\n                    xofs_count++;\\n                    xofs[k++] = dx * ch | 0;\\n                    xofs[k++] = sx2 * ch | 0;\\n                    xofs[k++] = (fsx2 - sx2) * 256 | 0;\\n                }\\n            }\\n\\n            for (dx = 0; dx < nw * ch; dx++) {\\n                buf[dx] = sum[dx] = 0;\\n            }\\n            dy = 0;\\n            for (sy = 0; sy < h; sy++) {\\n                a = w * sy;\\n                for (k = 0; k < xofs_count; k++) {\\n                    dxn = xofs[k * 3];\\n                    sx1 = xofs[k * 3 + 1];\\n                    alpha = xofs[k * 3 + 2];\\n                    for (i = 0; i < ch; i++) {\\n                        buf[dxn + i] += src_d[a + sx1 + i] * alpha;\\n                    }\\n                }\\n                if ((dy + 1) * scale_y <= sy + 1 || sy == h - 1) {\\n                    beta = Math.max(sy + 1 - (dy + 1) * scale_y, 0.0) * 256 | 0;\\n                    beta1 = 256 - beta;\\n                    b = nw * dy;\\n                    if (beta <= 0) {\\n                        for (dx = 0; dx < nw * ch; dx++) {\\n                            dst_d[b + dx] = Math.min(Math.max((sum[dx] + buf[dx] * 256) / inv_scale_256, 0), 255);\\n                            sum[dx] = buf[dx] = 0;\\n                        }\\n                    } else {\\n                        for (dx = 0; dx < nw * ch; dx++) {\\n                            dst_d[b + dx] = Math.min(Math.max((sum[dx] + buf[dx] * beta1) / inv_scale_256, 0), 255);\\n                            sum[dx] = buf[dx] * beta;\\n                            buf[dx] = 0;\\n                        }\\n                    }\\n                    dy++;\\n                } else {\\n                    for (dx = 0; dx < nw * ch; dx++) {\\n                        sum[dx] += buf[dx] * 256;\\n                        buf[dx] = 0;\\n                    }\\n                }\\n            }\\n\\n            jsfeat.cache.put_buffer(sum_node);\\n            jsfeat.cache.put_buffer(buf_node);\\n            jsfeat.cache.put_buffer(xofs_node);\\n        };\\n\\n        var _resample = function _resample(src, dst, nw, nh) {\\n            var xofs_count = 0;\\n            var ch = src.channel,\\n                w = src.cols,\\n                h = src.rows;\\n            var src_d = src.data,\\n                dst_d = dst.data;\\n            var scale_x = w / nw,\\n                scale_y = h / nh;\\n            var scale = 1.0 / (scale_x * scale_y);\\n            var dx = 0,\\n                dy = 0,\\n                sx = 0,\\n                sy = 0,\\n                sx1 = 0,\\n                sx2 = 0,\\n                i = 0,\\n                k = 0,\\n                fsx1 = 0.0,\\n                fsx2 = 0.0;\\n            var a = 0,\\n                b = 0,\\n                dxn = 0,\\n                alpha = 0.0,\\n                beta = 0.0,\\n                beta1 = 0.0;\\n\\n            var buf_node = jsfeat.cache.get_buffer(nw * ch << 2);\\n            var sum_node = jsfeat.cache.get_buffer(nw * ch << 2);\\n            var xofs_node = jsfeat.cache.get_buffer(w * 2 * 3 << 2);\\n\\n            var buf = buf_node.f32;\\n            var sum = sum_node.f32;\\n            var xofs = xofs_node.f32;\\n\\n            for (; dx < nw; dx++) {\\n                fsx1 = dx * scale_x, fsx2 = fsx1 + scale_x;\\n                sx1 = fsx1 + 1.0 - 1e-6 | 0, sx2 = fsx2 | 0;\\n                sx1 = Math.min(sx1, w - 1);\\n                sx2 = Math.min(sx2, w - 1);\\n\\n                if (sx1 > fsx1) {\\n                    xofs_count++;\\n                    xofs[k++] = (sx1 - 1) * ch | 0;\\n                    xofs[k++] = dx * ch | 0;\\n                    xofs[k++] = (sx1 - fsx1) * scale;\\n                }\\n                for (sx = sx1; sx < sx2; sx++) {\\n                    xofs_count++;\\n                    xofs[k++] = sx * ch | 0;\\n                    xofs[k++] = dx * ch | 0;\\n                    xofs[k++] = scale;\\n                }\\n                if (fsx2 - sx2 > 1e-3) {\\n                    xofs_count++;\\n                    xofs[k++] = sx2 * ch | 0;\\n                    xofs[k++] = dx * ch | 0;\\n                    xofs[k++] = (fsx2 - sx2) * scale;\\n                }\\n            }\\n\\n            for (dx = 0; dx < nw * ch; dx++) {\\n                buf[dx] = sum[dx] = 0;\\n            }\\n            dy = 0;\\n            for (sy = 0; sy < h; sy++) {\\n                a = w * sy;\\n                for (k = 0; k < xofs_count; k++) {\\n                    sx1 = xofs[k * 3] | 0;\\n                    dxn = xofs[k * 3 + 1] | 0;\\n                    alpha = xofs[k * 3 + 2];\\n                    for (i = 0; i < ch; i++) {\\n                        buf[dxn + i] += src_d[a + sx1 + i] * alpha;\\n                    }\\n                }\\n                if ((dy + 1) * scale_y <= sy + 1 || sy == h - 1) {\\n                    beta = Math.max(sy + 1 - (dy + 1) * scale_y, 0.0);\\n                    beta1 = 1.0 - beta;\\n                    b = nw * dy;\\n                    if (Math.abs(beta) < 1e-3) {\\n                        for (dx = 0; dx < nw * ch; dx++) {\\n                            dst_d[b + dx] = sum[dx] + buf[dx];\\n                            sum[dx] = buf[dx] = 0;\\n                        }\\n                    } else {\\n                        for (dx = 0; dx < nw * ch; dx++) {\\n                            dst_d[b + dx] = sum[dx] + buf[dx] * beta1;\\n                            sum[dx] = buf[dx] * beta;\\n                            buf[dx] = 0;\\n                        }\\n                    }\\n                    dy++;\\n                } else {\\n                    for (dx = 0; dx < nw * ch; dx++) {\\n                        sum[dx] += buf[dx];\\n                        buf[dx] = 0;\\n                    }\\n                }\\n            }\\n            jsfeat.cache.put_buffer(sum_node);\\n            jsfeat.cache.put_buffer(buf_node);\\n            jsfeat.cache.put_buffer(xofs_node);\\n        };\\n\\n        var _convol_u8 = function _convol_u8(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel) {\\n            var i = 0,\\n                j = 0,\\n                k = 0,\\n                sp = 0,\\n                dp = 0,\\n                sum = 0,\\n                sum1 = 0,\\n                sum2 = 0,\\n                sum3 = 0,\\n                f0 = filter[0],\\n                fk = 0;\\n            var w2 = w << 1,\\n                w3 = w * 3,\\n                w4 = w << 2;\\n            // hor pass\\n            for (; i < h; ++i) {\\n                sum = src_d[sp];\\n                for (j = 0; j < half_kernel; ++j) {\\n                    buf[j] = sum;\\n                }\\n                for (j = 0; j <= w - 2; j += 2) {\\n                    buf[j + half_kernel] = src_d[sp + j];\\n                    buf[j + half_kernel + 1] = src_d[sp + j + 1];\\n                }\\n                for (; j < w; ++j) {\\n                    buf[j + half_kernel] = src_d[sp + j];\\n                }\\n                sum = src_d[sp + w - 1];\\n                for (j = w; j < half_kernel + w; ++j) {\\n                    buf[j + half_kernel] = sum;\\n                }\\n                for (j = 0; j <= w - 4; j += 4) {\\n                    sum = buf[j] * f0, sum1 = buf[j + 1] * f0, sum2 = buf[j + 2] * f0, sum3 = buf[j + 3] * f0;\\n                    for (k = 1; k < kernel_size; ++k) {\\n                        fk = filter[k];\\n                        sum += buf[k + j] * fk;\\n                        sum1 += buf[k + j + 1] * fk;\\n                        sum2 += buf[k + j + 2] * fk;\\n                        sum3 += buf[k + j + 3] * fk;\\n                    }\\n                    dst_d[dp + j] = Math.min(sum >> 8, 255);\\n                    dst_d[dp + j + 1] = Math.min(sum1 >> 8, 255);\\n                    dst_d[dp + j + 2] = Math.min(sum2 >> 8, 255);\\n                    dst_d[dp + j + 3] = Math.min(sum3 >> 8, 255);\\n                }\\n                for (; j < w; ++j) {\\n                    sum = buf[j] * f0;\\n                    for (k = 1; k < kernel_size; ++k) {\\n                        sum += buf[k + j] * filter[k];\\n                    }\\n                    dst_d[dp + j] = Math.min(sum >> 8, 255);\\n                }\\n                sp += w;\\n                dp += w;\\n            }\\n\\n            // vert pass\\n            for (i = 0; i < w; ++i) {\\n                sum = dst_d[i];\\n                for (j = 0; j < half_kernel; ++j) {\\n                    buf[j] = sum;\\n                }\\n                k = i;\\n                for (j = 0; j <= h - 2; j += 2, k += w2) {\\n                    buf[j + half_kernel] = dst_d[k];\\n                    buf[j + half_kernel + 1] = dst_d[k + w];\\n                }\\n                for (; j < h; ++j, k += w) {\\n                    buf[j + half_kernel] = dst_d[k];\\n                }\\n                sum = dst_d[(h - 1) * w + i];\\n                for (j = h; j < half_kernel + h; ++j) {\\n                    buf[j + half_kernel] = sum;\\n                }\\n                dp = i;\\n                for (j = 0; j <= h - 4; j += 4, dp += w4) {\\n                    sum = buf[j] * f0, sum1 = buf[j + 1] * f0, sum2 = buf[j + 2] * f0, sum3 = buf[j + 3] * f0;\\n                    for (k = 1; k < kernel_size; ++k) {\\n                        fk = filter[k];\\n                        sum += buf[k + j] * fk;\\n                        sum1 += buf[k + j + 1] * fk;\\n                        sum2 += buf[k + j + 2] * fk;\\n                        sum3 += buf[k + j + 3] * fk;\\n                    }\\n                    dst_d[dp] = Math.min(sum >> 8, 255);\\n                    dst_d[dp + w] = Math.min(sum1 >> 8, 255);\\n                    dst_d[dp + w2] = Math.min(sum2 >> 8, 255);\\n                    dst_d[dp + w3] = Math.min(sum3 >> 8, 255);\\n                }\\n                for (; j < h; ++j, dp += w) {\\n                    sum = buf[j] * f0;\\n                    for (k = 1; k < kernel_size; ++k) {\\n                        sum += buf[k + j] * filter[k];\\n                    }\\n                    dst_d[dp] = Math.min(sum >> 8, 255);\\n                }\\n            }\\n        };\\n\\n        var _convol = function _convol(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel) {\\n            var i = 0,\\n                j = 0,\\n                k = 0,\\n                sp = 0,\\n                dp = 0,\\n                sum = 0.0,\\n                sum1 = 0.0,\\n                sum2 = 0.0,\\n                sum3 = 0.0,\\n                f0 = filter[0],\\n                fk = 0.0;\\n            var w2 = w << 1,\\n                w3 = w * 3,\\n                w4 = w << 2;\\n            // hor pass\\n            for (; i < h; ++i) {\\n                sum = src_d[sp];\\n                for (j = 0; j < half_kernel; ++j) {\\n                    buf[j] = sum;\\n                }\\n                for (j = 0; j <= w - 2; j += 2) {\\n                    buf[j + half_kernel] = src_d[sp + j];\\n                    buf[j + half_kernel + 1] = src_d[sp + j + 1];\\n                }\\n                for (; j < w; ++j) {\\n                    buf[j + half_kernel] = src_d[sp + j];\\n                }\\n                sum = src_d[sp + w - 1];\\n                for (j = w; j < half_kernel + w; ++j) {\\n                    buf[j + half_kernel] = sum;\\n                }\\n                for (j = 0; j <= w - 4; j += 4) {\\n                    sum = buf[j] * f0, sum1 = buf[j + 1] * f0, sum2 = buf[j + 2] * f0, sum3 = buf[j + 3] * f0;\\n                    for (k = 1; k < kernel_size; ++k) {\\n                        fk = filter[k];\\n                        sum += buf[k + j] * fk;\\n                        sum1 += buf[k + j + 1] * fk;\\n                        sum2 += buf[k + j + 2] * fk;\\n                        sum3 += buf[k + j + 3] * fk;\\n                    }\\n                    dst_d[dp + j] = sum;\\n                    dst_d[dp + j + 1] = sum1;\\n                    dst_d[dp + j + 2] = sum2;\\n                    dst_d[dp + j + 3] = sum3;\\n                }\\n                for (; j < w; ++j) {\\n                    sum = buf[j] * f0;\\n                    for (k = 1; k < kernel_size; ++k) {\\n                        sum += buf[k + j] * filter[k];\\n                    }\\n                    dst_d[dp + j] = sum;\\n                }\\n                sp += w;\\n                dp += w;\\n            }\\n\\n            // vert pass\\n            for (i = 0; i < w; ++i) {\\n                sum = dst_d[i];\\n                for (j = 0; j < half_kernel; ++j) {\\n                    buf[j] = sum;\\n                }\\n                k = i;\\n                for (j = 0; j <= h - 2; j += 2, k += w2) {\\n                    buf[j + half_kernel] = dst_d[k];\\n                    buf[j + half_kernel + 1] = dst_d[k + w];\\n                }\\n                for (; j < h; ++j, k += w) {\\n                    buf[j + half_kernel] = dst_d[k];\\n                }\\n                sum = dst_d[(h - 1) * w + i];\\n                for (j = h; j < half_kernel + h; ++j) {\\n                    buf[j + half_kernel] = sum;\\n                }\\n                dp = i;\\n                for (j = 0; j <= h - 4; j += 4, dp += w4) {\\n                    sum = buf[j] * f0, sum1 = buf[j + 1] * f0, sum2 = buf[j + 2] * f0, sum3 = buf[j + 3] * f0;\\n                    for (k = 1; k < kernel_size; ++k) {\\n                        fk = filter[k];\\n                        sum += buf[k + j] * fk;\\n                        sum1 += buf[k + j + 1] * fk;\\n                        sum2 += buf[k + j + 2] * fk;\\n                        sum3 += buf[k + j + 3] * fk;\\n                    }\\n                    dst_d[dp] = sum;\\n                    dst_d[dp + w] = sum1;\\n                    dst_d[dp + w2] = sum2;\\n                    dst_d[dp + w3] = sum3;\\n                }\\n                for (; j < h; ++j, dp += w) {\\n                    sum = buf[j] * f0;\\n                    for (k = 1; k < kernel_size; ++k) {\\n                        sum += buf[k + j] * filter[k];\\n                    }\\n                    dst_d[dp] = sum;\\n                }\\n            }\\n        };\\n\\n        return {\\n            // TODO: add support for RGB/BGR order\\n            // for raw arrays\\n            grayscale: function grayscale(src, w, h, dst, code) {\\n                // this is default image data representation in browser\\n                if (typeof code === \\\"undefined\\\") {\\n                    code = jsfeat.COLOR_RGBA2GRAY;\\n                }\\n                var x = 0,\\n                    y = 0,\\n                    i = 0,\\n                    j = 0,\\n                    ir = 0,\\n                    jr = 0;\\n                var coeff_r = 4899,\\n                    coeff_g = 9617,\\n                    coeff_b = 1868,\\n                    cn = 4;\\n\\n                if (code == jsfeat.COLOR_BGRA2GRAY || code == jsfeat.COLOR_BGR2GRAY) {\\n                    coeff_r = 1868;\\n                    coeff_b = 4899;\\n                }\\n                if (code == jsfeat.COLOR_RGB2GRAY || code == jsfeat.COLOR_BGR2GRAY) {\\n                    cn = 3;\\n                }\\n                var cn2 = cn << 1,\\n                    cn3 = cn * 3 | 0;\\n\\n                dst.resize(w, h, 1);\\n                var dst_u8 = dst.data;\\n\\n                for (y = 0; y < h; ++y, j += w, i += w * cn) {\\n                    for (x = 0, ir = i, jr = j; x <= w - 4; x += 4, ir += cn << 2, jr += 4) {\\n                        dst_u8[jr] = src[ir] * coeff_r + src[ir + 1] * coeff_g + src[ir + 2] * coeff_b + 8192 >> 14;\\n                        dst_u8[jr + 1] = src[ir + cn] * coeff_r + src[ir + cn + 1] * coeff_g + src[ir + cn + 2] * coeff_b + 8192 >> 14;\\n                        dst_u8[jr + 2] = src[ir + cn2] * coeff_r + src[ir + cn2 + 1] * coeff_g + src[ir + cn2 + 2] * coeff_b + 8192 >> 14;\\n                        dst_u8[jr + 3] = src[ir + cn3] * coeff_r + src[ir + cn3 + 1] * coeff_g + src[ir + cn3 + 2] * coeff_b + 8192 >> 14;\\n                    }\\n                    for (; x < w; ++x, ++jr, ir += cn) {\\n                        dst_u8[jr] = src[ir] * coeff_r + src[ir + 1] * coeff_g + src[ir + 2] * coeff_b + 8192 >> 14;\\n                    }\\n                }\\n            },\\n            // derived from CCV library\\n            resample: function resample(src, dst, nw, nh) {\\n                var h = src.rows,\\n                    w = src.cols;\\n                if (h > nh && w > nw) {\\n                    dst.resize(nw, nh, src.channel);\\n                    // using the fast alternative (fix point scale, 0x100 to avoid overflow)\\n                    if (src.type & jsfeat.U8_t && dst.type & jsfeat.U8_t && h * w / (nh * nw) < 0x100) {\\n                        _resample_u8(src, dst, nw, nh);\\n                    } else {\\n                        _resample(src, dst, nw, nh);\\n                    }\\n                }\\n            },\\n\\n            box_blur_gray: function box_blur_gray(src, dst, radius, options) {\\n                if (typeof options === \\\"undefined\\\") {\\n                    options = 0;\\n                }\\n                var w = src.cols,\\n                    h = src.rows,\\n                    h2 = h << 1,\\n                    w2 = w << 1;\\n                var i = 0,\\n                    x = 0,\\n                    y = 0,\\n                    end = 0;\\n                var windowSize = (radius << 1) + 1 | 0;\\n                var radiusPlusOne = radius + 1 | 0,\\n                    radiusPlus2 = radiusPlusOne + 1 | 0;\\n                var scale = options & jsfeat.BOX_BLUR_NOSCALE ? 1 : 1.0 / (windowSize * windowSize);\\n\\n                var tmp_buff = jsfeat.cache.get_buffer(w * h << 2);\\n\\n                var sum = 0,\\n                    dstIndex = 0,\\n                    srcIndex = 0,\\n                    nextPixelIndex = 0,\\n                    previousPixelIndex = 0;\\n                var data_i32 = tmp_buff.i32; // to prevent overflow\\n                var data_u8 = src.data;\\n                var hold = 0;\\n\\n                dst.resize(w, h, src.channel);\\n\\n                // first pass\\n                // no need to scale \\n                //data_u8 = src.data;\\n                //data_i32 = tmp;\\n                for (y = 0; y < h; ++y) {\\n                    dstIndex = y;\\n                    sum = radiusPlusOne * data_u8[srcIndex];\\n\\n                    for (i = srcIndex + 1 | 0, end = srcIndex + radius | 0; i <= end; ++i) {\\n                        sum += data_u8[i];\\n                    }\\n\\n                    nextPixelIndex = srcIndex + radiusPlusOne | 0;\\n                    previousPixelIndex = srcIndex;\\n                    hold = data_u8[previousPixelIndex];\\n                    for (x = 0; x < radius; ++x, dstIndex += h) {\\n                        data_i32[dstIndex] = sum;\\n                        sum += data_u8[nextPixelIndex] - hold;\\n                        nextPixelIndex++;\\n                    }\\n                    for (; x < w - radiusPlus2; x += 2, dstIndex += h2) {\\n                        data_i32[dstIndex] = sum;\\n                        sum += data_u8[nextPixelIndex] - data_u8[previousPixelIndex];\\n\\n                        data_i32[dstIndex + h] = sum;\\n                        sum += data_u8[nextPixelIndex + 1] - data_u8[previousPixelIndex + 1];\\n\\n                        nextPixelIndex += 2;\\n                        previousPixelIndex += 2;\\n                    }\\n                    for (; x < w - radiusPlusOne; ++x, dstIndex += h) {\\n                        data_i32[dstIndex] = sum;\\n                        sum += data_u8[nextPixelIndex] - data_u8[previousPixelIndex];\\n\\n                        nextPixelIndex++;\\n                        previousPixelIndex++;\\n                    }\\n\\n                    hold = data_u8[nextPixelIndex - 1];\\n                    for (; x < w; ++x, dstIndex += h) {\\n                        data_i32[dstIndex] = sum;\\n\\n                        sum += hold - data_u8[previousPixelIndex];\\n                        previousPixelIndex++;\\n                    }\\n\\n                    srcIndex += w;\\n                }\\n                //\\n                // second pass\\n                srcIndex = 0;\\n                //data_i32 = tmp; // this is a transpose\\n                data_u8 = dst.data;\\n\\n                // dont scale result\\n                if (scale == 1) {\\n                    for (y = 0; y < w; ++y) {\\n                        dstIndex = y;\\n                        sum = radiusPlusOne * data_i32[srcIndex];\\n\\n                        for (i = srcIndex + 1 | 0, end = srcIndex + radius | 0; i <= end; ++i) {\\n                            sum += data_i32[i];\\n                        }\\n\\n                        nextPixelIndex = srcIndex + radiusPlusOne;\\n                        previousPixelIndex = srcIndex;\\n                        hold = data_i32[previousPixelIndex];\\n\\n                        for (x = 0; x < radius; ++x, dstIndex += w) {\\n                            data_u8[dstIndex] = sum;\\n                            sum += data_i32[nextPixelIndex] - hold;\\n                            nextPixelIndex++;\\n                        }\\n                        for (; x < h - radiusPlus2; x += 2, dstIndex += w2) {\\n                            data_u8[dstIndex] = sum;\\n                            sum += data_i32[nextPixelIndex] - data_i32[previousPixelIndex];\\n\\n                            data_u8[dstIndex + w] = sum;\\n                            sum += data_i32[nextPixelIndex + 1] - data_i32[previousPixelIndex + 1];\\n\\n                            nextPixelIndex += 2;\\n                            previousPixelIndex += 2;\\n                        }\\n                        for (; x < h - radiusPlusOne; ++x, dstIndex += w) {\\n                            data_u8[dstIndex] = sum;\\n\\n                            sum += data_i32[nextPixelIndex] - data_i32[previousPixelIndex];\\n                            nextPixelIndex++;\\n                            previousPixelIndex++;\\n                        }\\n                        hold = data_i32[nextPixelIndex - 1];\\n                        for (; x < h; ++x, dstIndex += w) {\\n                            data_u8[dstIndex] = sum;\\n\\n                            sum += hold - data_i32[previousPixelIndex];\\n                            previousPixelIndex++;\\n                        }\\n\\n                        srcIndex += h;\\n                    }\\n                } else {\\n                    for (y = 0; y < w; ++y) {\\n                        dstIndex = y;\\n                        sum = radiusPlusOne * data_i32[srcIndex];\\n\\n                        for (i = srcIndex + 1 | 0, end = srcIndex + radius | 0; i <= end; ++i) {\\n                            sum += data_i32[i];\\n                        }\\n\\n                        nextPixelIndex = srcIndex + radiusPlusOne;\\n                        previousPixelIndex = srcIndex;\\n                        hold = data_i32[previousPixelIndex];\\n\\n                        for (x = 0; x < radius; ++x, dstIndex += w) {\\n                            data_u8[dstIndex] = sum * scale;\\n                            sum += data_i32[nextPixelIndex] - hold;\\n                            nextPixelIndex++;\\n                        }\\n                        for (; x < h - radiusPlus2; x += 2, dstIndex += w2) {\\n                            data_u8[dstIndex] = sum * scale;\\n                            sum += data_i32[nextPixelIndex] - data_i32[previousPixelIndex];\\n\\n                            data_u8[dstIndex + w] = sum * scale;\\n                            sum += data_i32[nextPixelIndex + 1] - data_i32[previousPixelIndex + 1];\\n\\n                            nextPixelIndex += 2;\\n                            previousPixelIndex += 2;\\n                        }\\n                        for (; x < h - radiusPlusOne; ++x, dstIndex += w) {\\n                            data_u8[dstIndex] = sum * scale;\\n\\n                            sum += data_i32[nextPixelIndex] - data_i32[previousPixelIndex];\\n                            nextPixelIndex++;\\n                            previousPixelIndex++;\\n                        }\\n                        hold = data_i32[nextPixelIndex - 1];\\n                        for (; x < h; ++x, dstIndex += w) {\\n                            data_u8[dstIndex] = sum * scale;\\n\\n                            sum += hold - data_i32[previousPixelIndex];\\n                            previousPixelIndex++;\\n                        }\\n\\n                        srcIndex += h;\\n                    }\\n                }\\n\\n                jsfeat.cache.put_buffer(tmp_buff);\\n            },\\n\\n            gaussian_blur: function gaussian_blur(src, dst, kernel_size, sigma) {\\n                if (typeof sigma === \\\"undefined\\\") {\\n                    sigma = 0.0;\\n                }\\n                if (typeof kernel_size === \\\"undefined\\\") {\\n                    kernel_size = 0;\\n                }\\n                kernel_size = kernel_size == 0 ? Math.max(1, 4.0 * sigma + 1.0 - 1e-8) * 2 + 1 | 0 : kernel_size;\\n                var half_kernel = kernel_size >> 1;\\n                var w = src.cols,\\n                    h = src.rows;\\n                var data_type = src.type,\\n                    is_u8 = data_type & jsfeat.U8_t;\\n\\n                dst.resize(w, h, src.channel);\\n\\n                var src_d = src.data,\\n                    dst_d = dst.data;\\n                var buf,\\n                    filter,\\n                    buf_sz = kernel_size + Math.max(h, w) | 0;\\n\\n                var buf_node = jsfeat.cache.get_buffer(buf_sz << 2);\\n                var filt_node = jsfeat.cache.get_buffer(kernel_size << 2);\\n\\n                if (is_u8) {\\n                    buf = buf_node.i32;\\n                    filter = filt_node.i32;\\n                } else if (data_type & jsfeat.S32_t) {\\n                    buf = buf_node.i32;\\n                    filter = filt_node.f32;\\n                } else {\\n                    buf = buf_node.f32;\\n                    filter = filt_node.f32;\\n                }\\n\\n                jsfeat.math.get_gaussian_kernel(kernel_size, sigma, filter, data_type);\\n\\n                if (is_u8) {\\n                    _convol_u8(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel);\\n                } else {\\n                    _convol(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel);\\n                }\\n\\n                jsfeat.cache.put_buffer(buf_node);\\n                jsfeat.cache.put_buffer(filt_node);\\n            },\\n            // assume we always need it for u8 image\\n            pyrdown: function pyrdown(src, dst, sx, sy) {\\n                // this is needed for bbf\\n                if (typeof sx === \\\"undefined\\\") {\\n                    sx = 0;\\n                }\\n                if (typeof sy === \\\"undefined\\\") {\\n                    sy = 0;\\n                }\\n\\n                var w = src.cols,\\n                    h = src.rows;\\n                var w2 = w >> 1,\\n                    h2 = h >> 1;\\n                var _w2 = w2 - (sx << 1),\\n                    _h2 = h2 - (sy << 1);\\n                var x = 0,\\n                    y = 0,\\n                    sptr = sx + sy * w,\\n                    sline = 0,\\n                    dptr = 0,\\n                    dline = 0;\\n\\n                dst.resize(w2, h2, src.channel);\\n\\n                var src_d = src.data,\\n                    dst_d = dst.data;\\n\\n                for (y = 0; y < _h2; ++y) {\\n                    sline = sptr;\\n                    dline = dptr;\\n                    for (x = 0; x <= _w2 - 2; x += 2, dline += 2, sline += 4) {\\n                        dst_d[dline] = src_d[sline] + src_d[sline + 1] + src_d[sline + w] + src_d[sline + w + 1] + 2 >> 2;\\n                        dst_d[dline + 1] = src_d[sline + 2] + src_d[sline + 3] + src_d[sline + w + 2] + src_d[sline + w + 3] + 2 >> 2;\\n                    }\\n                    for (; x < _w2; ++x, ++dline, sline += 2) {\\n                        dst_d[dline] = src_d[sline] + src_d[sline + 1] + src_d[sline + w] + src_d[sline + w + 1] + 2 >> 2;\\n                    }\\n                    sptr += w << 1;\\n                    dptr += w2;\\n                }\\n            },\\n\\n            // dst: [gx,gy,...]\\n            scharr_derivatives: function scharr_derivatives(src, dst) {\\n                var w = src.cols,\\n                    h = src.rows;\\n                var dstep = w << 1,\\n                    x = 0,\\n                    y = 0,\\n                    x1 = 0,\\n                    a,\\n                    b,\\n                    c,\\n                    d,\\n                    e,\\n                    f;\\n                var srow0 = 0,\\n                    srow1 = 0,\\n                    srow2 = 0,\\n                    drow = 0;\\n                var trow0, trow1;\\n\\n                dst.resize(w, h, 2); // 2 channel output gx, gy\\n\\n                var img = src.data,\\n                    gxgy = dst.data;\\n\\n                var buf0_node = jsfeat.cache.get_buffer(w + 2 << 2);\\n                var buf1_node = jsfeat.cache.get_buffer(w + 2 << 2);\\n\\n                if (src.type & jsfeat.U8_t || src.type & jsfeat.S32_t) {\\n                    trow0 = buf0_node.i32;\\n                    trow1 = buf1_node.i32;\\n                } else {\\n                    trow0 = buf0_node.f32;\\n                    trow1 = buf1_node.f32;\\n                }\\n\\n                for (; y < h; ++y, srow1 += w) {\\n                    srow0 = (y > 0 ? y - 1 : 1) * w | 0;\\n                    srow2 = (y < h - 1 ? y + 1 : h - 2) * w | 0;\\n                    drow = y * dstep | 0;\\n                    // do vertical convolution\\n                    for (x = 0, x1 = 1; x <= w - 2; x += 2, x1 += 2) {\\n                        a = img[srow0 + x], b = img[srow2 + x];\\n                        trow0[x1] = (a + b) * 3 + img[srow1 + x] * 10;\\n                        trow1[x1] = b - a;\\n                        //\\n                        a = img[srow0 + x + 1], b = img[srow2 + x + 1];\\n                        trow0[x1 + 1] = (a + b) * 3 + img[srow1 + x + 1] * 10;\\n                        trow1[x1 + 1] = b - a;\\n                    }\\n                    for (; x < w; ++x, ++x1) {\\n                        a = img[srow0 + x], b = img[srow2 + x];\\n                        trow0[x1] = (a + b) * 3 + img[srow1 + x] * 10;\\n                        trow1[x1] = b - a;\\n                    }\\n                    // make border\\n                    x = w + 1 | 0;\\n                    trow0[0] = trow0[1];trow0[x] = trow0[w];\\n                    trow1[0] = trow1[1];trow1[x] = trow1[w];\\n                    // do horizontal convolution, interleave the results and store them\\n                    for (x = 0; x <= w - 4; x += 4) {\\n                        a = trow1[x + 2], b = trow1[x + 1], c = trow1[x + 3], d = trow1[x + 4], e = trow0[x + 2], f = trow0[x + 3];\\n                        gxgy[drow++] = e - trow0[x];\\n                        gxgy[drow++] = (a + trow1[x]) * 3 + b * 10;\\n                        gxgy[drow++] = f - trow0[x + 1];\\n                        gxgy[drow++] = (c + b) * 3 + a * 10;\\n\\n                        gxgy[drow++] = trow0[x + 4] - e;\\n                        gxgy[drow++] = (d + a) * 3 + c * 10;\\n                        gxgy[drow++] = trow0[x + 5] - f;\\n                        gxgy[drow++] = (trow1[x + 5] + c) * 3 + d * 10;\\n                    }\\n                    for (; x < w; ++x) {\\n                        gxgy[drow++] = trow0[x + 2] - trow0[x];\\n                        gxgy[drow++] = (trow1[x + 2] + trow1[x]) * 3 + trow1[x + 1] * 10;\\n                    }\\n                }\\n                jsfeat.cache.put_buffer(buf0_node);\\n                jsfeat.cache.put_buffer(buf1_node);\\n            },\\n\\n            // compute gradient using Sobel kernel [1 2 1] * [-1 0 1]^T\\n            // dst: [gx,gy,...]\\n            sobel_derivatives: function sobel_derivatives(src, dst) {\\n                var w = src.cols,\\n                    h = src.rows;\\n                var dstep = w << 1,\\n                    x = 0,\\n                    y = 0,\\n                    x1 = 0,\\n                    a,\\n                    b,\\n                    c,\\n                    d,\\n                    e,\\n                    f;\\n                var srow0 = 0,\\n                    srow1 = 0,\\n                    srow2 = 0,\\n                    drow = 0;\\n                var trow0, trow1;\\n\\n                dst.resize(w, h, 2); // 2 channel output gx, gy\\n\\n                var img = src.data,\\n                    gxgy = dst.data;\\n\\n                var buf0_node = jsfeat.cache.get_buffer(w + 2 << 2);\\n                var buf1_node = jsfeat.cache.get_buffer(w + 2 << 2);\\n\\n                if (src.type & jsfeat.U8_t || src.type & jsfeat.S32_t) {\\n                    trow0 = buf0_node.i32;\\n                    trow1 = buf1_node.i32;\\n                } else {\\n                    trow0 = buf0_node.f32;\\n                    trow1 = buf1_node.f32;\\n                }\\n\\n                for (; y < h; ++y, srow1 += w) {\\n                    srow0 = (y > 0 ? y - 1 : 1) * w | 0;\\n                    srow2 = (y < h - 1 ? y + 1 : h - 2) * w | 0;\\n                    drow = y * dstep | 0;\\n                    // do vertical convolution\\n                    for (x = 0, x1 = 1; x <= w - 2; x += 2, x1 += 2) {\\n                        a = img[srow0 + x], b = img[srow2 + x];\\n                        trow0[x1] = a + b + img[srow1 + x] * 2;\\n                        trow1[x1] = b - a;\\n                        //\\n                        a = img[srow0 + x + 1], b = img[srow2 + x + 1];\\n                        trow0[x1 + 1] = a + b + img[srow1 + x + 1] * 2;\\n                        trow1[x1 + 1] = b - a;\\n                    }\\n                    for (; x < w; ++x, ++x1) {\\n                        a = img[srow0 + x], b = img[srow2 + x];\\n                        trow0[x1] = a + b + img[srow1 + x] * 2;\\n                        trow1[x1] = b - a;\\n                    }\\n                    // make border\\n                    x = w + 1 | 0;\\n                    trow0[0] = trow0[1];trow0[x] = trow0[w];\\n                    trow1[0] = trow1[1];trow1[x] = trow1[w];\\n                    // do horizontal convolution, interleave the results and store them\\n                    for (x = 0; x <= w - 4; x += 4) {\\n                        a = trow1[x + 2], b = trow1[x + 1], c = trow1[x + 3], d = trow1[x + 4], e = trow0[x + 2], f = trow0[x + 3];\\n                        gxgy[drow++] = e - trow0[x];\\n                        gxgy[drow++] = a + trow1[x] + b * 2;\\n                        gxgy[drow++] = f - trow0[x + 1];\\n                        gxgy[drow++] = c + b + a * 2;\\n\\n                        gxgy[drow++] = trow0[x + 4] - e;\\n                        gxgy[drow++] = d + a + c * 2;\\n                        gxgy[drow++] = trow0[x + 5] - f;\\n                        gxgy[drow++] = trow1[x + 5] + c + d * 2;\\n                    }\\n                    for (; x < w; ++x) {\\n                        gxgy[drow++] = trow0[x + 2] - trow0[x];\\n                        gxgy[drow++] = trow1[x + 2] + trow1[x] + trow1[x + 1] * 2;\\n                    }\\n                }\\n                jsfeat.cache.put_buffer(buf0_node);\\n                jsfeat.cache.put_buffer(buf1_node);\\n            },\\n\\n            // please note: \\n            // dst_(type) size should be cols = src.cols+1, rows = src.rows+1\\n            compute_integral_image: function compute_integral_image(src, dst_sum, dst_sqsum, dst_tilted) {\\n                var w0 = src.cols | 0,\\n                    h0 = src.rows | 0,\\n                    src_d = src.data;\\n                var w1 = w0 + 1 | 0;\\n                var s = 0,\\n                    s2 = 0,\\n                    p = 0,\\n                    pup = 0,\\n                    i = 0,\\n                    j = 0,\\n                    v = 0,\\n                    k = 0;\\n\\n                if (dst_sum && dst_sqsum) {\\n                    // fill first row with zeros\\n                    for (; i < w1; ++i) {\\n                        dst_sum[i] = 0, dst_sqsum[i] = 0;\\n                    }\\n                    p = w1 + 1 | 0, pup = 1;\\n                    for (i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\\n                        s = s2 = 0;\\n                        for (j = 0; j <= w0 - 2; j += 2, k += 2, p += 2, pup += 2) {\\n                            v = src_d[k];\\n                            s += v, s2 += v * v;\\n                            dst_sum[p] = dst_sum[pup] + s;\\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\\n\\n                            v = src_d[k + 1];\\n                            s += v, s2 += v * v;\\n                            dst_sum[p + 1] = dst_sum[pup + 1] + s;\\n                            dst_sqsum[p + 1] = dst_sqsum[pup + 1] + s2;\\n                        }\\n                        for (; j < w0; ++j, ++k, ++p, ++pup) {\\n                            v = src_d[k];\\n                            s += v, s2 += v * v;\\n                            dst_sum[p] = dst_sum[pup] + s;\\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\\n                        }\\n                    }\\n                } else if (dst_sum) {\\n                    // fill first row with zeros\\n                    for (; i < w1; ++i) {\\n                        dst_sum[i] = 0;\\n                    }\\n                    p = w1 + 1 | 0, pup = 1;\\n                    for (i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\\n                        s = 0;\\n                        for (j = 0; j <= w0 - 2; j += 2, k += 2, p += 2, pup += 2) {\\n                            s += src_d[k];\\n                            dst_sum[p] = dst_sum[pup] + s;\\n                            s += src_d[k + 1];\\n                            dst_sum[p + 1] = dst_sum[pup + 1] + s;\\n                        }\\n                        for (; j < w0; ++j, ++k, ++p, ++pup) {\\n                            s += src_d[k];\\n                            dst_sum[p] = dst_sum[pup] + s;\\n                        }\\n                    }\\n                } else if (dst_sqsum) {\\n                    // fill first row with zeros\\n                    for (; i < w1; ++i) {\\n                        dst_sqsum[i] = 0;\\n                    }\\n                    p = w1 + 1 | 0, pup = 1;\\n                    for (i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\\n                        s2 = 0;\\n                        for (j = 0; j <= w0 - 2; j += 2, k += 2, p += 2, pup += 2) {\\n                            v = src_d[k];\\n                            s2 += v * v;\\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\\n                            v = src_d[k + 1];\\n                            s2 += v * v;\\n                            dst_sqsum[p + 1] = dst_sqsum[pup + 1] + s2;\\n                        }\\n                        for (; j < w0; ++j, ++k, ++p, ++pup) {\\n                            v = src_d[k];\\n                            s2 += v * v;\\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\\n                        }\\n                    }\\n                }\\n\\n                if (dst_tilted) {\\n                    // fill first row with zeros\\n                    for (i = 0; i < w1; ++i) {\\n                        dst_tilted[i] = 0;\\n                    }\\n                    // diagonal\\n                    p = w1 + 1 | 0, pup = 0;\\n                    for (i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\\n                        for (j = 0; j <= w0 - 2; j += 2, k += 2, p += 2, pup += 2) {\\n                            dst_tilted[p] = src_d[k] + dst_tilted[pup];\\n                            dst_tilted[p + 1] = src_d[k + 1] + dst_tilted[pup + 1];\\n                        }\\n                        for (; j < w0; ++j, ++k, ++p, ++pup) {\\n                            dst_tilted[p] = src_d[k] + dst_tilted[pup];\\n                        }\\n                    }\\n                    // diagonal\\n                    p = w1 + w0 | 0, pup = w0;\\n                    for (i = 0; i < h0; ++i, p += w1, pup += w1) {\\n                        dst_tilted[p] += dst_tilted[pup];\\n                    }\\n\\n                    for (j = w0 - 1; j > 0; --j) {\\n                        p = j + h0 * w1, pup = p - w1;\\n                        for (i = h0; i > 0; --i, p -= w1, pup -= w1) {\\n                            dst_tilted[p] += dst_tilted[pup] + dst_tilted[pup + 1];\\n                        }\\n                    }\\n                }\\n            },\\n            equalize_histogram: function equalize_histogram(src, dst) {\\n                var w = src.cols,\\n                    h = src.rows,\\n                    src_d = src.data;\\n\\n                dst.resize(w, h, src.channel);\\n\\n                var dst_d = dst.data,\\n                    size = w * h;\\n                var i = 0,\\n                    prev = 0,\\n                    hist0,\\n                    norm;\\n\\n                var hist0_node = jsfeat.cache.get_buffer(256 << 2);\\n                hist0 = hist0_node.i32;\\n                for (; i < 256; ++i) {\\n                    hist0[i] = 0;\\n                }for (i = 0; i < size; ++i) {\\n                    ++hist0[src_d[i]];\\n                }\\n\\n                prev = hist0[0];\\n                for (i = 1; i < 256; ++i) {\\n                    prev = hist0[i] += prev;\\n                }\\n\\n                norm = 255 / size;\\n                for (i = 0; i < size; ++i) {\\n                    dst_d[i] = hist0[src_d[i]] * norm + 0.5 | 0;\\n                }\\n                jsfeat.cache.put_buffer(hist0_node);\\n            },\\n\\n            canny: function canny(src, dst, low_thresh, high_thresh) {\\n                var w = src.cols,\\n                    h = src.rows,\\n                    src_d = src.data;\\n\\n                dst.resize(w, h, src.channel);\\n\\n                var dst_d = dst.data;\\n                var i = 0,\\n                    j = 0,\\n                    grad = 0,\\n                    w2 = w << 1,\\n                    _grad = 0,\\n                    suppress = 0,\\n                    f = 0,\\n                    x = 0,\\n                    y = 0,\\n                    s = 0;\\n                var tg22x = 0,\\n                    tg67x = 0;\\n\\n                // cache buffers\\n                var dxdy_node = jsfeat.cache.get_buffer(h * w2 << 2);\\n                var buf_node = jsfeat.cache.get_buffer(3 * (w + 2) << 2);\\n                var map_node = jsfeat.cache.get_buffer((h + 2) * (w + 2) << 2);\\n                var stack_node = jsfeat.cache.get_buffer(h * w << 2);\\n\\n                var buf = buf_node.i32;\\n                var map = map_node.i32;\\n                var stack = stack_node.i32;\\n                var dxdy = dxdy_node.i32;\\n                var dxdy_m = new jsfeat.matrix_t(w, h, jsfeat.S32C2_t, dxdy_node.data);\\n                var row0 = 1,\\n                    row1 = w + 2 + 1 | 0,\\n                    row2 = 2 * (w + 2) + 1 | 0,\\n                    map_w = w + 2 | 0,\\n                    map_i = map_w + 1 | 0,\\n                    stack_i = 0;\\n\\n                this.sobel_derivatives(src, dxdy_m);\\n\\n                if (low_thresh > high_thresh) {\\n                    i = low_thresh;\\n                    low_thresh = high_thresh;\\n                    high_thresh = i;\\n                }\\n\\n                i = 3 * (w + 2) | 0;\\n                while (--i >= 0) {\\n                    buf[i] = 0;\\n                }\\n\\n                i = (h + 2) * (w + 2) | 0;\\n                while (--i >= 0) {\\n                    map[i] = 0;\\n                }\\n\\n                for (; j < w; ++j, grad += 2) {\\n                    //buf[row1+j] = Math.abs(dxdy[grad]) + Math.abs(dxdy[grad+1]);\\n                    x = dxdy[grad], y = dxdy[grad + 1];\\n                    //buf[row1+j] = x*x + y*y;\\n                    buf[row1 + j] = (x ^ x >> 31) - (x >> 31) + ((y ^ y >> 31) - (y >> 31));\\n                }\\n\\n                for (i = 1; i <= h; ++i, grad += w2) {\\n                    if (i == h) {\\n                        j = row2 + w;\\n                        while (--j >= row2) {\\n                            buf[j] = 0;\\n                        }\\n                    } else {\\n                        for (j = 0; j < w; j++) {\\n                            //buf[row2+j] =  Math.abs(dxdy[grad+(j<<1)]) + Math.abs(dxdy[grad+(j<<1)+1]);\\n                            x = dxdy[grad + (j << 1)], y = dxdy[grad + (j << 1) + 1];\\n                            //buf[row2+j] = x*x + y*y;\\n                            buf[row2 + j] = (x ^ x >> 31) - (x >> 31) + ((y ^ y >> 31) - (y >> 31));\\n                        }\\n                    }\\n                    _grad = grad - w2 | 0;\\n                    map[map_i - 1] = 0;\\n                    suppress = 0;\\n                    for (j = 0; j < w; ++j, _grad += 2) {\\n                        f = buf[row1 + j];\\n                        if (f > low_thresh) {\\n                            x = dxdy[_grad];\\n                            y = dxdy[_grad + 1];\\n                            s = x ^ y;\\n                            // seems ot be faster than Math.abs\\n                            x = (x ^ x >> 31) - (x >> 31) | 0;\\n                            y = (y ^ y >> 31) - (y >> 31) | 0;\\n                            //x * tan(22.5) x * tan(67.5) == 2 * x + x * tan(22.5)\\n                            tg22x = x * 13573;\\n                            tg67x = tg22x + (x + x << 15);\\n                            y <<= 15;\\n                            if (y < tg22x) {\\n                                if (f > buf[row1 + j - 1] && f >= buf[row1 + j + 1]) {\\n                                    if (f > high_thresh && !suppress && map[map_i + j - map_w] != 2) {\\n                                        map[map_i + j] = 2;\\n                                        suppress = 1;\\n                                        stack[stack_i++] = map_i + j;\\n                                    } else {\\n                                        map[map_i + j] = 1;\\n                                    }\\n                                    continue;\\n                                }\\n                            } else if (y > tg67x) {\\n                                if (f > buf[row0 + j] && f >= buf[row2 + j]) {\\n                                    if (f > high_thresh && !suppress && map[map_i + j - map_w] != 2) {\\n                                        map[map_i + j] = 2;\\n                                        suppress = 1;\\n                                        stack[stack_i++] = map_i + j;\\n                                    } else {\\n                                        map[map_i + j] = 1;\\n                                    }\\n                                    continue;\\n                                }\\n                            } else {\\n                                s = s < 0 ? -1 : 1;\\n                                if (f > buf[row0 + j - s] && f > buf[row2 + j + s]) {\\n                                    if (f > high_thresh && !suppress && map[map_i + j - map_w] != 2) {\\n                                        map[map_i + j] = 2;\\n                                        suppress = 1;\\n                                        stack[stack_i++] = map_i + j;\\n                                    } else {\\n                                        map[map_i + j] = 1;\\n                                    }\\n                                    continue;\\n                                }\\n                            }\\n                        }\\n                        map[map_i + j] = 0;\\n                        suppress = 0;\\n                    }\\n                    map[map_i + w] = 0;\\n                    map_i += map_w;\\n                    j = row0;\\n                    row0 = row1;\\n                    row1 = row2;\\n                    row2 = j;\\n                }\\n\\n                j = map_i - map_w - 1;\\n                for (i = 0; i < map_w; ++i, ++j) {\\n                    map[j] = 0;\\n                }\\n                // path following\\n                while (stack_i > 0) {\\n                    map_i = stack[--stack_i];\\n                    map_i -= map_w + 1;\\n                    if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\\n                    map_i += 1;\\n                    if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\\n                    map_i += 1;\\n                    if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\\n                    map_i += map_w;\\n                    if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\\n                    map_i -= 2;\\n                    if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\\n                    map_i += map_w;\\n                    if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\\n                    map_i += 1;\\n                    if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\\n                    map_i += 1;\\n                    if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\\n                }\\n\\n                map_i = map_w + 1;\\n                row0 = 0;\\n                for (i = 0; i < h; ++i, map_i += map_w) {\\n                    for (j = 0; j < w; ++j) {\\n                        dst_d[row0++] = (map[map_i + j] == 2) * 0xff;\\n                    }\\n                }\\n\\n                // free buffers\\n                jsfeat.cache.put_buffer(dxdy_node);\\n                jsfeat.cache.put_buffer(buf_node);\\n                jsfeat.cache.put_buffer(map_node);\\n                jsfeat.cache.put_buffer(stack_node);\\n            },\\n            // transform is 3x3 matrix_t\\n            warp_perspective: function warp_perspective(src, dst, transform, fill_value) {\\n                if (typeof fill_value === \\\"undefined\\\") {\\n                    fill_value = 0;\\n                }\\n                var src_width = src.cols | 0,\\n                    src_height = src.rows | 0,\\n                    dst_width = dst.cols | 0,\\n                    dst_height = dst.rows | 0;\\n                var src_d = src.data,\\n                    dst_d = dst.data;\\n                var x = 0,\\n                    y = 0,\\n                    off = 0,\\n                    ixs = 0,\\n                    iys = 0,\\n                    xs = 0.0,\\n                    ys = 0.0,\\n                    xs0 = 0.0,\\n                    ys0 = 0.0,\\n                    ws = 0.0,\\n                    sc = 0.0,\\n                    a = 0.0,\\n                    b = 0.0,\\n                    p0 = 0.0,\\n                    p1 = 0.0;\\n                var td = transform.data;\\n                var m00 = td[0],\\n                    m01 = td[1],\\n                    m02 = td[2],\\n                    m10 = td[3],\\n                    m11 = td[4],\\n                    m12 = td[5],\\n                    m20 = td[6],\\n                    m21 = td[7],\\n                    m22 = td[8];\\n\\n                for (var dptr = 0; y < dst_height; ++y) {\\n                    xs0 = m01 * y + m02, ys0 = m11 * y + m12, ws = m21 * y + m22;\\n                    for (x = 0; x < dst_width; ++x, ++dptr, xs0 += m00, ys0 += m10, ws += m20) {\\n                        sc = 1.0 / ws;\\n                        xs = xs0 * sc, ys = ys0 * sc;\\n                        ixs = xs | 0, iys = ys | 0;\\n\\n                        if (xs > 0 && ys > 0 && ixs < src_width - 1 && iys < src_height - 1) {\\n                            a = Math.max(xs - ixs, 0.0);\\n                            b = Math.max(ys - iys, 0.0);\\n                            off = src_width * iys + ixs | 0;\\n\\n                            p0 = src_d[off] + a * (src_d[off + 1] - src_d[off]);\\n                            p1 = src_d[off + src_width] + a * (src_d[off + src_width + 1] - src_d[off + src_width]);\\n\\n                            dst_d[dptr] = p0 + b * (p1 - p0);\\n                        } else dst_d[dptr] = fill_value;\\n                    }\\n                }\\n            },\\n            // transform is 3x3 or 2x3 matrix_t only first 6 values referenced\\n            warp_affine: function warp_affine(src, dst, transform, fill_value) {\\n                if (typeof fill_value === \\\"undefined\\\") {\\n                    fill_value = 0;\\n                }\\n                var src_width = src.cols,\\n                    src_height = src.rows,\\n                    dst_width = dst.cols,\\n                    dst_height = dst.rows;\\n                var src_d = src.data,\\n                    dst_d = dst.data;\\n                var x = 0,\\n                    y = 0,\\n                    off = 0,\\n                    ixs = 0,\\n                    iys = 0,\\n                    xs = 0.0,\\n                    ys = 0.0,\\n                    a = 0.0,\\n                    b = 0.0,\\n                    p0 = 0.0,\\n                    p1 = 0.0;\\n                var td = transform.data;\\n                var m00 = td[0],\\n                    m01 = td[1],\\n                    m02 = td[2],\\n                    m10 = td[3],\\n                    m11 = td[4],\\n                    m12 = td[5];\\n\\n                for (var dptr = 0; y < dst_height; ++y) {\\n                    xs = m01 * y + m02;\\n                    ys = m11 * y + m12;\\n                    for (x = 0; x < dst_width; ++x, ++dptr, xs += m00, ys += m10) {\\n                        ixs = xs | 0;iys = ys | 0;\\n\\n                        if (ixs >= 0 && iys >= 0 && ixs < src_width - 1 && iys < src_height - 1) {\\n                            a = xs - ixs;\\n                            b = ys - iys;\\n                            off = src_width * iys + ixs;\\n\\n                            p0 = src_d[off] + a * (src_d[off + 1] - src_d[off]);\\n                            p1 = src_d[off + src_width] + a * (src_d[off + src_width + 1] - src_d[off + src_width]);\\n\\n                            dst_d[dptr] = p0 + b * (p1 - p0);\\n                        } else dst_d[dptr] = fill_value;\\n                    }\\n                }\\n            },\\n\\n            // Basic RGB Skin detection filter\\n            // from http://popscan.blogspot.fr/2012/08/skin-detection-in-digital-images.html\\n            skindetector: function skindetector(src, dst) {\\n                var r, g, b, j;\\n                var i = src.width * src.height;\\n                while (i--) {\\n                    j = i * 4;\\n                    r = src.data[j];\\n                    g = src.data[j + 1];\\n                    b = src.data[j + 2];\\n                    if (r > 95 && g > 40 && b > 20 && r > g && r > b && r - Math.min(g, b) > 15 && Math.abs(r - g) > 15) {\\n                        dst[i] = 255;\\n                    } else {\\n                        dst[i] = 0;\\n                    }\\n                }\\n            }\\n        };\\n    }();\\n\\n    global.imgproc = imgproc;\\n})(jsfeat);\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n *\\r\\n * This is FAST corner detector, contributed to OpenCV by the author, Edward Rosten.\\r\\n */\\n\\n/*\\r\\nThe references are:\\r\\n * Machine learning for high-speed corner detection,\\r\\n   E. Rosten and T. Drummond, ECCV 2006\\r\\n * Faster and better: A machine learning approach to corner detection\\r\\n   E. Rosten, R. Porter and T. Drummond, PAMI, 2009  \\r\\n*/\\n\\n(function (global) {\\n    \\\"use strict\\\";\\n    //\\n\\n    var fast_corners = function () {\\n\\n        var offsets16 = new Int32Array([0, 3, 1, 3, 2, 2, 3, 1, 3, 0, 3, -1, 2, -2, 1, -3, 0, -3, -1, -3, -2, -2, -3, -1, -3, 0, -3, 1, -2, 2, -1, 3]);\\n\\n        var threshold_tab = new Uint8Array(512);\\n        var pixel_off = new Int32Array(25);\\n        var score_diff = new Int32Array(25);\\n\\n        // private functions\\n        var _cmp_offsets = function _cmp_offsets(pixel, step, pattern_size) {\\n            var k = 0;\\n            var offsets = offsets16;\\n            for (; k < pattern_size; ++k) {\\n                pixel[k] = offsets[k << 1] + offsets[(k << 1) + 1] * step;\\n            }\\n            for (; k < 25; ++k) {\\n                pixel[k] = pixel[k - pattern_size];\\n            }\\n        },\\n            _cmp_score_16 = function _cmp_score_16(src, off, pixel, d, threshold) {\\n            var N = 25,\\n                k = 0,\\n                v = src[off];\\n            var a0 = threshold,\\n                a = 0,\\n                b0 = 0,\\n                b = 0;\\n\\n            for (; k < N; ++k) {\\n                d[k] = v - src[off + pixel[k]];\\n            }\\n\\n            for (k = 0; k < 16; k += 2) {\\n                a = Math.min(d[k + 1], d[k + 2]);\\n                a = Math.min(a, d[k + 3]);\\n\\n                if (a <= a0) continue;\\n\\n                a = Math.min(a, d[k + 4]);\\n                a = Math.min(a, d[k + 5]);\\n                a = Math.min(a, d[k + 6]);\\n                a = Math.min(a, d[k + 7]);\\n                a = Math.min(a, d[k + 8]);\\n                a0 = Math.max(a0, Math.min(a, d[k]));\\n                a0 = Math.max(a0, Math.min(a, d[k + 9]));\\n            }\\n\\n            b0 = -a0;\\n            for (k = 0; k < 16; k += 2) {\\n                b = Math.max(d[k + 1], d[k + 2]);\\n                b = Math.max(b, d[k + 3]);\\n                b = Math.max(b, d[k + 4]);\\n                b = Math.max(b, d[k + 5]);\\n\\n                if (b >= b0) continue;\\n                b = Math.max(b, d[k + 6]);\\n                b = Math.max(b, d[k + 7]);\\n                b = Math.max(b, d[k + 8]);\\n                b0 = Math.min(b0, Math.max(b, d[k]));\\n                b0 = Math.min(b0, Math.max(b, d[k + 9]));\\n            }\\n\\n            return -b0 - 1;\\n        };\\n\\n        var _threshold = 20;\\n\\n        return {\\n            set_threshold: function set_threshold(threshold) {\\n                _threshold = Math.min(Math.max(threshold, 0), 255);\\n                for (var i = -255; i <= 255; ++i) {\\n                    threshold_tab[i + 255] = i < -_threshold ? 1 : i > _threshold ? 2 : 0;\\n                }\\n                return _threshold;\\n            },\\n\\n            detect: function detect(src, corners, border) {\\n                if (typeof border === \\\"undefined\\\") {\\n                    border = 3;\\n                }\\n\\n                var K = 8,\\n                    N = 25;\\n                var img = src.data,\\n                    w = src.cols,\\n                    h = src.rows;\\n                var i = 0,\\n                    j = 0,\\n                    k = 0,\\n                    vt = 0,\\n                    x = 0,\\n                    m3 = 0;\\n                var buf_node = jsfeat.cache.get_buffer(3 * w);\\n                var cpbuf_node = jsfeat.cache.get_buffer((w + 1) * 3 << 2);\\n                var buf = buf_node.u8;\\n                var cpbuf = cpbuf_node.i32;\\n                var pixel = pixel_off;\\n                var sd = score_diff;\\n                var sy = Math.max(3, border);\\n                var ey = Math.min(h - 2, h - border);\\n                var sx = Math.max(3, border);\\n                var ex = Math.min(w - 3, w - border);\\n                var _count = 0,\\n                    corners_cnt = 0,\\n                    pt;\\n                var score_func = _cmp_score_16;\\n                var thresh_tab = threshold_tab;\\n                var threshold = _threshold;\\n\\n                var v = 0,\\n                    tab = 0,\\n                    d = 0,\\n                    ncorners = 0,\\n                    cornerpos = 0,\\n                    curr = 0,\\n                    ptr = 0,\\n                    prev = 0,\\n                    pprev = 0;\\n                var jp1 = 0,\\n                    jm1 = 0,\\n                    score = 0;\\n\\n                _cmp_offsets(pixel, w, 16);\\n\\n                // local vars are faster?\\n                var pixel0 = pixel[0];\\n                var pixel1 = pixel[1];\\n                var pixel2 = pixel[2];\\n                var pixel3 = pixel[3];\\n                var pixel4 = pixel[4];\\n                var pixel5 = pixel[5];\\n                var pixel6 = pixel[6];\\n                var pixel7 = pixel[7];\\n                var pixel8 = pixel[8];\\n                var pixel9 = pixel[9];\\n                var pixel10 = pixel[10];\\n                var pixel11 = pixel[11];\\n                var pixel12 = pixel[12];\\n                var pixel13 = pixel[13];\\n                var pixel14 = pixel[14];\\n                var pixel15 = pixel[15];\\n\\n                for (i = 0; i < w * 3; ++i) {\\n                    buf[i] = 0;\\n                }\\n\\n                for (i = sy; i < ey; ++i) {\\n                    ptr = i * w + sx | 0;\\n                    m3 = (i - 3) % 3;\\n                    curr = m3 * w | 0;\\n                    cornerpos = m3 * (w + 1) | 0;\\n                    for (j = 0; j < w; ++j) {\\n                        buf[curr + j] = 0;\\n                    }ncorners = 0;\\n\\n                    if (i < ey - 1) {\\n                        j = sx;\\n\\n                        for (; j < ex; ++j, ++ptr) {\\n                            v = img[ptr];\\n                            tab = -v + 255;\\n                            d = thresh_tab[tab + img[ptr + pixel0]] | thresh_tab[tab + img[ptr + pixel8]];\\n\\n                            if (d == 0) {\\n                                continue;\\n                            }\\n\\n                            d &= thresh_tab[tab + img[ptr + pixel2]] | thresh_tab[tab + img[ptr + pixel10]];\\n                            d &= thresh_tab[tab + img[ptr + pixel4]] | thresh_tab[tab + img[ptr + pixel12]];\\n                            d &= thresh_tab[tab + img[ptr + pixel6]] | thresh_tab[tab + img[ptr + pixel14]];\\n\\n                            if (d == 0) {\\n                                continue;\\n                            }\\n\\n                            d &= thresh_tab[tab + img[ptr + pixel1]] | thresh_tab[tab + img[ptr + pixel9]];\\n                            d &= thresh_tab[tab + img[ptr + pixel3]] | thresh_tab[tab + img[ptr + pixel11]];\\n                            d &= thresh_tab[tab + img[ptr + pixel5]] | thresh_tab[tab + img[ptr + pixel13]];\\n                            d &= thresh_tab[tab + img[ptr + pixel7]] | thresh_tab[tab + img[ptr + pixel15]];\\n\\n                            if (d & 1) {\\n                                vt = v - threshold;\\n                                _count = 0;\\n\\n                                for (k = 0; k < N; ++k) {\\n                                    x = img[ptr + pixel[k]];\\n                                    if (x < vt) {\\n                                        ++_count;\\n                                        if (_count > K) {\\n                                            ++ncorners;\\n                                            cpbuf[cornerpos + ncorners] = j;\\n                                            buf[curr + j] = score_func(img, ptr, pixel, sd, threshold);\\n                                            break;\\n                                        }\\n                                    } else {\\n                                        _count = 0;\\n                                    }\\n                                }\\n                            }\\n\\n                            if (d & 2) {\\n                                vt = v + threshold;\\n                                _count = 0;\\n\\n                                for (k = 0; k < N; ++k) {\\n                                    x = img[ptr + pixel[k]];\\n                                    if (x > vt) {\\n                                        ++_count;\\n                                        if (_count > K) {\\n                                            ++ncorners;\\n                                            cpbuf[cornerpos + ncorners] = j;\\n                                            buf[curr + j] = score_func(img, ptr, pixel, sd, threshold);\\n                                            break;\\n                                        }\\n                                    } else {\\n                                        _count = 0;\\n                                    }\\n                                }\\n                            }\\n                        }\\n                    }\\n\\n                    cpbuf[cornerpos + w] = ncorners;\\n\\n                    if (i == sy) {\\n                        continue;\\n                    }\\n\\n                    m3 = (i - 4 + 3) % 3;\\n                    prev = m3 * w | 0;\\n                    cornerpos = m3 * (w + 1) | 0;\\n                    m3 = (i - 5 + 3) % 3;\\n                    pprev = m3 * w | 0;\\n\\n                    ncorners = cpbuf[cornerpos + w];\\n\\n                    for (k = 0; k < ncorners; ++k) {\\n                        j = cpbuf[cornerpos + k];\\n                        jp1 = j + 1 | 0;\\n                        jm1 = j - 1 | 0;\\n                        score = buf[prev + j];\\n                        if (score > buf[prev + jp1] && score > buf[prev + jm1] && score > buf[pprev + jm1] && score > buf[pprev + j] && score > buf[pprev + jp1] && score > buf[curr + jm1] && score > buf[curr + j] && score > buf[curr + jp1]) {\\n                            // save corner\\n                            pt = corners[corners_cnt];\\n                            pt.x = j, pt.y = i - 1, pt.score = score;\\n                            corners_cnt++;\\n                        }\\n                    }\\n                } // y loop\\n                jsfeat.cache.put_buffer(buf_node);\\n                jsfeat.cache.put_buffer(cpbuf_node);\\n                return corners_cnt;\\n            }\\n        };\\n    }();\\n\\n    global.fast_corners = fast_corners;\\n    fast_corners.set_threshold(20); // set default\\n})(jsfeat);\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n *\\r\\n * Copyright 2007 Computer Vision Lab,\\r\\n * Ecole Polytechnique Federale de Lausanne (EPFL), Switzerland.\\r\\n * @author Vincent Lepetit (http://cvlab.epfl.ch/~lepetit)\\r\\n */\\n\\n(function (global) {\\n    \\\"use strict\\\";\\n    //\\n\\n    var yape06 = function () {\\n\\n        var compute_laplacian = function compute_laplacian(src, dst, w, h, Dxx, Dyy, sx, sy, ex, ey) {\\n            var y = 0,\\n                x = 0,\\n                yrow = sy * w + sx | 0,\\n                row = yrow;\\n\\n            for (y = sy; y < ey; ++y, yrow += w, row = yrow) {\\n                for (x = sx; x < ex; ++x, ++row) {\\n                    dst[row] = -4 * src[row] + src[row + Dxx] + src[row - Dxx] + src[row + Dyy] + src[row - Dyy];\\n                }\\n            }\\n        };\\n\\n        var hessian_min_eigen_value = function hessian_min_eigen_value(src, off, tr, Dxx, Dyy, Dxy, Dyx) {\\n            var Ixx = -2 * src[off] + src[off + Dxx] + src[off - Dxx];\\n            var Iyy = -2 * src[off] + src[off + Dyy] + src[off - Dyy];\\n            var Ixy = src[off + Dxy] + src[off - Dxy] - src[off + Dyx] - src[off - Dyx];\\n            var sqrt_delta = Math.sqrt((Ixx - Iyy) * (Ixx - Iyy) + 4 * Ixy * Ixy) | 0;\\n\\n            return Math.min(Math.abs(tr - sqrt_delta), Math.abs(-(tr + sqrt_delta)));\\n        };\\n\\n        return {\\n\\n            laplacian_threshold: 30,\\n            min_eigen_value_threshold: 25,\\n\\n            detect: function detect(src, points, border) {\\n                if (typeof border === \\\"undefined\\\") {\\n                    border = 5;\\n                }\\n                var x = 0,\\n                    y = 0;\\n                var w = src.cols,\\n                    h = src.rows,\\n                    srd_d = src.data;\\n                var Dxx = 5,\\n                    Dyy = 5 * w | 0;\\n                var Dxy = 3 + 3 * w | 0,\\n                    Dyx = 3 - 3 * w | 0;\\n                var lap_buf = jsfeat.cache.get_buffer(w * h << 2);\\n                var laplacian = lap_buf.i32;\\n                var lv = 0,\\n                    row = 0,\\n                    rowx = 0,\\n                    min_eigen_value = 0,\\n                    pt;\\n                var number_of_points = 0;\\n                var lap_thresh = this.laplacian_threshold;\\n                var eigen_thresh = this.min_eigen_value_threshold;\\n\\n                var sx = Math.max(5, border) | 0;\\n                var sy = Math.max(3, border) | 0;\\n                var ex = Math.min(w - 5, w - border) | 0;\\n                var ey = Math.min(h - 3, h - border) | 0;\\n\\n                x = w * h;\\n                while (--x >= 0) {\\n                    laplacian[x] = 0;\\n                }\\n                compute_laplacian(srd_d, laplacian, w, h, Dxx, Dyy, sx, sy, ex, ey);\\n\\n                row = sy * w + sx | 0;\\n                for (y = sy; y < ey; ++y, row += w) {\\n                    for (x = sx, rowx = row; x < ex; ++x, ++rowx) {\\n\\n                        lv = laplacian[rowx];\\n                        if (lv < -lap_thresh && lv < laplacian[rowx - 1] && lv < laplacian[rowx + 1] && lv < laplacian[rowx - w] && lv < laplacian[rowx + w] && lv < laplacian[rowx - w - 1] && lv < laplacian[rowx + w - 1] && lv < laplacian[rowx - w + 1] && lv < laplacian[rowx + w + 1] || lv > lap_thresh && lv > laplacian[rowx - 1] && lv > laplacian[rowx + 1] && lv > laplacian[rowx - w] && lv > laplacian[rowx + w] && lv > laplacian[rowx - w - 1] && lv > laplacian[rowx + w - 1] && lv > laplacian[rowx - w + 1] && lv > laplacian[rowx + w + 1]) {\\n\\n                            min_eigen_value = hessian_min_eigen_value(srd_d, rowx, lv, Dxx, Dyy, Dxy, Dyx);\\n                            if (min_eigen_value > eigen_thresh) {\\n                                pt = points[number_of_points];\\n                                pt.x = x, pt.y = y, pt.score = min_eigen_value;\\n                                ++number_of_points;\\n                                ++x, ++rowx; // skip next pixel since this is maxima in 3x3\\n                            }\\n                        }\\n                    }\\n                }\\n\\n                jsfeat.cache.put_buffer(lap_buf);\\n\\n                return number_of_points;\\n            }\\n\\n        };\\n    }();\\n\\n    global.yape06 = yape06;\\n})(jsfeat);\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n *\\r\\n * Copyright 2007 Computer Vision Lab,\\r\\n * Ecole Polytechnique Federale de Lausanne (EPFL), Switzerland.\\r\\n */\\n\\n(function (global) {\\n    \\\"use strict\\\";\\n    //\\n\\n    var yape = function () {\\n\\n        var precompute_directions = function precompute_directions(step, dirs, R) {\\n            var i = 0;\\n            var x, y;\\n\\n            x = R;\\n            for (y = 0; y < x; y++, i++) {\\n                x = Math.sqrt(R * R - y * y) + 0.5 | 0;\\n                dirs[i] = x + step * y;\\n            }\\n            for (x--; x < y && x >= 0; x--, i++) {\\n                y = Math.sqrt(R * R - x * x) + 0.5 | 0;\\n                dirs[i] = x + step * y;\\n            }\\n            for (; -x < y; x--, i++) {\\n                y = Math.sqrt(R * R - x * x) + 0.5 | 0;\\n                dirs[i] = x + step * y;\\n            }\\n            for (y--; y >= 0; y--, i++) {\\n                x = -Math.sqrt(R * R - y * y) - 0.5 | 0;\\n                dirs[i] = x + step * y;\\n            }\\n            for (; y > x; y--, i++) {\\n                x = -Math.sqrt(R * R - y * y) - 0.5 | 0;\\n                dirs[i] = x + step * y;\\n            }\\n            for (x++; x <= 0; x++, i++) {\\n                y = -Math.sqrt(R * R - x * x) - 0.5 | 0;\\n                dirs[i] = x + step * y;\\n            }\\n            for (; x < -y; x++, i++) {\\n                y = -Math.sqrt(R * R - x * x) - 0.5 | 0;\\n                dirs[i] = x + step * y;\\n            }\\n            for (y++; y < 0; y++, i++) {\\n                x = Math.sqrt(R * R - y * y) + 0.5 | 0;\\n                dirs[i] = x + step * y;\\n            }\\n\\n            dirs[i] = dirs[0];\\n            dirs[i + 1] = dirs[1];\\n            return i;\\n        };\\n\\n        var third_check = function third_check(Sb, off, step) {\\n            var n = 0;\\n            if (Sb[off + 1] != 0) n++;\\n            if (Sb[off - 1] != 0) n++;\\n            if (Sb[off + step] != 0) n++;\\n            if (Sb[off + step + 1] != 0) n++;\\n            if (Sb[off + step - 1] != 0) n++;\\n            if (Sb[off - step] != 0) n++;\\n            if (Sb[off - step + 1] != 0) n++;\\n            if (Sb[off - step - 1] != 0) n++;\\n\\n            return n;\\n        };\\n\\n        var is_local_maxima = function is_local_maxima(p, off, v, step, neighborhood) {\\n            var x, y;\\n\\n            if (v > 0) {\\n                off -= step * neighborhood;\\n                for (y = -neighborhood; y <= neighborhood; ++y) {\\n                    for (x = -neighborhood; x <= neighborhood; ++x) {\\n                        if (p[off + x] > v) return false;\\n                    }\\n                    off += step;\\n                }\\n            } else {\\n                off -= step * neighborhood;\\n                for (y = -neighborhood; y <= neighborhood; ++y) {\\n                    for (x = -neighborhood; x <= neighborhood; ++x) {\\n                        if (p[off + x] < v) return false;\\n                    }\\n                    off += step;\\n                }\\n            }\\n            return true;\\n        };\\n\\n        var perform_one_point = function perform_one_point(I, x, Scores, Im, Ip, dirs, opposite, dirs_nb) {\\n            var score = 0;\\n            var a = 0,\\n                b = opposite - 1 | 0;\\n            var A = 0,\\n                B0 = 0,\\n                B1 = 0,\\n                B2 = 0;\\n            var state = 0;\\n\\n            // WE KNOW THAT NOT(A ~ I0 & B1 ~ I0):\\n            A = I[x + dirs[a]];\\n            if (A <= Ip) {\\n                if (A >= Im) {\\n                    // A ~ I0\\n                    B0 = I[x + dirs[b]];\\n                    if (B0 <= Ip) {\\n                        if (B0 >= Im) {\\n                            Scores[x] = 0;return;\\n                        } else {\\n                            b++;B1 = I[x + dirs[b]];\\n                            if (B1 > Ip) {\\n                                b++;B2 = I[x + dirs[b]];\\n                                if (B2 > Ip) state = 3;else if (B2 < Im) state = 6;else {\\n                                    Scores[x] = 0;return;\\n                                } // A ~ I0, B2 ~ I0\\n                            } else /* if ((B1 < Im))*/{\\n                                    b++;B2 = I[x + dirs[b]];\\n                                    if (B2 > Ip) state = 7;else if (B2 < Im) state = 2;else {\\n                                        Scores[x] = 0;return;\\n                                    } // A ~ I0, B2 ~ I0\\n                                }\\n                            //else { Scores[x] = 0; return; } // A ~ I0, B1 ~ I0\\n                        }\\n                    } else {\\n                        // B0 < I0\\n                        b++;B1 = I[x + dirs[b]];\\n                        if (B1 > Ip) {\\n                            b++;B2 = I[x + dirs[b]];\\n                            if (B2 > Ip) state = 3;else if (B2 < Im) state = 6;else {\\n                                Scores[x] = 0;return;\\n                            } // A ~ I0, B2 ~ I0\\n                        } else if (B1 < Im) {\\n                            b++;B2 = I[x + dirs[b]];\\n                            if (B2 > Ip) state = 7;else if (B2 < Im) state = 2;else {\\n                                Scores[x] = 0;return;\\n                            } // A ~ I0, B2 ~ I0\\n                        } else {\\n                            Scores[x] = 0;return;\\n                        } // A ~ I0, B1 ~ I0\\n                    }\\n                } else {\\n                    // A > I0\\n                    B0 = I[x + dirs[b]];\\n                    if (B0 > Ip) {\\n                        Scores[x] = 0;return;\\n                    }\\n                    b++;B1 = I[x + dirs[b]];\\n                    if (B1 > Ip) {\\n                        Scores[x] = 0;return;\\n                    }\\n                    b++;B2 = I[x + dirs[b]];\\n                    if (B2 > Ip) {\\n                        Scores[x] = 0;return;\\n                    }\\n                    state = 1;\\n                }\\n            } else // A < I0\\n                {\\n                    B0 = I[x + dirs[b]];\\n                    if (B0 < Im) {\\n                        Scores[x] = 0;return;\\n                    }\\n                    b++;B1 = I[x + dirs[b]];\\n                    if (B1 < Im) {\\n                        Scores[x] = 0;return;\\n                    }\\n                    b++;B2 = I[x + dirs[b]];\\n                    if (B2 < Im) {\\n                        Scores[x] = 0;return;\\n                    }\\n                    state = 0;\\n                }\\n\\n            for (a = 1; a <= opposite; a++) {\\n                A = I[x + dirs[a]];\\n\\n                switch (state) {\\n                    case 0:\\n                        if (A > Ip) {\\n                            B1 = B2;b++;B2 = I[x + dirs[b]];\\n                            if (B2 < Im) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            {\\n                                score -= A + B1;state = 0;break;\\n                            };\\n                        }\\n                        if (A < Im) {\\n                            if (B1 > Ip) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            if (B2 > Ip) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            B1 = B2;b++;B2 = I[x + dirs[b]];\\n                            if (B2 > Ip) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            {\\n                                score -= A + B1;state = 8;break;\\n                            };\\n                        }\\n                        // A ~ I0\\n                        if (B1 <= Ip) {\\n                            Scores[x] = 0;return;\\n                        }\\n                        if (B2 <= Ip) {\\n                            Scores[x] = 0;return;\\n                        }\\n                        B1 = B2;b++;B2 = I[x + dirs[b]];\\n                        if (B2 > Ip) {\\n                            score -= A + B1;state = 3;break;\\n                        };\\n                        if (B2 < Im) {\\n                            score -= A + B1;state = 6;break;\\n                        };\\n                        {\\n                            Scores[x] = 0;return;\\n                        }\\n\\n                    case 1:\\n                        if (A < Im) {\\n                            B1 = B2;b++;B2 = I[x + dirs[b]];\\n                            if (B2 > Ip) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            {\\n                                score -= A + B1;state = 1;break;\\n                            };\\n                        }\\n                        if (A > Ip) {\\n                            if (B1 < Im) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            if (B2 < Im) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            B1 = B2;b++;B2 = I[x + dirs[b]];\\n                            if (B2 < Im) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            {\\n                                score -= A + B1;state = 9;break;\\n                            };\\n                        }\\n                        // A ~ I0\\n                        if (B1 >= Im) {\\n                            Scores[x] = 0;return;\\n                        }\\n                        if (B2 >= Im) {\\n                            Scores[x] = 0;return;\\n                        }\\n                        B1 = B2;b++;B2 = I[x + dirs[b]];\\n                        if (B2 < Im) {\\n                            score -= A + B1;state = 2;break;\\n                        };\\n                        if (B2 > Ip) {\\n                            score -= A + B1;state = 7;break;\\n                        };\\n                        {\\n                            Scores[x] = 0;return;\\n                        }\\n\\n                    case 2:\\n                        if (A > Ip) {\\n                            Scores[x] = 0;return;\\n                        }\\n                        B1 = B2;b++;B2 = I[x + dirs[b]];\\n                        if (A < Im) {\\n                            if (B2 > Ip) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            {\\n                                score -= A + B1;state = 4;break;\\n                            };\\n                        }\\n                        // A ~ I0\\n                        if (B2 > Ip) {\\n                            score -= A + B1;state = 7;break;\\n                        };\\n                        if (B2 < Im) {\\n                            score -= A + B1;state = 2;break;\\n                        };\\n                        {\\n                            Scores[x] = 0;return;\\n                        } // A ~ I0, B2 ~ I0\\n\\n                    case 3:\\n                        if (A < Im) {\\n                            Scores[x] = 0;return;\\n                        }\\n                        B1 = B2;b++;B2 = I[x + dirs[b]];\\n                        if (A > Ip) {\\n                            if (B2 < Im) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            {\\n                                score -= A + B1;state = 5;break;\\n                            };\\n                        }\\n                        // A ~ I0\\n                        if (B2 > Ip) {\\n                            score -= A + B1;state = 3;break;\\n                        };\\n                        if (B2 < Im) {\\n                            score -= A + B1;state = 6;break;\\n                        };\\n                        {\\n                            Scores[x] = 0;return;\\n                        }\\n\\n                    case 4:\\n                        if (A > Ip) {\\n                            Scores[x] = 0;return;\\n                        }\\n                        if (A < Im) {\\n                            B1 = B2;b++;B2 = I[x + dirs[b]];\\n                            if (B2 > Ip) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            {\\n                                score -= A + B1;state = 1;break;\\n                            };\\n                        }\\n                        if (B2 >= Im) {\\n                            Scores[x] = 0;return;\\n                        }\\n                        B1 = B2;b++;B2 = I[x + dirs[b]];\\n                        if (B2 < Im) {\\n                            score -= A + B1;state = 2;break;\\n                        };\\n                        if (B2 > Ip) {\\n                            score -= A + B1;state = 7;break;\\n                        };\\n                        {\\n                            Scores[x] = 0;return;\\n                        }\\n\\n                    case 5:\\n                        if (A < Im) {\\n                            Scores[x] = 0;return;\\n                        }\\n                        if (A > Ip) {\\n                            B1 = B2;b++;B2 = I[x + dirs[b]];\\n                            if (B2 < Im) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            {\\n                                score -= A + B1;state = 0;break;\\n                            };\\n                        }\\n                        // A ~ I0\\n                        if (B2 <= Ip) {\\n                            Scores[x] = 0;return;\\n                        }\\n                        B1 = B2;b++;B2 = I[x + dirs[b]];\\n                        if (B2 > Ip) {\\n                            score -= A + B1;state = 3;break;\\n                        };\\n                        if (B2 < Im) {\\n                            score -= A + B1;state = 6;break;\\n                        };\\n                        {\\n                            Scores[x] = 0;return;\\n                        }\\n\\n                    case 7:\\n                        if (A > Ip) {\\n                            Scores[x] = 0;return;\\n                        }\\n                        if (A < Im) {\\n                            Scores[x] = 0;return;\\n                        }\\n                        B1 = B2;b++;B2 = I[x + dirs[b]];\\n                        // A ~ I0\\n                        if (B2 > Ip) {\\n                            score -= A + B1;state = 3;break;\\n                        };\\n                        if (B2 < Im) {\\n                            score -= A + B1;state = 6;break;\\n                        };\\n                        {\\n                            Scores[x] = 0;return;\\n                        } // A ~ I0, B2 ~ I0\\n\\n                    case 6:\\n                        if (A > Ip) {\\n                            Scores[x] = 0;return;\\n                        }\\n                        if (A < Im) {\\n                            Scores[x] = 0;return;\\n                        }\\n                        B1 = B2;b++;B2 = I[x + dirs[b]];\\n                        // A ~ I0\\n                        if (B2 < Im) {\\n                            score -= A + B1;state = 2;break;\\n                        };\\n                        if (B2 > Ip) {\\n                            score -= A + B1;state = 7;break;\\n                        };\\n                        {\\n                            Scores[x] = 0;return;\\n                        } // A ~ I0, B2 ~ I0\\n\\n                    case 8:\\n                        if (A > Ip) {\\n                            if (B2 < Im) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            B1 = B2;b++;B2 = I[x + dirs[b]];\\n                            if (B2 < Im) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            {\\n                                score -= A + B1;state = 9;break;\\n                            };\\n                        }\\n                        if (A < Im) {\\n                            B1 = B2;b++;B2 = I[x + dirs[b]];\\n                            if (B2 > Ip) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            {\\n                                score -= A + B1;state = 1;break;\\n                            };\\n                        }\\n                        {\\n                            Scores[x] = 0;return;\\n                        }\\n\\n                    case 9:\\n                        if (A < Im) {\\n                            if (B2 > Ip) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            B1 = B2;b++;B2 = I[x + dirs[b]];\\n                            if (B2 > Ip) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            {\\n                                score -= A + B1;state = 8;break;\\n                            };\\n                        }\\n                        if (A > Ip) {\\n                            B1 = B2;b++;B2 = I[x + dirs[b]];\\n                            if (B2 < Im) {\\n                                Scores[x] = 0;return;\\n                            }\\n                            {\\n                                score -= A + B1;state = 0;break;\\n                            };\\n                        }\\n                        {\\n                            Scores[x] = 0;return;\\n                        }\\n\\n                    default:\\n                        //\\\"PB default\\\";\\n                        break;\\n                } // switch(state)\\n            } // for(a...)\\n\\n            Scores[x] = score + dirs_nb * I[x];\\n        };\\n\\n        var lev_table_t = function () {\\n            function lev_table_t(w, h, r) {\\n                this.dirs = new Int32Array(1024);\\n                this.dirs_count = precompute_directions(w, this.dirs, r) | 0;\\n                this.scores = new Int32Array(w * h);\\n                this.radius = r | 0;\\n            }\\n            return lev_table_t;\\n        }();\\n\\n        return {\\n\\n            level_tables: [],\\n            tau: 7,\\n\\n            init: function init(width, height, radius, pyramid_levels) {\\n                if (typeof pyramid_levels === \\\"undefined\\\") {\\n                    pyramid_levels = 1;\\n                }\\n                var i;\\n                radius = Math.min(radius, 7);\\n                radius = Math.max(radius, 3);\\n                for (i = 0; i < pyramid_levels; ++i) {\\n                    this.level_tables[i] = new lev_table_t(width >> i, height >> i, radius);\\n                }\\n            },\\n\\n            detect: function detect(src, points, border) {\\n                if (typeof border === \\\"undefined\\\") {\\n                    border = 4;\\n                }\\n                var t = this.level_tables[0];\\n                var R = t.radius | 0,\\n                    Rm1 = R - 1 | 0;\\n                var dirs = t.dirs;\\n                var dirs_count = t.dirs_count | 0;\\n                var opposite = dirs_count >> 1;\\n                var img = src.data,\\n                    w = src.cols | 0,\\n                    h = src.rows | 0,\\n                    hw = w >> 1;\\n                var scores = t.scores;\\n                var x = 0,\\n                    y = 0,\\n                    row = 0,\\n                    rowx = 0,\\n                    ip = 0,\\n                    im = 0,\\n                    abs_score = 0,\\n                    score = 0;\\n                var tau = this.tau | 0;\\n                var number_of_points = 0,\\n                    pt;\\n\\n                var sx = Math.max(R + 1, border) | 0;\\n                var sy = Math.max(R + 1, border) | 0;\\n                var ex = Math.min(w - R - 2, w - border) | 0;\\n                var ey = Math.min(h - R - 2, h - border) | 0;\\n\\n                row = sy * w + sx | 0;\\n                for (y = sy; y < ey; ++y, row += w) {\\n                    for (x = sx, rowx = row; x < ex; ++x, ++rowx) {\\n                        ip = img[rowx] + tau, im = img[rowx] - tau;\\n\\n                        if (im < img[rowx + R] && img[rowx + R] < ip && im < img[rowx - R] && img[rowx - R] < ip) {\\n                            scores[rowx] = 0;\\n                        } else {\\n                            perform_one_point(img, rowx, scores, im, ip, dirs, opposite, dirs_count);\\n                        }\\n                    }\\n                }\\n\\n                // local maxima\\n                row = sy * w + sx | 0;\\n                for (y = sy; y < ey; ++y, row += w) {\\n                    for (x = sx, rowx = row; x < ex; ++x, ++rowx) {\\n                        score = scores[rowx];\\n                        abs_score = Math.abs(score);\\n                        if (abs_score < 5) {\\n                            // if this pixel is 0, the next one will not be good enough. Skip it.\\n                            ++x, ++rowx;\\n                        } else {\\n                            if (third_check(scores, rowx, w) >= 3 && is_local_maxima(scores, rowx, score, hw, R)) {\\n                                pt = points[number_of_points];\\n                                pt.x = x, pt.y = y, pt.score = abs_score;\\n                                ++number_of_points;\\n\\n                                x += Rm1, rowx += Rm1;\\n                            }\\n                        }\\n                    }\\n                }\\n\\n                return number_of_points;\\n            }\\n        };\\n    }();\\n\\n    global.yape = yape;\\n})(jsfeat);\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n *\\r\\n * Original implementation derived from OpenCV,\\r\\n * @authors Ethan Rublee, Vincent Rabaud, Gary Bradski\\r\\n */\\n\\n(function (global) {\\n    \\\"use strict\\\";\\n    //\\n\\n    var orb = function () {\\n\\n        var bit_pattern_31_ = new Int32Array([8, -3, 9, 5 /*mean (0), correlation (0)*/\\n        , 4, 2, 7, -12 /*mean (1.12461e-05), correlation (0.0437584)*/\\n        , -11, 9, -8, 2 /*mean (3.37382e-05), correlation (0.0617409)*/\\n        , 7, -12, 12, -13 /*mean (5.62303e-05), correlation (0.0636977)*/\\n        , 2, -13, 2, 12 /*mean (0.000134953), correlation (0.085099)*/\\n        , 1, -7, 1, 6 /*mean (0.000528565), correlation (0.0857175)*/\\n        , -2, -10, -2, -4 /*mean (0.0188821), correlation (0.0985774)*/\\n        , -13, -13, -11, -8 /*mean (0.0363135), correlation (0.0899616)*/\\n        , -13, -3, -12, -9 /*mean (0.121806), correlation (0.099849)*/\\n        , 10, 4, 11, 9 /*mean (0.122065), correlation (0.093285)*/\\n        , -13, -8, -8, -9 /*mean (0.162787), correlation (0.0942748)*/\\n        , -11, 7, -9, 12 /*mean (0.21561), correlation (0.0974438)*/\\n        , 7, 7, 12, 6 /*mean (0.160583), correlation (0.130064)*/\\n        , -4, -5, -3, 0 /*mean (0.228171), correlation (0.132998)*/\\n        , -13, 2, -12, -3 /*mean (0.00997526), correlation (0.145926)*/\\n        , -9, 0, -7, 5 /*mean (0.198234), correlation (0.143636)*/\\n        , 12, -6, 12, -1 /*mean (0.0676226), correlation (0.16689)*/\\n        , -3, 6, -2, 12 /*mean (0.166847), correlation (0.171682)*/\\n        , -6, -13, -4, -8 /*mean (0.101215), correlation (0.179716)*/\\n        , 11, -13, 12, -8 /*mean (0.200641), correlation (0.192279)*/\\n        , 4, 7, 5, 1 /*mean (0.205106), correlation (0.186848)*/\\n        , 5, -3, 10, -3 /*mean (0.234908), correlation (0.192319)*/\\n        , 3, -7, 6, 12 /*mean (0.0709964), correlation (0.210872)*/\\n        , -8, -7, -6, -2 /*mean (0.0939834), correlation (0.212589)*/\\n        , -2, 11, -1, -10 /*mean (0.127778), correlation (0.20866)*/\\n        , -13, 12, -8, 10 /*mean (0.14783), correlation (0.206356)*/\\n        , -7, 3, -5, -3 /*mean (0.182141), correlation (0.198942)*/\\n        , -4, 2, -3, 7 /*mean (0.188237), correlation (0.21384)*/\\n        , -10, -12, -6, 11 /*mean (0.14865), correlation (0.23571)*/\\n        , 5, -12, 6, -7 /*mean (0.222312), correlation (0.23324)*/\\n        , 5, -6, 7, -1 /*mean (0.229082), correlation (0.23389)*/\\n        , 1, 0, 4, -5 /*mean (0.241577), correlation (0.215286)*/\\n        , 9, 11, 11, -13 /*mean (0.00338507), correlation (0.251373)*/\\n        , 4, 7, 4, 12 /*mean (0.131005), correlation (0.257622)*/\\n        , 2, -1, 4, 4 /*mean (0.152755), correlation (0.255205)*/\\n        , -4, -12, -2, 7 /*mean (0.182771), correlation (0.244867)*/\\n        , -8, -5, -7, -10 /*mean (0.186898), correlation (0.23901)*/\\n        , 4, 11, 9, 12 /*mean (0.226226), correlation (0.258255)*/\\n        , 0, -8, 1, -13 /*mean (0.0897886), correlation (0.274827)*/\\n        , -13, -2, -8, 2 /*mean (0.148774), correlation (0.28065)*/\\n        , -3, -2, -2, 3 /*mean (0.153048), correlation (0.283063)*/\\n        , -6, 9, -4, -9 /*mean (0.169523), correlation (0.278248)*/\\n        , 8, 12, 10, 7 /*mean (0.225337), correlation (0.282851)*/\\n        , 0, 9, 1, 3 /*mean (0.226687), correlation (0.278734)*/\\n        , 7, -5, 11, -10 /*mean (0.00693882), correlation (0.305161)*/\\n        , -13, -6, -11, 0 /*mean (0.0227283), correlation (0.300181)*/\\n        , 10, 7, 12, 1 /*mean (0.125517), correlation (0.31089)*/\\n        , -6, -3, -6, 12 /*mean (0.131748), correlation (0.312779)*/\\n        , 10, -9, 12, -4 /*mean (0.144827), correlation (0.292797)*/\\n        , -13, 8, -8, -12 /*mean (0.149202), correlation (0.308918)*/\\n        , -13, 0, -8, -4 /*mean (0.160909), correlation (0.310013)*/\\n        , 3, 3, 7, 8 /*mean (0.177755), correlation (0.309394)*/\\n        , 5, 7, 10, -7 /*mean (0.212337), correlation (0.310315)*/\\n        , -1, 7, 1, -12 /*mean (0.214429), correlation (0.311933)*/\\n        , 3, -10, 5, 6 /*mean (0.235807), correlation (0.313104)*/\\n        , 2, -4, 3, -10 /*mean (0.00494827), correlation (0.344948)*/\\n        , -13, 0, -13, 5 /*mean (0.0549145), correlation (0.344675)*/\\n        , -13, -7, -12, 12 /*mean (0.103385), correlation (0.342715)*/\\n        , -13, 3, -11, 8 /*mean (0.134222), correlation (0.322922)*/\\n        , -7, 12, -4, 7 /*mean (0.153284), correlation (0.337061)*/\\n        , 6, -10, 12, 8 /*mean (0.154881), correlation (0.329257)*/\\n        , -9, -1, -7, -6 /*mean (0.200967), correlation (0.33312)*/\\n        , -2, -5, 0, 12 /*mean (0.201518), correlation (0.340635)*/\\n        , -12, 5, -7, 5 /*mean (0.207805), correlation (0.335631)*/\\n        , 3, -10, 8, -13 /*mean (0.224438), correlation (0.34504)*/\\n        , -7, -7, -4, 5 /*mean (0.239361), correlation (0.338053)*/\\n        , -3, -2, -1, -7 /*mean (0.240744), correlation (0.344322)*/\\n        , 2, 9, 5, -11 /*mean (0.242949), correlation (0.34145)*/\\n        , -11, -13, -5, -13 /*mean (0.244028), correlation (0.336861)*/\\n        , -1, 6, 0, -1 /*mean (0.247571), correlation (0.343684)*/\\n        , 5, -3, 5, 2 /*mean (0.000697256), correlation (0.357265)*/\\n        , -4, -13, -4, 12 /*mean (0.00213675), correlation (0.373827)*/\\n        , -9, -6, -9, 6 /*mean (0.0126856), correlation (0.373938)*/\\n        , -12, -10, -8, -4 /*mean (0.0152497), correlation (0.364237)*/\\n        , 10, 2, 12, -3 /*mean (0.0299933), correlation (0.345292)*/\\n        , 7, 12, 12, 12 /*mean (0.0307242), correlation (0.366299)*/\\n        , -7, -13, -6, 5 /*mean (0.0534975), correlation (0.368357)*/\\n        , -4, 9, -3, 4 /*mean (0.099865), correlation (0.372276)*/\\n        , 7, -1, 12, 2 /*mean (0.117083), correlation (0.364529)*/\\n        , -7, 6, -5, 1 /*mean (0.126125), correlation (0.369606)*/\\n        , -13, 11, -12, 5 /*mean (0.130364), correlation (0.358502)*/\\n        , -3, 7, -2, -6 /*mean (0.131691), correlation (0.375531)*/\\n        , 7, -8, 12, -7 /*mean (0.160166), correlation (0.379508)*/\\n        , -13, -7, -11, -12 /*mean (0.167848), correlation (0.353343)*/\\n        , 1, -3, 12, 12 /*mean (0.183378), correlation (0.371916)*/\\n        , 2, -6, 3, 0 /*mean (0.228711), correlation (0.371761)*/\\n        , -4, 3, -2, -13 /*mean (0.247211), correlation (0.364063)*/\\n        , -1, -13, 1, 9 /*mean (0.249325), correlation (0.378139)*/\\n        , 7, 1, 8, -6 /*mean (0.000652272), correlation (0.411682)*/\\n        , 1, -1, 3, 12 /*mean (0.00248538), correlation (0.392988)*/\\n        , 9, 1, 12, 6 /*mean (0.0206815), correlation (0.386106)*/\\n        , -1, -9, -1, 3 /*mean (0.0364485), correlation (0.410752)*/\\n        , -13, -13, -10, 5 /*mean (0.0376068), correlation (0.398374)*/\\n        , 7, 7, 10, 12 /*mean (0.0424202), correlation (0.405663)*/\\n        , 12, -5, 12, 9 /*mean (0.0942645), correlation (0.410422)*/\\n        , 6, 3, 7, 11 /*mean (0.1074), correlation (0.413224)*/\\n        , 5, -13, 6, 10 /*mean (0.109256), correlation (0.408646)*/\\n        , 2, -12, 2, 3 /*mean (0.131691), correlation (0.416076)*/\\n        , 3, 8, 4, -6 /*mean (0.165081), correlation (0.417569)*/\\n        , 2, 6, 12, -13 /*mean (0.171874), correlation (0.408471)*/\\n        , 9, -12, 10, 3 /*mean (0.175146), correlation (0.41296)*/\\n        , -8, 4, -7, 9 /*mean (0.183682), correlation (0.402956)*/\\n        , -11, 12, -4, -6 /*mean (0.184672), correlation (0.416125)*/\\n        , 1, 12, 2, -8 /*mean (0.191487), correlation (0.386696)*/\\n        , 6, -9, 7, -4 /*mean (0.192668), correlation (0.394771)*/\\n        , 2, 3, 3, -2 /*mean (0.200157), correlation (0.408303)*/\\n        , 6, 3, 11, 0 /*mean (0.204588), correlation (0.411762)*/\\n        , 3, -3, 8, -8 /*mean (0.205904), correlation (0.416294)*/\\n        , 7, 8, 9, 3 /*mean (0.213237), correlation (0.409306)*/\\n        , -11, -5, -6, -4 /*mean (0.243444), correlation (0.395069)*/\\n        , -10, 11, -5, 10 /*mean (0.247672), correlation (0.413392)*/\\n        , -5, -8, -3, 12 /*mean (0.24774), correlation (0.411416)*/\\n        , -10, 5, -9, 0 /*mean (0.00213675), correlation (0.454003)*/\\n        , 8, -1, 12, -6 /*mean (0.0293635), correlation (0.455368)*/\\n        , 4, -6, 6, -11 /*mean (0.0404971), correlation (0.457393)*/\\n        , -10, 12, -8, 7 /*mean (0.0481107), correlation (0.448364)*/\\n        , 4, -2, 6, 7 /*mean (0.050641), correlation (0.455019)*/\\n        , -2, 0, -2, 12 /*mean (0.0525978), correlation (0.44338)*/\\n        , -5, -8, -5, 2 /*mean (0.0629667), correlation (0.457096)*/\\n        , 7, -6, 10, 12 /*mean (0.0653846), correlation (0.445623)*/\\n        , -9, -13, -8, -8 /*mean (0.0858749), correlation (0.449789)*/\\n        , -5, -13, -5, -2 /*mean (0.122402), correlation (0.450201)*/\\n        , 8, -8, 9, -13 /*mean (0.125416), correlation (0.453224)*/\\n        , -9, -11, -9, 0 /*mean (0.130128), correlation (0.458724)*/\\n        , 1, -8, 1, -2 /*mean (0.132467), correlation (0.440133)*/\\n        , 7, -4, 9, 1 /*mean (0.132692), correlation (0.454)*/\\n        , -2, 1, -1, -4 /*mean (0.135695), correlation (0.455739)*/\\n        , 11, -6, 12, -11 /*mean (0.142904), correlation (0.446114)*/\\n        , -12, -9, -6, 4 /*mean (0.146165), correlation (0.451473)*/\\n        , 3, 7, 7, 12 /*mean (0.147627), correlation (0.456643)*/\\n        , 5, 5, 10, 8 /*mean (0.152901), correlation (0.455036)*/\\n        , 0, -4, 2, 8 /*mean (0.167083), correlation (0.459315)*/\\n        , -9, 12, -5, -13 /*mean (0.173234), correlation (0.454706)*/\\n        , 0, 7, 2, 12 /*mean (0.18312), correlation (0.433855)*/\\n        , -1, 2, 1, 7 /*mean (0.185504), correlation (0.443838)*/\\n        , 5, 11, 7, -9 /*mean (0.185706), correlation (0.451123)*/\\n        , 3, 5, 6, -8 /*mean (0.188968), correlation (0.455808)*/\\n        , -13, -4, -8, 9 /*mean (0.191667), correlation (0.459128)*/\\n        , -5, 9, -3, -3 /*mean (0.193196), correlation (0.458364)*/\\n        , -4, -7, -3, -12 /*mean (0.196536), correlation (0.455782)*/\\n        , 6, 5, 8, 0 /*mean (0.1972), correlation (0.450481)*/\\n        , -7, 6, -6, 12 /*mean (0.199438), correlation (0.458156)*/\\n        , -13, 6, -5, -2 /*mean (0.211224), correlation (0.449548)*/\\n        , 1, -10, 3, 10 /*mean (0.211718), correlation (0.440606)*/\\n        , 4, 1, 8, -4 /*mean (0.213034), correlation (0.443177)*/\\n        , -2, -2, 2, -13 /*mean (0.234334), correlation (0.455304)*/\\n        , 2, -12, 12, 12 /*mean (0.235684), correlation (0.443436)*/\\n        , -2, -13, 0, -6 /*mean (0.237674), correlation (0.452525)*/\\n        , 4, 1, 9, 3 /*mean (0.23962), correlation (0.444824)*/\\n        , -6, -10, -3, -5 /*mean (0.248459), correlation (0.439621)*/\\n        , -3, -13, -1, 1 /*mean (0.249505), correlation (0.456666)*/\\n        , 7, 5, 12, -11 /*mean (0.00119208), correlation (0.495466)*/\\n        , 4, -2, 5, -7 /*mean (0.00372245), correlation (0.484214)*/\\n        , -13, 9, -9, -5 /*mean (0.00741116), correlation (0.499854)*/\\n        , 7, 1, 8, 6 /*mean (0.0208952), correlation (0.499773)*/\\n        , 7, -8, 7, 6 /*mean (0.0220085), correlation (0.501609)*/\\n        , -7, -4, -7, 1 /*mean (0.0233806), correlation (0.496568)*/\\n        , -8, 11, -7, -8 /*mean (0.0236505), correlation (0.489719)*/\\n        , -13, 6, -12, -8 /*mean (0.0268781), correlation (0.503487)*/\\n        , 2, 4, 3, 9 /*mean (0.0323324), correlation (0.501938)*/\\n        , 10, -5, 12, 3 /*mean (0.0399235), correlation (0.494029)*/\\n        , -6, -5, -6, 7 /*mean (0.0420153), correlation (0.486579)*/\\n        , 8, -3, 9, -8 /*mean (0.0548021), correlation (0.484237)*/\\n        , 2, -12, 2, 8 /*mean (0.0616622), correlation (0.496642)*/\\n        , -11, -2, -10, 3 /*mean (0.0627755), correlation (0.498563)*/\\n        , -12, -13, -7, -9 /*mean (0.0829622), correlation (0.495491)*/\\n        , -11, 0, -10, -5 /*mean (0.0843342), correlation (0.487146)*/\\n        , 5, -3, 11, 8 /*mean (0.0929937), correlation (0.502315)*/\\n        , -2, -13, -1, 12 /*mean (0.113327), correlation (0.48941)*/\\n        , -1, -8, 0, 9 /*mean (0.132119), correlation (0.467268)*/\\n        , -13, -11, -12, -5 /*mean (0.136269), correlation (0.498771)*/\\n        , -10, -2, -10, 11 /*mean (0.142173), correlation (0.498714)*/\\n        , -3, 9, -2, -13 /*mean (0.144141), correlation (0.491973)*/\\n        , 2, -3, 3, 2 /*mean (0.14892), correlation (0.500782)*/\\n        , -9, -13, -4, 0 /*mean (0.150371), correlation (0.498211)*/\\n        , -4, 6, -3, -10 /*mean (0.152159), correlation (0.495547)*/\\n        , -4, 12, -2, -7 /*mean (0.156152), correlation (0.496925)*/\\n        , -6, -11, -4, 9 /*mean (0.15749), correlation (0.499222)*/\\n        , 6, -3, 6, 11 /*mean (0.159211), correlation (0.503821)*/\\n        , -13, 11, -5, 5 /*mean (0.162427), correlation (0.501907)*/\\n        , 11, 11, 12, 6 /*mean (0.16652), correlation (0.497632)*/\\n        , 7, -5, 12, -2 /*mean (0.169141), correlation (0.484474)*/\\n        , -1, 12, 0, 7 /*mean (0.169456), correlation (0.495339)*/\\n        , -4, -8, -3, -2 /*mean (0.171457), correlation (0.487251)*/\\n        , -7, 1, -6, 7 /*mean (0.175), correlation (0.500024)*/\\n        , -13, -12, -8, -13 /*mean (0.175866), correlation (0.497523)*/\\n        , -7, -2, -6, -8 /*mean (0.178273), correlation (0.501854)*/\\n        , -8, 5, -6, -9 /*mean (0.181107), correlation (0.494888)*/\\n        , -5, -1, -4, 5 /*mean (0.190227), correlation (0.482557)*/\\n        , -13, 7, -8, 10 /*mean (0.196739), correlation (0.496503)*/\\n        , 1, 5, 5, -13 /*mean (0.19973), correlation (0.499759)*/\\n        , 1, 0, 10, -13 /*mean (0.204465), correlation (0.49873)*/\\n        , 9, 12, 10, -1 /*mean (0.209334), correlation (0.49063)*/\\n        , 5, -8, 10, -9 /*mean (0.211134), correlation (0.503011)*/\\n        , -1, 11, 1, -13 /*mean (0.212), correlation (0.499414)*/\\n        , -9, -3, -6, 2 /*mean (0.212168), correlation (0.480739)*/\\n        , -1, -10, 1, 12 /*mean (0.212731), correlation (0.502523)*/\\n        , -13, 1, -8, -10 /*mean (0.21327), correlation (0.489786)*/\\n        , 8, -11, 10, -6 /*mean (0.214159), correlation (0.488246)*/\\n        , 2, -13, 3, -6 /*mean (0.216993), correlation (0.50287)*/\\n        , 7, -13, 12, -9 /*mean (0.223639), correlation (0.470502)*/\\n        , -10, -10, -5, -7 /*mean (0.224089), correlation (0.500852)*/\\n        , -10, -8, -8, -13 /*mean (0.228666), correlation (0.502629)*/\\n        , 4, -6, 8, 5 /*mean (0.22906), correlation (0.498305)*/\\n        , 3, 12, 8, -13 /*mean (0.233378), correlation (0.503825)*/\\n        , -4, 2, -3, -3 /*mean (0.234323), correlation (0.476692)*/\\n        , 5, -13, 10, -12 /*mean (0.236392), correlation (0.475462)*/\\n        , 4, -13, 5, -1 /*mean (0.236842), correlation (0.504132)*/\\n        , -9, 9, -4, 3 /*mean (0.236977), correlation (0.497739)*/\\n        , 0, 3, 3, -9 /*mean (0.24314), correlation (0.499398)*/\\n        , -12, 1, -6, 1 /*mean (0.243297), correlation (0.489447)*/\\n        , 3, 2, 4, -8 /*mean (0.00155196), correlation (0.553496)*/\\n        , -10, -10, -10, 9 /*mean (0.00239541), correlation (0.54297)*/\\n        , 8, -13, 12, 12 /*mean (0.0034413), correlation (0.544361)*/\\n        , -8, -12, -6, -5 /*mean (0.003565), correlation (0.551225)*/\\n        , 2, 2, 3, 7 /*mean (0.00835583), correlation (0.55285)*/\\n        , 10, 6, 11, -8 /*mean (0.00885065), correlation (0.540913)*/\\n        , 6, 8, 8, -12 /*mean (0.0101552), correlation (0.551085)*/\\n        , -7, 10, -6, 5 /*mean (0.0102227), correlation (0.533635)*/\\n        , -3, -9, -3, 9 /*mean (0.0110211), correlation (0.543121)*/\\n        , -1, -13, -1, 5 /*mean (0.0113473), correlation (0.550173)*/\\n        , -3, -7, -3, 4 /*mean (0.0140913), correlation (0.554774)*/\\n        , -8, -2, -8, 3 /*mean (0.017049), correlation (0.55461)*/\\n        , 4, 2, 12, 12 /*mean (0.01778), correlation (0.546921)*/\\n        , 2, -5, 3, 11 /*mean (0.0224022), correlation (0.549667)*/\\n        , 6, -9, 11, -13 /*mean (0.029161), correlation (0.546295)*/\\n        , 3, -1, 7, 12 /*mean (0.0303081), correlation (0.548599)*/\\n        , 11, -1, 12, 4 /*mean (0.0355151), correlation (0.523943)*/\\n        , -3, 0, -3, 6 /*mean (0.0417904), correlation (0.543395)*/\\n        , 4, -11, 4, 12 /*mean (0.0487292), correlation (0.542818)*/\\n        , 2, -4, 2, 1 /*mean (0.0575124), correlation (0.554888)*/\\n        , -10, -6, -8, 1 /*mean (0.0594242), correlation (0.544026)*/\\n        , -13, 7, -11, 1 /*mean (0.0597391), correlation (0.550524)*/\\n        , -13, 12, -11, -13 /*mean (0.0608974), correlation (0.55383)*/\\n        , 6, 0, 11, -13 /*mean (0.065126), correlation (0.552006)*/\\n        , 0, -1, 1, 4 /*mean (0.074224), correlation (0.546372)*/\\n        , -13, 3, -9, -2 /*mean (0.0808592), correlation (0.554875)*/\\n        , -9, 8, -6, -3 /*mean (0.0883378), correlation (0.551178)*/\\n        , -13, -6, -8, -2 /*mean (0.0901035), correlation (0.548446)*/\\n        , 5, -9, 8, 10 /*mean (0.0949843), correlation (0.554694)*/\\n        , 2, 7, 3, -9 /*mean (0.0994152), correlation (0.550979)*/\\n        , -1, -6, -1, -1 /*mean (0.10045), correlation (0.552714)*/\\n        , 9, 5, 11, -2 /*mean (0.100686), correlation (0.552594)*/\\n        , 11, -3, 12, -8 /*mean (0.101091), correlation (0.532394)*/\\n        , 3, 0, 3, 5 /*mean (0.101147), correlation (0.525576)*/\\n        , -1, 4, 0, 10 /*mean (0.105263), correlation (0.531498)*/\\n        , 3, -6, 4, 5 /*mean (0.110785), correlation (0.540491)*/\\n        , -13, 0, -10, 5 /*mean (0.112798), correlation (0.536582)*/\\n        , 5, 8, 12, 11 /*mean (0.114181), correlation (0.555793)*/\\n        , 8, 9, 9, -6 /*mean (0.117431), correlation (0.553763)*/\\n        , 7, -4, 8, -12 /*mean (0.118522), correlation (0.553452)*/\\n        , -10, 4, -10, 9 /*mean (0.12094), correlation (0.554785)*/\\n        , 7, 3, 12, 4 /*mean (0.122582), correlation (0.555825)*/\\n        , 9, -7, 10, -2 /*mean (0.124978), correlation (0.549846)*/\\n        , 7, 0, 12, -2 /*mean (0.127002), correlation (0.537452)*/\\n        , -1, -6, 0, -11 /*mean (0.127148), correlation (0.547401)*/\\n        ]);\\n\\n        var H = new jsfeat.matrix_t(3, 3, jsfeat.F32_t | jsfeat.C1_t);\\n        var patch_img = new jsfeat.matrix_t(32, 32, jsfeat.U8_t | jsfeat.C1_t);\\n\\n        var rectify_patch = function rectify_patch(src, dst, angle, px, py, psize) {\\n            var cosine = Math.cos(angle);\\n            var sine = Math.sin(angle);\\n\\n            H.data[0] = cosine, H.data[1] = -sine, H.data[2] = (-cosine + sine) * psize * 0.5 + px, H.data[3] = sine, H.data[4] = cosine, H.data[5] = (-sine - cosine) * psize * 0.5 + py;\\n\\n            jsfeat.imgproc.warp_affine(src, dst, H, 128);\\n        };\\n\\n        return {\\n\\n            describe: function describe(src, corners, count, descriptors) {\\n                var DESCR_SIZE = 32; // bytes;\\n                var i = 0,\\n                    b = 0,\\n                    px = 0.0,\\n                    py = 0.0,\\n                    angle = 0.0;\\n                var t0 = 0,\\n                    t1 = 0,\\n                    val = 0;\\n                var img = src.data,\\n                    w = src.cols,\\n                    h = src.rows;\\n                var patch_d = patch_img.data;\\n                var patch_off = 16 * 32 + 16; // center of patch\\n                var patt = 0;\\n\\n                if (!(descriptors.type & jsfeat.U8_t)) {\\n                    // relocate to U8 type\\n                    descriptors.type = jsfeat.U8_t;\\n                    descriptors.cols = DESCR_SIZE;\\n                    descriptors.rows = count;\\n                    descriptors.channel = 1;\\n                    descriptors.allocate();\\n                } else {\\n                    descriptors.resize(DESCR_SIZE, count, 1);\\n                }\\n\\n                var descr_d = descriptors.data;\\n                var descr_off = 0;\\n\\n                for (i = 0; i < count; ++i) {\\n                    px = corners[i].x;\\n                    py = corners[i].y;\\n                    angle = corners[i].angle;\\n\\n                    rectify_patch(src, patch_img, angle, px, py, 32);\\n\\n                    // describe the patch\\n                    patt = 0;\\n                    for (b = 0; b < DESCR_SIZE; ++b) {\\n\\n                        t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        val = t0 < t1 | 0;\\n\\n                        t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        val |= (t0 < t1) << 1;\\n\\n                        t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        val |= (t0 < t1) << 2;\\n\\n                        t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        val |= (t0 < t1) << 3;\\n\\n                        t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        val |= (t0 < t1) << 4;\\n\\n                        t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        val |= (t0 < t1) << 5;\\n\\n                        t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        val |= (t0 < t1) << 6;\\n\\n                        t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];patt += 2;\\n                        val |= (t0 < t1) << 7;\\n\\n                        descr_d[descr_off + b] = val;\\n                    }\\n                    descr_off += DESCR_SIZE;\\n                }\\n            }\\n        };\\n    }();\\n\\n    global.orb = orb;\\n})(jsfeat);\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n *\\r\\n * this code is a rewrite from OpenCV's Lucas-Kanade optical flow implementation\\r\\n */\\n\\n(function (global) {\\n    \\\"use strict\\\";\\n    //\\n\\n    var optical_flow_lk = function () {\\n\\n        // short link to shar deriv\\n        var scharr_deriv = jsfeat.imgproc.scharr_derivatives;\\n\\n        return {\\n            track: function track(prev_pyr, curr_pyr, prev_xy, curr_xy, count, win_size, max_iter, status, eps, min_eigen_threshold) {\\n                if (typeof max_iter === \\\"undefined\\\") {\\n                    max_iter = 30;\\n                }\\n                if (typeof status === \\\"undefined\\\") {\\n                    status = new Uint8Array(count);\\n                }\\n                if (typeof eps === \\\"undefined\\\") {\\n                    eps = 0.01;\\n                }\\n                if (typeof min_eigen_threshold === \\\"undefined\\\") {\\n                    min_eigen_threshold = 0.0001;\\n                }\\n\\n                var half_win = (win_size - 1) * 0.5;\\n                var win_area = win_size * win_size | 0;\\n                var win_area2 = win_area << 1;\\n                var prev_imgs = prev_pyr.data,\\n                    next_imgs = curr_pyr.data;\\n                var img_prev = prev_imgs[0].data,\\n                    img_next = next_imgs[0].data;\\n                var w0 = prev_imgs[0].cols,\\n                    h0 = prev_imgs[0].rows,\\n                    lw = 0,\\n                    lh = 0;\\n\\n                var iwin_node = jsfeat.cache.get_buffer(win_area << 2);\\n                var deriv_iwin_node = jsfeat.cache.get_buffer(win_area2 << 2);\\n                var deriv_lev_node = jsfeat.cache.get_buffer(h0 * (w0 << 1) << 2);\\n\\n                var deriv_m = new jsfeat.matrix_t(w0, h0, jsfeat.S32C2_t, deriv_lev_node.data);\\n\\n                var iwin_buf = iwin_node.i32;\\n                var deriv_iwin = deriv_iwin_node.i32;\\n                var deriv_lev = deriv_lev_node.i32;\\n\\n                var dstep = 0,\\n                    src = 0,\\n                    dsrc = 0,\\n                    iptr = 0,\\n                    diptr = 0,\\n                    jptr = 0;\\n                var lev_sc = 0.0,\\n                    prev_x = 0.0,\\n                    prev_y = 0.0,\\n                    next_x = 0.0,\\n                    next_y = 0.0;\\n                var prev_delta_x = 0.0,\\n                    prev_delta_y = 0.0,\\n                    delta_x = 0.0,\\n                    delta_y = 0.0;\\n                var iprev_x = 0,\\n                    iprev_y = 0,\\n                    inext_x = 0,\\n                    inext_y = 0;\\n                var i = 0,\\n                    j = 0,\\n                    x = 0,\\n                    y = 0,\\n                    level = 0,\\n                    ptid = 0,\\n                    iter = 0;\\n                var brd_tl = 0,\\n                    brd_r = 0,\\n                    brd_b = 0;\\n                var a = 0.0,\\n                    b = 0.0,\\n                    b1 = 0.0,\\n                    b2 = 0.0;\\n\\n                // fixed point math\\n                var W_BITS14 = 14;\\n                var W_BITS4 = 14;\\n                var W_BITS1m5 = W_BITS4 - 5;\\n                var W_BITS1m51 = 1 << W_BITS1m5 - 1;\\n                var W_BITS14_ = 1 << W_BITS14;\\n                var W_BITS41 = 1 << W_BITS4 - 1;\\n                var FLT_SCALE = 1.0 / (1 << 20);\\n                var iw00 = 0,\\n                    iw01 = 0,\\n                    iw10 = 0,\\n                    iw11 = 0,\\n                    ival = 0,\\n                    ixval = 0,\\n                    iyval = 0;\\n                var A11 = 0.0,\\n                    A12 = 0.0,\\n                    A22 = 0.0,\\n                    D = 0.0,\\n                    min_eig = 0.0;\\n\\n                var FLT_EPSILON = 0.00000011920929;\\n                eps *= eps;\\n\\n                // reset status\\n                for (; i < count; ++i) {\\n                    status[i] = 1;\\n                }\\n\\n                var max_level = prev_pyr.levels - 1 | 0;\\n                level = max_level;\\n\\n                for (; level >= 0; --level) {\\n                    lev_sc = 1.0 / (1 << level);\\n                    lw = w0 >> level;\\n                    lh = h0 >> level;\\n                    dstep = lw << 1;\\n                    img_prev = prev_imgs[level].data;\\n                    img_next = next_imgs[level].data;\\n\\n                    brd_r = lw - win_size | 0;\\n                    brd_b = lh - win_size | 0;\\n\\n                    // calculate level derivatives\\n                    scharr_deriv(prev_imgs[level], deriv_m);\\n\\n                    // iterate through points\\n                    for (ptid = 0; ptid < count; ++ptid) {\\n                        i = ptid << 1;\\n                        j = i + 1;\\n                        prev_x = prev_xy[i] * lev_sc;\\n                        prev_y = prev_xy[j] * lev_sc;\\n\\n                        if (level == max_level) {\\n                            next_x = prev_x;\\n                            next_y = prev_y;\\n                        } else {\\n                            next_x = curr_xy[i] * 2.0;\\n                            next_y = curr_xy[j] * 2.0;\\n                        }\\n                        curr_xy[i] = next_x;\\n                        curr_xy[j] = next_y;\\n\\n                        prev_x -= half_win;\\n                        prev_y -= half_win;\\n                        iprev_x = prev_x | 0;\\n                        iprev_y = prev_y | 0;\\n\\n                        // border check\\n                        x = iprev_x <= brd_tl | iprev_x >= brd_r | iprev_y <= brd_tl | iprev_y >= brd_b;\\n                        if (x != 0) {\\n                            if (level == 0) {\\n                                status[ptid] = 0;\\n                            }\\n                            continue;\\n                        }\\n\\n                        a = prev_x - iprev_x;\\n                        b = prev_y - iprev_y;\\n                        iw00 = (1.0 - a) * (1.0 - b) * W_BITS14_ + 0.5 | 0;\\n                        iw01 = a * (1.0 - b) * W_BITS14_ + 0.5 | 0;\\n                        iw10 = (1.0 - a) * b * W_BITS14_ + 0.5 | 0;\\n                        iw11 = W_BITS14_ - iw00 - iw01 - iw10;\\n\\n                        A11 = 0.0, A12 = 0.0, A22 = 0.0;\\n\\n                        // extract the patch from the first image, compute covariation matrix of derivatives\\n                        for (y = 0; y < win_size; ++y) {\\n                            src = (y + iprev_y) * lw + iprev_x | 0;\\n                            dsrc = src << 1;\\n\\n                            iptr = y * win_size | 0;\\n                            diptr = iptr << 1;\\n                            for (x = 0; x < win_size; ++x, ++src, ++iptr, dsrc += 2) {\\n                                ival = img_prev[src] * iw00 + img_prev[src + 1] * iw01 + img_prev[src + lw] * iw10 + img_prev[src + lw + 1] * iw11;\\n                                ival = ival + W_BITS1m51 >> W_BITS1m5;\\n\\n                                ixval = deriv_lev[dsrc] * iw00 + deriv_lev[dsrc + 2] * iw01 + deriv_lev[dsrc + dstep] * iw10 + deriv_lev[dsrc + dstep + 2] * iw11;\\n                                ixval = ixval + W_BITS41 >> W_BITS4;\\n\\n                                iyval = deriv_lev[dsrc + 1] * iw00 + deriv_lev[dsrc + 3] * iw01 + deriv_lev[dsrc + dstep + 1] * iw10 + deriv_lev[dsrc + dstep + 3] * iw11;\\n                                iyval = iyval + W_BITS41 >> W_BITS4;\\n\\n                                iwin_buf[iptr] = ival;\\n                                deriv_iwin[diptr++] = ixval;\\n                                deriv_iwin[diptr++] = iyval;\\n\\n                                A11 += ixval * ixval;\\n                                A12 += ixval * iyval;\\n                                A22 += iyval * iyval;\\n                            }\\n                        }\\n\\n                        A11 *= FLT_SCALE;A12 *= FLT_SCALE;A22 *= FLT_SCALE;\\n\\n                        D = A11 * A22 - A12 * A12;\\n                        min_eig = (A22 + A11 - Math.sqrt((A11 - A22) * (A11 - A22) + 4.0 * A12 * A12)) / win_area2;\\n\\n                        if (min_eig < min_eigen_threshold || D < FLT_EPSILON) {\\n                            if (level == 0) {\\n                                status[ptid] = 0;\\n                            }\\n                            continue;\\n                        }\\n\\n                        D = 1.0 / D;\\n\\n                        next_x -= half_win;\\n                        next_y -= half_win;\\n                        prev_delta_x = 0.0;\\n                        prev_delta_y = 0.0;\\n\\n                        for (iter = 0; iter < max_iter; ++iter) {\\n                            inext_x = next_x | 0;\\n                            inext_y = next_y | 0;\\n\\n                            x = inext_x <= brd_tl | inext_x >= brd_r | inext_y <= brd_tl | inext_y >= brd_b;\\n                            if (x != 0) {\\n                                if (level == 0) {\\n                                    status[ptid] = 0;\\n                                }\\n                                break;\\n                            }\\n\\n                            a = next_x - inext_x;\\n                            b = next_y - inext_y;\\n                            iw00 = (1.0 - a) * (1.0 - b) * W_BITS14_ + 0.5 | 0;\\n                            iw01 = a * (1.0 - b) * W_BITS14_ + 0.5 | 0;\\n                            iw10 = (1.0 - a) * b * W_BITS14_ + 0.5 | 0;\\n                            iw11 = W_BITS14_ - iw00 - iw01 - iw10;\\n                            b1 = 0.0, b2 = 0.0;\\n\\n                            for (y = 0; y < win_size; ++y) {\\n                                jptr = (y + inext_y) * lw + inext_x | 0;\\n\\n                                iptr = y * win_size | 0;\\n                                diptr = iptr << 1;\\n                                for (x = 0; x < win_size; ++x, ++jptr, ++iptr) {\\n                                    ival = img_next[jptr] * iw00 + img_next[jptr + 1] * iw01 + img_next[jptr + lw] * iw10 + img_next[jptr + lw + 1] * iw11;\\n                                    ival = ival + W_BITS1m51 >> W_BITS1m5;\\n                                    ival = ival - iwin_buf[iptr];\\n\\n                                    b1 += ival * deriv_iwin[diptr++];\\n                                    b2 += ival * deriv_iwin[diptr++];\\n                                }\\n                            }\\n\\n                            b1 *= FLT_SCALE;\\n                            b2 *= FLT_SCALE;\\n\\n                            delta_x = (A12 * b2 - A22 * b1) * D;\\n                            delta_y = (A12 * b1 - A11 * b2) * D;\\n\\n                            next_x += delta_x;\\n                            next_y += delta_y;\\n                            curr_xy[i] = next_x + half_win;\\n                            curr_xy[j] = next_y + half_win;\\n\\n                            if (delta_x * delta_x + delta_y * delta_y <= eps) {\\n                                break;\\n                            }\\n\\n                            if (iter > 0 && Math.abs(delta_x + prev_delta_x) < 0.01 && Math.abs(delta_y + prev_delta_y) < 0.01) {\\n                                curr_xy[i] -= delta_x * 0.5;\\n                                curr_xy[j] -= delta_y * 0.5;\\n                                break;\\n                            }\\n\\n                            prev_delta_x = delta_x;\\n                            prev_delta_y = delta_y;\\n                        }\\n                    } // points loop\\n                } // levels loop\\n\\n                jsfeat.cache.put_buffer(iwin_node);\\n                jsfeat.cache.put_buffer(deriv_iwin_node);\\n                jsfeat.cache.put_buffer(deriv_lev_node);\\n            }\\n        };\\n    }();\\n\\n    global.optical_flow_lk = optical_flow_lk;\\n})(jsfeat);\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n *\\r\\n * this code is a rewrite from https://github.com/mtschirs/js-objectdetect implementation\\r\\n * @author Martin Tschirsich / http://www.tu-darmstadt.de/~m_t\\r\\n */\\n\\n(function (global) {\\n    \\\"use strict\\\";\\n    //\\n\\n    var haar = function () {\\n\\n        var _group_func = function _group_func(r1, r2) {\\n            var distance = r1.width * 0.25 + 0.5 | 0;\\n\\n            return r2.x <= r1.x + distance && r2.x >= r1.x - distance && r2.y <= r1.y + distance && r2.y >= r1.y - distance && r2.width <= r1.width * 1.5 + 0.5 | 0 && r2.width * 1.5 + 0.5 | 0 >= r1.width;\\n        };\\n\\n        return {\\n\\n            edges_density: 0.07,\\n\\n            detect_single_scale: function detect_single_scale(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, scale, classifier) {\\n                var win_w = classifier.size[0] * scale | 0,\\n                    win_h = classifier.size[1] * scale | 0,\\n                    step_x = 0.5 * scale + 1.5 | 0,\\n                    step_y = step_x;\\n                var i,\\n                    j,\\n                    k,\\n                    x,\\n                    y,\\n                    ex = width - win_w | 0,\\n                    ey = height - win_h | 0;\\n                var w1 = width + 1 | 0,\\n                    edge_dens,\\n                    mean,\\n                    variance,\\n                    std;\\n                var inv_area = 1.0 / (win_w * win_h);\\n                var stages,\\n                    stage,\\n                    trees,\\n                    tree,\\n                    sn,\\n                    tn,\\n                    fn,\\n                    found = true,\\n                    stage_thresh,\\n                    stage_sum,\\n                    tree_sum,\\n                    feature,\\n                    features;\\n                var fi_a, fi_b, fi_c, fi_d, fw, fh;\\n\\n                var ii_a = 0,\\n                    ii_b = win_w,\\n                    ii_c = win_h * w1,\\n                    ii_d = ii_c + win_w;\\n                var edges_thresh = win_w * win_h * 0xff * this.edges_density | 0;\\n                // if too much gradient we also can skip\\n                //var edges_thresh_high = ((win_w*win_h) * 0xff * 0.3)|0;\\n\\n                var rects = [];\\n                for (y = 0; y < ey; y += step_y) {\\n                    ii_a = y * w1;\\n                    for (x = 0; x < ex; x += step_x, ii_a += step_x) {\\n\\n                        mean = int_sum[ii_a] - int_sum[ii_a + ii_b] - int_sum[ii_a + ii_c] + int_sum[ii_a + ii_d];\\n\\n                        // canny prune\\n                        if (int_canny_sum) {\\n                            edge_dens = int_canny_sum[ii_a] - int_canny_sum[ii_a + ii_b] - int_canny_sum[ii_a + ii_c] + int_canny_sum[ii_a + ii_d];\\n                            if (edge_dens < edges_thresh || mean < 20) {\\n                                x += step_x, ii_a += step_x;\\n                                continue;\\n                            }\\n                        }\\n\\n                        mean *= inv_area;\\n                        variance = (int_sqsum[ii_a] - int_sqsum[ii_a + ii_b] - int_sqsum[ii_a + ii_c] + int_sqsum[ii_a + ii_d]) * inv_area - mean * mean;\\n\\n                        std = variance > 0. ? Math.sqrt(variance) : 1;\\n\\n                        stages = classifier.complexClassifiers;\\n                        sn = stages.length;\\n                        found = true;\\n                        for (i = 0; i < sn; ++i) {\\n                            stage = stages[i];\\n                            stage_thresh = stage.threshold;\\n                            trees = stage.simpleClassifiers;\\n                            tn = trees.length;\\n                            stage_sum = 0;\\n                            for (j = 0; j < tn; ++j) {\\n                                tree = trees[j];\\n                                tree_sum = 0;\\n                                features = tree.features;\\n                                fn = features.length;\\n                                if (tree.tilted === 1) {\\n                                    for (k = 0; k < fn; ++k) {\\n                                        feature = features[k];\\n                                        fi_a = ~~(x + feature[0] * scale) + ~~(y + feature[1] * scale) * w1;\\n                                        fw = ~~(feature[2] * scale);\\n                                        fh = ~~(feature[3] * scale);\\n                                        fi_b = fw * w1;\\n                                        fi_c = fh * w1;\\n\\n                                        tree_sum += (int_tilted[fi_a] - int_tilted[fi_a + fw + fi_b] - int_tilted[fi_a - fh + fi_c] + int_tilted[fi_a + fw - fh + fi_b + fi_c]) * feature[4];\\n                                    }\\n                                } else {\\n                                    for (k = 0; k < fn; ++k) {\\n                                        feature = features[k];\\n                                        fi_a = ~~(x + feature[0] * scale) + ~~(y + feature[1] * scale) * w1;\\n                                        fw = ~~(feature[2] * scale);\\n                                        fh = ~~(feature[3] * scale);\\n                                        fi_c = fh * w1;\\n\\n                                        tree_sum += (int_sum[fi_a] - int_sum[fi_a + fw] - int_sum[fi_a + fi_c] + int_sum[fi_a + fi_c + fw]) * feature[4];\\n                                    }\\n                                }\\n                                stage_sum += tree_sum * inv_area < tree.threshold * std ? tree.left_val : tree.right_val;\\n                            }\\n                            if (stage_sum < stage_thresh) {\\n                                found = false;\\n                                break;\\n                            }\\n                        }\\n\\n                        if (found) {\\n                            rects.push({ \\\"x\\\": x,\\n                                \\\"y\\\": y,\\n                                \\\"width\\\": win_w,\\n                                \\\"height\\\": win_h,\\n                                \\\"neighbor\\\": 1,\\n                                \\\"confidence\\\": stage_sum });\\n                            x += step_x, ii_a += step_x;\\n                        }\\n                    }\\n                }\\n                return rects;\\n            },\\n\\n            detect_multi_scale: function detect_multi_scale(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, classifier, scale_factor, scale_min) {\\n                if (typeof scale_factor === \\\"undefined\\\") {\\n                    scale_factor = 1.2;\\n                }\\n                if (typeof scale_min === \\\"undefined\\\") {\\n                    scale_min = 1.0;\\n                }\\n                var win_w = classifier.size[0];\\n                var win_h = classifier.size[1];\\n                var rects = [];\\n                while (scale_min * win_w < width && scale_min * win_h < height) {\\n                    rects = rects.concat(this.detect_single_scale(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, scale_min, classifier));\\n                    scale_min *= scale_factor;\\n                }\\n                return rects;\\n            },\\n\\n            // OpenCV method to group detected rectangles\\n            group_rectangles: function group_rectangles(rects, min_neighbors) {\\n                if (typeof min_neighbors === \\\"undefined\\\") {\\n                    min_neighbors = 1;\\n                }\\n                var i,\\n                    j,\\n                    n = rects.length;\\n                var node = [];\\n                for (i = 0; i < n; ++i) {\\n                    node[i] = { \\\"parent\\\": -1,\\n                        \\\"element\\\": rects[i],\\n                        \\\"rank\\\": 0 };\\n                }\\n                for (i = 0; i < n; ++i) {\\n                    if (!node[i].element) continue;\\n                    var root = i;\\n                    while (node[root].parent != -1) {\\n                        root = node[root].parent;\\n                    }for (j = 0; j < n; ++j) {\\n                        if (i != j && node[j].element && _group_func(node[i].element, node[j].element)) {\\n                            var root2 = j;\\n\\n                            while (node[root2].parent != -1) {\\n                                root2 = node[root2].parent;\\n                            }if (root2 != root) {\\n                                if (node[root].rank > node[root2].rank) node[root2].parent = root;else {\\n                                    node[root].parent = root2;\\n                                    if (node[root].rank == node[root2].rank) node[root2].rank++;\\n                                    root = root2;\\n                                }\\n\\n                                /* compress path from node2 to the root: */\\n                                var temp,\\n                                    node2 = j;\\n                                while (node[node2].parent != -1) {\\n                                    temp = node2;\\n                                    node2 = node[node2].parent;\\n                                    node[temp].parent = root;\\n                                }\\n\\n                                /* compress path from node to the root: */\\n                                node2 = i;\\n                                while (node[node2].parent != -1) {\\n                                    temp = node2;\\n                                    node2 = node[node2].parent;\\n                                    node[temp].parent = root;\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n                var idx_seq = [];\\n                var class_idx = 0;\\n                for (i = 0; i < n; i++) {\\n                    j = -1;\\n                    var node1 = i;\\n                    if (node[node1].element) {\\n                        while (node[node1].parent != -1) {\\n                            node1 = node[node1].parent;\\n                        }if (node[node1].rank >= 0) node[node1].rank = ~class_idx++;\\n                        j = ~node[node1].rank;\\n                    }\\n                    idx_seq[i] = j;\\n                }\\n\\n                var comps = [];\\n                for (i = 0; i < class_idx + 1; ++i) {\\n                    comps[i] = { \\\"neighbors\\\": 0,\\n                        \\\"x\\\": 0,\\n                        \\\"y\\\": 0,\\n                        \\\"width\\\": 0,\\n                        \\\"height\\\": 0,\\n                        \\\"confidence\\\": 0 };\\n                }\\n\\n                // count number of neighbors\\n                for (i = 0; i < n; ++i) {\\n                    var r1 = rects[i];\\n                    var idx = idx_seq[i];\\n\\n                    if (comps[idx].neighbors == 0) comps[idx].confidence = r1.confidence;\\n\\n                    ++comps[idx].neighbors;\\n\\n                    comps[idx].x += r1.x;\\n                    comps[idx].y += r1.y;\\n                    comps[idx].width += r1.width;\\n                    comps[idx].height += r1.height;\\n                    comps[idx].confidence = Math.max(comps[idx].confidence, r1.confidence);\\n                }\\n\\n                var seq2 = [];\\n                // calculate average bounding box\\n                for (i = 0; i < class_idx; ++i) {\\n                    n = comps[i].neighbors;\\n                    if (n >= min_neighbors) seq2.push({ \\\"x\\\": (comps[i].x * 2 + n) / (2 * n),\\n                        \\\"y\\\": (comps[i].y * 2 + n) / (2 * n),\\n                        \\\"width\\\": (comps[i].width * 2 + n) / (2 * n),\\n                        \\\"height\\\": (comps[i].height * 2 + n) / (2 * n),\\n                        \\\"neighbors\\\": comps[i].neighbors,\\n                        \\\"confidence\\\": comps[i].confidence });\\n                }\\n\\n                var result_seq = [];\\n                n = seq2.length;\\n                // filter out small face rectangles inside large face rectangles\\n                for (i = 0; i < n; ++i) {\\n                    var r1 = seq2[i];\\n                    var flag = true;\\n                    for (j = 0; j < n; ++j) {\\n                        var r2 = seq2[j];\\n                        var distance = r2.width * 0.25 + 0.5 | 0;\\n\\n                        if (i != j && r1.x >= r2.x - distance && r1.y >= r2.y - distance && r1.x + r1.width <= r2.x + r2.width + distance && r1.y + r1.height <= r2.y + r2.height + distance && (r2.neighbors > Math.max(3, r1.neighbors) || r1.neighbors < 3)) {\\n                            flag = false;\\n                            break;\\n                        }\\n                    }\\n\\n                    if (flag) result_seq.push(r1);\\n                }\\n                return result_seq;\\n            }\\n        };\\n    }();\\n\\n    global.haar = haar;\\n})(jsfeat);\\n/**\\r\\n * BBF: Brightness Binary Feature\\r\\n *\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n *\\r\\n * this code is a rewrite from https://github.com/liuliu/ccv implementation\\r\\n * @author Liu Liu / http://liuliu.me/\\r\\n *\\r\\n * The original paper refers to: YEF∗ Real-Time Object Detection, Yotam Abramson and Bruno Steux\\r\\n */\\n\\n(function (global) {\\n    \\\"use strict\\\";\\n    //\\n\\n    var bbf = function () {\\n\\n        var _group_func = function _group_func(r1, r2) {\\n            var distance = r1.width * 0.25 + 0.5 | 0;\\n\\n            return r2.x <= r1.x + distance && r2.x >= r1.x - distance && r2.y <= r1.y + distance && r2.y >= r1.y - distance && r2.width <= r1.width * 1.5 + 0.5 | 0 && r2.width * 1.5 + 0.5 | 0 >= r1.width;\\n        };\\n\\n        var img_pyr = new jsfeat.pyramid_t(1);\\n\\n        return {\\n\\n            interval: 4,\\n            scale: 1.1486,\\n            next: 5,\\n            scale_to: 1,\\n\\n            // make features local copy\\n            // to avoid array allocation with each scale\\n            // this is strange but array works faster than Int32 version???\\n            prepare_cascade: function prepare_cascade(cascade) {\\n                var sn = cascade.stage_classifier.length;\\n                for (var j = 0; j < sn; j++) {\\n                    var orig_feature = cascade.stage_classifier[j].feature;\\n                    var f_cnt = cascade.stage_classifier[j].count;\\n                    var feature = cascade.stage_classifier[j]._feature = new Array(f_cnt);\\n                    for (var k = 0; k < f_cnt; k++) {\\n                        feature[k] = { \\\"size\\\": orig_feature[k].size,\\n                            \\\"px\\\": new Array(orig_feature[k].size),\\n                            \\\"pz\\\": new Array(orig_feature[k].size),\\n                            \\\"nx\\\": new Array(orig_feature[k].size),\\n                            \\\"nz\\\": new Array(orig_feature[k].size) };\\n                    }\\n                }\\n            },\\n\\n            build_pyramid: function build_pyramid(src, min_width, min_height, interval) {\\n                if (typeof interval === \\\"undefined\\\") {\\n                    interval = 4;\\n                }\\n\\n                var sw = src.cols,\\n                    sh = src.rows;\\n                var i = 0,\\n                    nw = 0,\\n                    nh = 0;\\n                var new_pyr = false;\\n                var src0 = src,\\n                    src1 = src;\\n                var data_type = jsfeat.U8_t | jsfeat.C1_t;\\n\\n                this.interval = interval;\\n                this.scale = Math.pow(2, 1 / (this.interval + 1));\\n                this.next = this.interval + 1 | 0;\\n                this.scale_to = Math.log(Math.min(sw / min_width, sh / min_height)) / Math.log(this.scale) | 0;\\n\\n                var pyr_l = (this.scale_to + this.next * 2) * 4 | 0;\\n                if (img_pyr.levels != pyr_l) {\\n                    img_pyr.levels = pyr_l;\\n                    img_pyr.data = new Array(pyr_l);\\n                    new_pyr = true;\\n                    img_pyr.data[0] = src; // first is src\\n                }\\n\\n                for (i = 1; i <= this.interval; ++i) {\\n                    nw = sw / Math.pow(this.scale, i) | 0;\\n                    nh = sh / Math.pow(this.scale, i) | 0;\\n                    src0 = img_pyr.data[i << 2];\\n                    if (new_pyr || nw != src0.cols || nh != src0.rows) {\\n                        img_pyr.data[i << 2] = new jsfeat.matrix_t(nw, nh, data_type);\\n                        src0 = img_pyr.data[i << 2];\\n                    }\\n                    jsfeat.imgproc.resample(src, src0, nw, nh);\\n                }\\n                for (i = this.next; i < this.scale_to + this.next * 2; ++i) {\\n                    src1 = img_pyr.data[(i << 2) - (this.next << 2)];\\n                    src0 = img_pyr.data[i << 2];\\n                    nw = src1.cols >> 1;\\n                    nh = src1.rows >> 1;\\n                    if (new_pyr || nw != src0.cols || nh != src0.rows) {\\n                        img_pyr.data[i << 2] = new jsfeat.matrix_t(nw, nh, data_type);\\n                        src0 = img_pyr.data[i << 2];\\n                    }\\n                    jsfeat.imgproc.pyrdown(src1, src0);\\n                }\\n                for (i = this.next * 2; i < this.scale_to + this.next * 2; ++i) {\\n                    src1 = img_pyr.data[(i << 2) - (this.next << 2)];\\n                    nw = src1.cols >> 1;\\n                    nh = src1.rows >> 1;\\n                    src0 = img_pyr.data[(i << 2) + 1];\\n                    if (new_pyr || nw != src0.cols || nh != src0.rows) {\\n                        img_pyr.data[(i << 2) + 1] = new jsfeat.matrix_t(nw, nh, data_type);\\n                        src0 = img_pyr.data[(i << 2) + 1];\\n                    }\\n                    jsfeat.imgproc.pyrdown(src1, src0, 1, 0);\\n                    //\\n                    src0 = img_pyr.data[(i << 2) + 2];\\n                    if (new_pyr || nw != src0.cols || nh != src0.rows) {\\n                        img_pyr.data[(i << 2) + 2] = new jsfeat.matrix_t(nw, nh, data_type);\\n                        src0 = img_pyr.data[(i << 2) + 2];\\n                    }\\n                    jsfeat.imgproc.pyrdown(src1, src0, 0, 1);\\n                    //\\n                    src0 = img_pyr.data[(i << 2) + 3];\\n                    if (new_pyr || nw != src0.cols || nh != src0.rows) {\\n                        img_pyr.data[(i << 2) + 3] = new jsfeat.matrix_t(nw, nh, data_type);\\n                        src0 = img_pyr.data[(i << 2) + 3];\\n                    }\\n                    jsfeat.imgproc.pyrdown(src1, src0, 1, 1);\\n                }\\n                return img_pyr;\\n            },\\n\\n            detect: function detect(pyramid, cascade) {\\n                var interval = this.interval;\\n                var scale = this.scale;\\n                var next = this.next;\\n                var scale_upto = this.scale_to;\\n                var i = 0,\\n                    j = 0,\\n                    k = 0,\\n                    n = 0,\\n                    x = 0,\\n                    y = 0,\\n                    q = 0,\\n                    sn = 0,\\n                    f_cnt = 0,\\n                    q_cnt = 0,\\n                    p = 0,\\n                    pmin = 0,\\n                    nmax = 0,\\n                    f = 0,\\n                    i4 = 0,\\n                    qw = 0,\\n                    qh = 0;\\n                var sum = 0.0,\\n                    alpha,\\n                    feature,\\n                    orig_feature,\\n                    feature_k,\\n                    feature_o,\\n                    flag = true,\\n                    shortcut = true;\\n                var scale_x = 1.0,\\n                    scale_y = 1.0;\\n                var dx = [0, 1, 0, 1];\\n                var dy = [0, 0, 1, 1];\\n                var seq = [];\\n                var pyr = pyramid.data,\\n                    bpp = 1,\\n                    bpp2 = 2,\\n                    bpp4 = 4;\\n\\n                var u8 = [],\\n                    u8o = [0, 0, 0];\\n                var step = [0, 0, 0];\\n                var paddings = [0, 0, 0];\\n\\n                for (i = 0; i < scale_upto; i++) {\\n                    i4 = i << 2;\\n                    qw = pyr[i4 + (next << 3)].cols - (cascade.width >> 2);\\n                    qh = pyr[i4 + (next << 3)].rows - (cascade.height >> 2);\\n                    step[0] = pyr[i4].cols * bpp;\\n                    step[1] = pyr[i4 + (next << 2)].cols * bpp;\\n                    step[2] = pyr[i4 + (next << 3)].cols * bpp;\\n                    paddings[0] = pyr[i4].cols * bpp4 - qw * bpp4;\\n                    paddings[1] = pyr[i4 + (next << 2)].cols * bpp2 - qw * bpp2;\\n                    paddings[2] = pyr[i4 + (next << 3)].cols * bpp - qw * bpp;\\n                    sn = cascade.stage_classifier.length;\\n                    for (j = 0; j < sn; j++) {\\n                        orig_feature = cascade.stage_classifier[j].feature;\\n                        feature = cascade.stage_classifier[j]._feature;\\n                        f_cnt = cascade.stage_classifier[j].count;\\n                        for (k = 0; k < f_cnt; k++) {\\n                            feature_k = feature[k];\\n                            feature_o = orig_feature[k];\\n                            q_cnt = feature_o.size | 0;\\n                            for (q = 0; q < q_cnt; q++) {\\n                                feature_k.px[q] = feature_o.px[q] * bpp + feature_o.py[q] * step[feature_o.pz[q]];\\n                                feature_k.pz[q] = feature_o.pz[q];\\n                                feature_k.nx[q] = feature_o.nx[q] * bpp + feature_o.ny[q] * step[feature_o.nz[q]];\\n                                feature_k.nz[q] = feature_o.nz[q];\\n                            }\\n                        }\\n                    }\\n                    u8[0] = pyr[i4].data;u8[1] = pyr[i4 + (next << 2)].data;\\n                    for (q = 0; q < 4; q++) {\\n                        u8[2] = pyr[i4 + (next << 3) + q].data;\\n                        u8o[0] = dx[q] * bpp2 + dy[q] * (pyr[i4].cols * bpp2);\\n                        u8o[1] = dx[q] * bpp + dy[q] * (pyr[i4 + (next << 2)].cols * bpp);\\n                        u8o[2] = 0;\\n                        for (y = 0; y < qh; y++) {\\n                            for (x = 0; x < qw; x++) {\\n                                sum = 0;\\n                                flag = true;\\n                                sn = cascade.stage_classifier.length;\\n                                for (j = 0; j < sn; j++) {\\n                                    sum = 0;\\n                                    alpha = cascade.stage_classifier[j].alpha;\\n                                    feature = cascade.stage_classifier[j]._feature;\\n                                    f_cnt = cascade.stage_classifier[j].count;\\n                                    for (k = 0; k < f_cnt; k++) {\\n                                        feature_k = feature[k];\\n                                        pmin = u8[feature_k.pz[0]][u8o[feature_k.pz[0]] + feature_k.px[0]];\\n                                        nmax = u8[feature_k.nz[0]][u8o[feature_k.nz[0]] + feature_k.nx[0]];\\n                                        if (pmin <= nmax) {\\n                                            sum += alpha[k << 1];\\n                                        } else {\\n                                            shortcut = true;\\n                                            q_cnt = feature_k.size;\\n                                            for (f = 1; f < q_cnt; f++) {\\n                                                if (feature_k.pz[f] >= 0) {\\n                                                    p = u8[feature_k.pz[f]][u8o[feature_k.pz[f]] + feature_k.px[f]];\\n                                                    if (p < pmin) {\\n                                                        if (p <= nmax) {\\n                                                            shortcut = false;\\n                                                            break;\\n                                                        }\\n                                                        pmin = p;\\n                                                    }\\n                                                }\\n                                                if (feature_k.nz[f] >= 0) {\\n                                                    n = u8[feature_k.nz[f]][u8o[feature_k.nz[f]] + feature_k.nx[f]];\\n                                                    if (n > nmax) {\\n                                                        if (pmin <= n) {\\n                                                            shortcut = false;\\n                                                            break;\\n                                                        }\\n                                                        nmax = n;\\n                                                    }\\n                                                }\\n                                            }\\n                                            sum += shortcut ? alpha[(k << 1) + 1] : alpha[k << 1];\\n                                        }\\n                                    }\\n                                    if (sum < cascade.stage_classifier[j].threshold) {\\n                                        flag = false;\\n                                        break;\\n                                    }\\n                                }\\n                                if (flag) {\\n                                    seq.push({ \\\"x\\\": (x * 4 + dx[q] * 2) * scale_x,\\n                                        \\\"y\\\": (y * 4 + dy[q] * 2) * scale_y,\\n                                        \\\"width\\\": cascade.width * scale_x,\\n                                        \\\"height\\\": cascade.height * scale_y,\\n                                        \\\"neighbor\\\": 1,\\n                                        \\\"confidence\\\": sum });\\n                                    ++x;\\n                                    u8o[0] += bpp4;\\n                                    u8o[1] += bpp2;\\n                                    u8o[2] += bpp;\\n                                }\\n                                u8o[0] += bpp4;\\n                                u8o[1] += bpp2;\\n                                u8o[2] += bpp;\\n                            }\\n                            u8o[0] += paddings[0];\\n                            u8o[1] += paddings[1];\\n                            u8o[2] += paddings[2];\\n                        }\\n                    }\\n                    scale_x *= scale;\\n                    scale_y *= scale;\\n                }\\n\\n                return seq;\\n            },\\n\\n            // OpenCV method to group detected rectangles\\n            group_rectangles: function group_rectangles(rects, min_neighbors) {\\n                if (typeof min_neighbors === \\\"undefined\\\") {\\n                    min_neighbors = 1;\\n                }\\n                var i,\\n                    j,\\n                    n = rects.length;\\n                var node = [];\\n                for (i = 0; i < n; ++i) {\\n                    node[i] = { \\\"parent\\\": -1,\\n                        \\\"element\\\": rects[i],\\n                        \\\"rank\\\": 0 };\\n                }\\n                for (i = 0; i < n; ++i) {\\n                    if (!node[i].element) continue;\\n                    var root = i;\\n                    while (node[root].parent != -1) {\\n                        root = node[root].parent;\\n                    }for (j = 0; j < n; ++j) {\\n                        if (i != j && node[j].element && _group_func(node[i].element, node[j].element)) {\\n                            var root2 = j;\\n\\n                            while (node[root2].parent != -1) {\\n                                root2 = node[root2].parent;\\n                            }if (root2 != root) {\\n                                if (node[root].rank > node[root2].rank) node[root2].parent = root;else {\\n                                    node[root].parent = root2;\\n                                    if (node[root].rank == node[root2].rank) node[root2].rank++;\\n                                    root = root2;\\n                                }\\n\\n                                /* compress path from node2 to the root: */\\n                                var temp,\\n                                    node2 = j;\\n                                while (node[node2].parent != -1) {\\n                                    temp = node2;\\n                                    node2 = node[node2].parent;\\n                                    node[temp].parent = root;\\n                                }\\n\\n                                /* compress path from node to the root: */\\n                                node2 = i;\\n                                while (node[node2].parent != -1) {\\n                                    temp = node2;\\n                                    node2 = node[node2].parent;\\n                                    node[temp].parent = root;\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n                var idx_seq = [];\\n                var class_idx = 0;\\n                for (i = 0; i < n; i++) {\\n                    j = -1;\\n                    var node1 = i;\\n                    if (node[node1].element) {\\n                        while (node[node1].parent != -1) {\\n                            node1 = node[node1].parent;\\n                        }if (node[node1].rank >= 0) node[node1].rank = ~class_idx++;\\n                        j = ~node[node1].rank;\\n                    }\\n                    idx_seq[i] = j;\\n                }\\n\\n                var comps = [];\\n                for (i = 0; i < class_idx + 1; ++i) {\\n                    comps[i] = { \\\"neighbors\\\": 0,\\n                        \\\"x\\\": 0,\\n                        \\\"y\\\": 0,\\n                        \\\"width\\\": 0,\\n                        \\\"height\\\": 0,\\n                        \\\"confidence\\\": 0 };\\n                }\\n\\n                // count number of neighbors\\n                for (i = 0; i < n; ++i) {\\n                    var r1 = rects[i];\\n                    var idx = idx_seq[i];\\n\\n                    if (comps[idx].neighbors == 0) comps[idx].confidence = r1.confidence;\\n\\n                    ++comps[idx].neighbors;\\n\\n                    comps[idx].x += r1.x;\\n                    comps[idx].y += r1.y;\\n                    comps[idx].width += r1.width;\\n                    comps[idx].height += r1.height;\\n                    comps[idx].confidence = Math.max(comps[idx].confidence, r1.confidence);\\n                }\\n\\n                var seq2 = [];\\n                // calculate average bounding box\\n                for (i = 0; i < class_idx; ++i) {\\n                    n = comps[i].neighbors;\\n                    if (n >= min_neighbors) seq2.push({ \\\"x\\\": (comps[i].x * 2 + n) / (2 * n),\\n                        \\\"y\\\": (comps[i].y * 2 + n) / (2 * n),\\n                        \\\"width\\\": (comps[i].width * 2 + n) / (2 * n),\\n                        \\\"height\\\": (comps[i].height * 2 + n) / (2 * n),\\n                        \\\"neighbors\\\": comps[i].neighbors,\\n                        \\\"confidence\\\": comps[i].confidence });\\n                }\\n\\n                var result_seq = [];\\n                n = seq2.length;\\n                // filter out small face rectangles inside large face rectangles\\n                for (i = 0; i < n; ++i) {\\n                    var r1 = seq2[i];\\n                    var flag = true;\\n                    for (j = 0; j < n; ++j) {\\n                        var r2 = seq2[j];\\n                        var distance = r2.width * 0.25 + 0.5 | 0;\\n\\n                        if (i != j && r1.x >= r2.x - distance && r1.y >= r2.y - distance && r1.x + r1.width <= r2.x + r2.width + distance && r1.y + r1.height <= r2.y + r2.height + distance && (r2.neighbors > Math.max(3, r1.neighbors) || r1.neighbors < 3)) {\\n                            flag = false;\\n                            break;\\n                        }\\n                    }\\n\\n                    if (flag) result_seq.push(r1);\\n                }\\n                return result_seq;\\n            }\\n\\n        };\\n    }();\\n\\n    global.bbf = bbf;\\n})(jsfeat);\\n/**\\r\\n * @author Eugene Zatepyakin / http://inspirit.ru/\\r\\n */\\n\\n(function (lib) {\\n    \\\"use strict\\\";\\n\\n    if (typeof module === \\\"undefined\\\" || typeof module.exports === \\\"undefined\\\") {\\n        // in a browser, define its namespaces in global\\n        window.jsfeat = lib;\\n    } else {\\n        // in commonjs, or when AMD wrapping has been applied, define its namespaces as exports\\n        module.exports = lib;\\n    }\\n})(jsfeat);\\n\\nmodule.exports = jsfeat;\\n\\n/***/ }),\\n/* 1 */\\n/***/ (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\n/* eslint-disable */\\nmodule.exports = { \\\"count\\\": 16, \\\"width\\\": 24, \\\"height\\\": 24, \\\"stage_classifier\\\": [{ \\\"count\\\": 4, \\\"threshold\\\": -4.577530e+00, \\\"feature\\\": [{ \\\"size\\\": 4, \\\"px\\\": [3, 5, 8, 11], \\\"py\\\": [2, 2, 6, 3], \\\"pz\\\": [2, 1, 1, 0], \\\"nx\\\": [8, 4, 0, 0], \\\"ny\\\": [4, 4, 0, 0], \\\"nz\\\": [1, 1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [3, 6, 7], \\\"py\\\": [7, 13, 0], \\\"pz\\\": [1, 0, -1], \\\"nx\\\": [2, 3, 4], \\\"ny\\\": [5, 4, 4], \\\"nz\\\": [2, 1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [5, 3, 10, 13, 11], \\\"py\\\": [1, 0, 3, 2, 2], \\\"pz\\\": [1, 2, 0, 0, 0], \\\"nx\\\": [0, 11, 0, 11, 11], \\\"ny\\\": [0, 2, 3, 1, 1], \\\"nz\\\": [1, 1, 0, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 12, 12, 9, 12], \\\"py\\\": [4, 13, 12, 7, 11], \\\"pz\\\": [1, 0, 0, 1, 0], \\\"nx\\\": [8, 0, 8, 2, 11], \\\"ny\\\": [4, 0, 8, 5, 1], \\\"nz\\\": [1, -1, -1, -1, -1] }], \\\"alpha\\\": [-2.879683e+00, 2.879683e+00, -1.569341e+00, 1.569341e+00, -1.286131e+00, 1.286131e+00, -1.157626e+00, 1.157626e+00] }, { \\\"count\\\": 4, \\\"threshold\\\": -4.339908e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [13, 12, 3, 11, 17], \\\"py\\\": [3, 3, 1, 4, 13], \\\"pz\\\": [0, 0, 2, 0, 0], \\\"nx\\\": [4, 3, 8, 15, 15], \\\"ny\\\": [4, 5, 4, 8, 8], \\\"nz\\\": [1, 2, 1, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 7, 6, 3, 3], \\\"py\\\": [13, 13, 4, 2, 7], \\\"pz\\\": [0, 0, 1, 2, 1], \\\"nx\\\": [4, 8, 3, 0, 15], \\\"ny\\\": [4, 4, 4, 3, 8], \\\"nz\\\": [1, 1, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [2, 2, 11], \\\"py\\\": [3, 2, 5], \\\"pz\\\": [2, 2, 0], \\\"nx\\\": [3, 8, 3], \\\"ny\\\": [4, 4, 4], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [15, 13, 9, 11, 7], \\\"py\\\": [2, 1, 2, 1, 0], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [23, 11, 23, 22, 23], \\\"ny\\\": [1, 0, 2, 0, 0], \\\"nz\\\": [0, 1, 0, 0, 0] }], \\\"alpha\\\": [-2.466029e+00, 2.466029e+00, -1.839510e+00, 1.839510e+00, -1.060559e+00, 1.060559e+00, -1.094927e+00, 1.094927e+00] }, { \\\"count\\\": 7, \\\"threshold\\\": -5.052474e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [17, 13, 3, 11, 10], \\\"py\\\": [13, 2, 1, 4, 3], \\\"pz\\\": [0, 0, 2, 0, 0], \\\"nx\\\": [4, 8, 8, 3, 7], \\\"ny\\\": [2, 8, 4, 5, 4], \\\"nz\\\": [2, 0, 1, 2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 7, 3, 6, 6], \\\"py\\\": [4, 12, 2, 13, 14], \\\"pz\\\": [1, 0, 2, 0, 0], \\\"nx\\\": [8, 3, 4, 4, 3], \\\"ny\\\": [4, 4, 2, 0, 2], \\\"nz\\\": [1, 1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [7, 4, 5, 3, 3], \\\"py\\\": [2, 1, 3, 1, 1], \\\"pz\\\": [0, 1, 0, 1, -1], \\\"nx\\\": [1, 0, 1, 1, 0], \\\"ny\\\": [1, 3, 2, 0, 4], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [11, 11, 11, 3, 2], \\\"py\\\": [11, 13, 10, 7, 2], \\\"pz\\\": [0, 0, 0, 1, 2], \\\"nx\\\": [4, 1, 8, 2, 0], \\\"ny\\\": [4, 1, 12, 0, 4], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [9, 13, 1], \\\"py\\\": [7, 19, 4], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [4, 7, 4], \\\"ny\\\": [5, 8, 2], \\\"nz\\\": [2, 1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [12, 8, 16, 4, 4], \\\"py\\\": [12, 1, 2, 0, 0], \\\"pz\\\": [0, 1, 0, 2, -1], \\\"nx\\\": [11, 22, 11, 23, 23], \\\"ny\\\": [2, 0, 1, 1, 5], \\\"nz\\\": [1, 0, 1, 0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [11, 17, 17], \\\"py\\\": [6, 11, 12], \\\"pz\\\": [0, 0, 0], \\\"nx\\\": [15, 1, 11], \\\"ny\\\": [9, 1, 1], \\\"nz\\\": [0, -1, -1] }], \\\"alpha\\\": [-2.156890e+00, 2.156890e+00, -1.718246e+00, 1.718246e+00, -9.651329e-01, 9.651329e-01, -9.948090e-01, 9.948090e-01, -8.802466e-01, 8.802466e-01, -8.486741e-01, 8.486741e-01, -8.141777e-01, 8.141777e-01] }, { \\\"count\\\": 13, \\\"threshold\\\": -5.774400e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [6, 10, 3, 12, 14], \\\"py\\\": [5, 3, 1, 2, 2], \\\"pz\\\": [1, 0, 2, 0, 0], \\\"nx\\\": [3, 4, 14, 8, 4], \\\"ny\\\": [5, 4, 8, 4, 2], \\\"nz\\\": [2, 1, 0, 1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [10, 6, 11, 5, 12], \\\"py\\\": [4, 13, 4, 2, 4], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [1, 4, 8, 1, 1], \\\"ny\\\": [2, 4, 4, 4, 3], \\\"nz\\\": [0, 1, 1, 0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [18, 6, 12], \\\"py\\\": [12, 4, 8], \\\"pz\\\": [0, 1, 0], \\\"nx\\\": [7, 4, 8], \\\"ny\\\": [4, 2, 4], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [7, 5, 6, 3, 17], \\\"py\\\": [13, 12, 3, 8, 13], \\\"pz\\\": [0, 0, 1, 1, 0], \\\"nx\\\": [3, 3, 0, 1, 8], \\\"ny\\\": [4, 5, 5, 10, 4], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [16, 7, 16, 7, 7], \\\"py\\\": [1, 1, 2, 0, 0], \\\"pz\\\": [0, 1, 0, 1, -1], \\\"nx\\\": [23, 23, 23, 11, 5], \\\"ny\\\": [2, 14, 1, 2, 1], \\\"nz\\\": [0, 0, 0, 1, 2] }, { \\\"size\\\": 3, \\\"px\\\": [9, 18, 16], \\\"py\\\": [7, 14, 2], \\\"pz\\\": [1, 0, -1], \\\"nx\\\": [8, 4, 9], \\\"ny\\\": [10, 2, 4], \\\"nz\\\": [1, 2, 1] }, { \\\"size\\\": 4, \\\"px\\\": [3, 16, 1, 22], \\\"py\\\": [7, 4, 5, 11], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [3, 9, 4, 2], \\\"ny\\\": [4, 9, 7, 5], \\\"nz\\\": [1, 0, 1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [4, 7, 8, 8, 9], \\\"py\\\": [0, 2, 2, 1, 1], \\\"pz\\\": [1, 0, 0, 0, 0], \\\"nx\\\": [0, 0, 1, 0, 0], \\\"ny\\\": [15, 16, 19, 0, 14], \\\"nz\\\": [0, 0, 0, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [4, 4, 7, 8, 12], \\\"py\\\": [2, 5, 6, 7, 10], \\\"pz\\\": [2, 2, 1, 1, 0], \\\"nx\\\": [8, 5, 10, 0, 0], \\\"ny\\\": [4, 2, 5, 3, 14], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 0], \\\"py\\\": [13, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 14], \\\"ny\\\": [4, 16], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [17, 8, 18, 4, 4], \\\"py\\\": [3, 1, 3, 0, 0], \\\"pz\\\": [0, 1, 0, 2, -1], \\\"nx\\\": [21, 22, 5, 11, 22], \\\"ny\\\": [0, 1, 0, 1, 2], \\\"nz\\\": [0, 0, 2, 1, 0] }, { \\\"size\\\": 4, \\\"px\\\": [7, 8, 2, 11], \\\"py\\\": [13, 12, 2, 7], \\\"pz\\\": [0, 0, 2, 0], \\\"nx\\\": [4, 0, 23, 3], \\\"ny\\\": [4, 1, 1, 11], \\\"nz\\\": [1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 18, 8, 9, 15], \\\"py\\\": [4, 16, 7, 7, 23], \\\"pz\\\": [2, 0, 1, 1, 0], \\\"nx\\\": [0, 1, 1, 1, 1], \\\"ny\\\": [10, 21, 23, 22, 22], \\\"nz\\\": [1, 0, 0, 0, -1] }], \\\"alpha\\\": [-1.956565e+00, 1.956565e+00, -1.262438e+00, 1.262438e+00, -1.056941e+00, 1.056941e+00, -9.712509e-01, 9.712509e-01, -8.261028e-01, 8.261028e-01, -8.456506e-01, 8.456506e-01, -6.652113e-01, 6.652113e-01, -6.026287e-01, 6.026287e-01, -6.915425e-01, 6.915425e-01, -5.539286e-01, 5.539286e-01, -5.515072e-01, 5.515072e-01, -6.685884e-01, 6.685884e-01, -4.656070e-01, 4.656070e-01] }, { \\\"count\\\": 20, \\\"threshold\\\": -5.606853e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [17, 11, 6, 14, 9], \\\"py\\\": [13, 4, 4, 3, 3], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [14, 4, 8, 7, 8], \\\"ny\\\": [8, 4, 4, 4, 8], \\\"nz\\\": [0, 1, 1, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [3, 9, 10, 11, 11], \\\"py\\\": [7, 2, 2, 3, 3], \\\"pz\\\": [1, 0, 0, 0, -1], \\\"nx\\\": [3, 8, 4, 2, 5], \\\"ny\\\": [4, 4, 10, 2, 8], \\\"nz\\\": [1, 1, 1, 2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 12, 5, 12], \\\"py\\\": [12, 9, 10, 12, 11], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [0, 0, 0, 0, 0], \\\"ny\\\": [2, 1, 3, 0, 0], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 18, 9, 9, 12], \\\"py\\\": [7, 14, 19, 5, 11], \\\"pz\\\": [1, -1, -1, -1, -1], \\\"nx\\\": [23, 4, 23, 23, 8], \\\"ny\\\": [13, 5, 14, 16, 4], \\\"nz\\\": [0, 2, 0, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 12, 6, 1], \\\"py\\\": [13, 11, 12, 6, 5], \\\"pz\\\": [0, 0, 0, -1, -1], \\\"nx\\\": [4, 6, 8, 4, 9], \\\"ny\\\": [2, 8, 4, 4, 4], \\\"nz\\\": [2, 1, 1, 1, 1] }, { \\\"size\\\": 4, \\\"px\\\": [12, 11, 11, 6], \\\"py\\\": [5, 5, 6, 13], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [8, 3, 2, 8], \\\"ny\\\": [4, 4, 17, 2], \\\"nz\\\": [1, 1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 14, 12, 15, 13], \\\"py\\\": [0, 2, 2, 2, 2], \\\"pz\\\": [2, 0, 0, 0, 0], \\\"nx\\\": [22, 23, 22, 23, 7], \\\"ny\\\": [0, 3, 1, 2, 4], \\\"nz\\\": [0, 0, 0, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [16, 15, 18, 19, 9], \\\"py\\\": [12, 11, 12, 12, 9], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [8, 2, 22, 23, 21], \\\"ny\\\": [4, 1, 1, 2, 20], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [4, 7, 7], \\\"py\\\": [0, 2, 2], \\\"pz\\\": [1, 0, -1], \\\"nx\\\": [1, 2, 2], \\\"ny\\\": [2, 0, 2], \\\"nz\\\": [1, 0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [4, 11, 11], \\\"py\\\": [6, 9, 8], \\\"pz\\\": [1, 0, 0], \\\"nx\\\": [9, 2, 8], \\\"ny\\\": [9, 4, 5], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [2, 7, 6, 6], \\\"py\\\": [4, 23, 21, 22], \\\"pz\\\": [2, 0, 0, 0], \\\"nx\\\": [9, 3, 8, 17], \\\"ny\\\": [21, 2, 5, 1], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 8], \\\"py\\\": [4, 12], \\\"pz\\\": [2, 0], \\\"nx\\\": [3, 0], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 5, 1, 8, 4], \\\"py\\\": [15, 12, 3, 23, 12], \\\"pz\\\": [0, 0, 2, 0, 0], \\\"nx\\\": [0, 0, 0, 0, 0], \\\"ny\\\": [23, 10, 22, 21, 11], \\\"nz\\\": [0, 1, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [21, 5], \\\"py\\\": [13, 4], \\\"pz\\\": [0, 2], \\\"nx\\\": [23, 4], \\\"ny\\\": [23, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 17], \\\"py\\\": [2, 3], \\\"pz\\\": [0, 0], \\\"nx\\\": [19, 20], \\\"ny\\\": [2, 1], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [12, 1, 8, 17, 4], \\\"py\\\": [14, 2, 13, 6, 12], \\\"pz\\\": [0, -1, -1, -1, -1], \\\"nx\\\": [8, 13, 15, 15, 7], \\\"ny\\\": [10, 9, 15, 14, 8], \\\"nz\\\": [1, 0, 0, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 5], \\\"py\\\": [7, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 13], \\\"ny\\\": [2, 21], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 4], \\\"py\\\": [7, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 2], \\\"ny\\\": [7, 5], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 4, \\\"px\\\": [4, 14, 3, 11], \\\"py\\\": [3, 23, 2, 5], \\\"pz\\\": [2, 0, 2, 0], \\\"nx\\\": [7, 8, 2, 16], \\\"ny\\\": [8, 0, 1, 15], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 8], \\\"py\\\": [0, 0], \\\"pz\\\": [0, 0], \\\"nx\\\": [2, 2], \\\"ny\\\": [3, 5], \\\"nz\\\": [2, 2] }], \\\"alpha\\\": [-1.957970e+00, 1.957970e+00, -1.225984e+00, 1.225984e+00, -8.310246e-01, 8.310246e-01, -8.315741e-01, 8.315741e-01, -7.973616e-01, 7.973616e-01, -7.661959e-01, 7.661959e-01, -6.042118e-01, 6.042118e-01, -6.506833e-01, 6.506833e-01, -4.808219e-01, 4.808219e-01, -6.079504e-01, 6.079504e-01, -5.163994e-01, 5.163994e-01, -5.268142e-01, 5.268142e-01, -4.935685e-01, 4.935685e-01, -4.427544e-01, 4.427544e-01, -4.053949e-01, 4.053949e-01, -4.701274e-01, 4.701274e-01, -4.387648e-01, 4.387648e-01, -4.305499e-01, 4.305499e-01, -4.042607e-01, 4.042607e-01, -4.372088e-01, 4.372088e-01] }, { \\\"count\\\": 22, \\\"threshold\\\": -5.679317e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [11, 3, 17, 14, 13], \\\"py\\\": [4, 0, 13, 2, 3], \\\"pz\\\": [0, 2, 0, 0, 0], \\\"nx\\\": [7, 4, 14, 23, 11], \\\"ny\\\": [8, 4, 8, 4, 0], \\\"nz\\\": [1, 1, 0, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [7, 12, 6, 12, 12], \\\"py\\\": [12, 8, 3, 10, 9], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [4, 9, 8, 15, 15], \\\"ny\\\": [4, 8, 4, 8, 8], \\\"nz\\\": [1, 0, 1, 0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [4, 2, 10], \\\"py\\\": [1, 4, 1], \\\"pz\\\": [1, 2, 0], \\\"nx\\\": [2, 3, 8], \\\"ny\\\": [5, 4, 4], \\\"nz\\\": [2, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 17, 6, 6, 16], \\\"py\\\": [2, 12, 4, 14, 12], \\\"pz\\\": [2, 0, 1, 0, 0], \\\"nx\\\": [8, 3, 7, 5, 15], \\\"ny\\\": [4, 4, 4, 4, 8], \\\"nz\\\": [1, 1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [5, 6, 7, 4, 8], \\\"py\\\": [3, 3, 3, 1, 3], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [0, 0, 0, 0, 1], \\\"ny\\\": [5, 4, 3, 2, 0], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [18, 9, 0], \\\"py\\\": [14, 7, 0], \\\"pz\\\": [0, 1, -1], \\\"nx\\\": [8, 14, 8], \\\"ny\\\": [10, 9, 4], \\\"nz\\\": [1, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 5], \\\"py\\\": [18, 13], \\\"pz\\\": [0, 0], \\\"nx\\\": [10, 3], \\\"ny\\\": [16, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 11, 11, 11, 6], \\\"py\\\": [10, 12, 11, 13, 6], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [5, 21, 22, 22, 22], \\\"ny\\\": [4, 22, 17, 19, 18], \\\"nz\\\": [2, 0, 0, 0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [8, 9, 15, 4], \\\"py\\\": [7, 7, 23, 4], \\\"pz\\\": [1, 1, 0, 2], \\\"nx\\\": [8, 5, 0, 3], \\\"ny\\\": [4, 18, 4, 9], \\\"nz\\\": [1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 10, 12, 11, 11], \\\"py\\\": [4, 4, 4, 5, 5], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [4, 6, 8, 2, 8], \\\"ny\\\": [4, 9, 9, 2, 4], \\\"nz\\\": [1, 1, 0, 2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [2, 2, 3, 3, 4], \\\"py\\\": [10, 9, 14, 13, 15], \\\"pz\\\": [1, 1, 0, 0, 0], \\\"nx\\\": [0, 0, 0, 0, 0], \\\"ny\\\": [5, 9, 10, 19, 18], \\\"nz\\\": [2, 1, 1, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [13, 12], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 2], \\\"ny\\\": [15, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [2, 4, 3, 3, 4], \\\"py\\\": [5, 11, 6, 9, 12], \\\"pz\\\": [1, 0, 1, 0, 0], \\\"nx\\\": [6, 2, 11, 11, 0], \\\"ny\\\": [9, 1, 5, 20, 18], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [18, 9, 17, 19, 16], \\\"py\\\": [2, 0, 2, 2, 1], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [22, 23, 11, 23, 23], \\\"ny\\\": [0, 2, 0, 1, 1], \\\"nz\\\": [0, 0, 1, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [5, 5, 6, 7, 6], \\\"py\\\": [17, 16, 15, 23, 22], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [7, 6, 2, 5, 23], \\\"ny\\\": [8, 1, 2, 3, 1], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 11, 10, 6], \\\"py\\\": [14, 13, 18, 4, 22], \\\"pz\\\": [0, -1, -1, -1, -1], \\\"nx\\\": [3, 2, 4, 1, 2], \\\"ny\\\": [19, 4, 23, 13, 16], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [11, 16, 11, 17], \\\"py\\\": [7, 11, 8, 12], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [7, 14, 10, 4], \\\"ny\\\": [4, 7, 10, 4], \\\"nz\\\": [1, 0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [8, 7], \\\"pz\\\": [1, 1], \\\"nx\\\": [4, 2], \\\"ny\\\": [10, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 9], \\\"py\\\": [0, 1], \\\"pz\\\": [1, 0], \\\"nx\\\": [4, 5], \\\"ny\\\": [1, 0], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [14, 16], \\\"py\\\": [3, 3], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 14], \\\"ny\\\": [4, 21], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 1], \\\"py\\\": [7, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 9], \\\"ny\\\": [7, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 0], \\\"py\\\": [8, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [20, 0], \\\"ny\\\": [3, 3], \\\"nz\\\": [0, -1] }], \\\"alpha\\\": [-1.581077e+00, 1.581077e+00, -1.389689e+00, 1.389689e+00, -8.733094e-01, 8.733094e-01, -8.525177e-01, 8.525177e-01, -7.416304e-01, 7.416304e-01, -6.609002e-01, 6.609002e-01, -7.119043e-01, 7.119043e-01, -6.204438e-01, 6.204438e-01, -6.638519e-01, 6.638519e-01, -5.518876e-01, 5.518876e-01, -4.898991e-01, 4.898991e-01, -5.508243e-01, 5.508243e-01, -4.635525e-01, 4.635525e-01, -5.163159e-01, 5.163159e-01, -4.495338e-01, 4.495338e-01, -4.515036e-01, 4.515036e-01, -5.130473e-01, 5.130473e-01, -4.694233e-01, 4.694233e-01, -4.022514e-01, 4.022514e-01, -4.055690e-01, 4.055690e-01, -4.151817e-01, 4.151817e-01, -3.352302e-01, 3.352302e-01] }, { \\\"count\\\": 32, \\\"threshold\\\": -5.363782e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [12, 9, 6, 8, 14], \\\"py\\\": [4, 2, 13, 3, 3], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [0, 15, 0, 9, 5], \\\"ny\\\": [2, 7, 3, 8, 8], \\\"nz\\\": [0, 0, 0, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [13, 16, 3, 6, 11], \\\"py\\\": [3, 13, 1, 4, 3], \\\"pz\\\": [0, 0, 2, 1, 0], \\\"nx\\\": [7, 4, 8, 14, 14], \\\"ny\\\": [4, 4, 4, 8, 8], \\\"nz\\\": [1, 1, 1, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 19, 18, 19, 19], \\\"py\\\": [6, 13, 13, 12, 12], \\\"pz\\\": [1, 0, 0, 0, -1], \\\"nx\\\": [23, 5, 23, 23, 11], \\\"ny\\\": [12, 2, 13, 14, 8], \\\"nz\\\": [0, 2, 0, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 12, 12, 6], \\\"py\\\": [11, 13, 12, 10, 6], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [6, 8, 3, 9, 9], \\\"ny\\\": [8, 4, 4, 4, 4], \\\"nz\\\": [1, 1, 1, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [5, 3, 5, 8, 11], \\\"py\\\": [12, 8, 3, 11, 8], \\\"pz\\\": [0, 1, 1, 0, 0], \\\"nx\\\": [4, 0, 1, 1, 9], \\\"ny\\\": [4, 3, 4, 3, 4], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [13, 3, 12, 14, 12], \\\"py\\\": [1, 0, 1, 2, 3], \\\"pz\\\": [0, 2, 0, 0, 0], \\\"nx\\\": [7, 9, 8, 4, 4], \\\"ny\\\": [5, 4, 10, 2, 2], \\\"nz\\\": [1, 1, 1, 2, -1] }, { \\\"size\\\": 5, \\\"px\\\": [18, 16, 12, 15, 8], \\\"py\\\": [12, 23, 7, 11, 8], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [8, 6, 10, 12, 4], \\\"ny\\\": [4, 4, 10, 6, 3], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 4, 5, 2, 2], \\\"py\\\": [13, 14, 14, 7, 7], \\\"pz\\\": [0, 0, 0, 1, -1], \\\"nx\\\": [0, 0, 0, 0, 1], \\\"ny\\\": [15, 4, 14, 13, 17], \\\"nz\\\": [0, 2, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 9], \\\"py\\\": [7, 7], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 7], \\\"ny\\\": [5, 8], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 4, 6, 5, 4], \\\"py\\\": [2, 2, 14, 6, 9], \\\"pz\\\": [1, 1, 0, 1, 1], \\\"nx\\\": [23, 23, 23, 23, 11], \\\"ny\\\": [0, 3, 2, 1, 0], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [10, 2, 3], \\\"py\\\": [23, 4, 7], \\\"pz\\\": [0, 2, 1], \\\"nx\\\": [10, 21, 23], \\\"ny\\\": [21, 9, 2], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [20, 21, 21, 10, 12], \\\"py\\\": [13, 12, 8, 8, 12], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [8, 16, 3, 3, 11], \\\"ny\\\": [4, 8, 4, 3, 0], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 21], \\\"py\\\": [4, 12], \\\"pz\\\": [2, -1], \\\"nx\\\": [2, 3], \\\"ny\\\": [5, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 5, 6, 8, 7], \\\"py\\\": [0, 2, 1, 1, 1], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [3, 2, 2, 2, 2], \\\"ny\\\": [0, 0, 1, 2, 2], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 2, 2, 11, 10], \\\"py\\\": [10, 12, 8, 11, 12], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [3, 5, 2, 4, 2], \\\"ny\\\": [4, 1, 4, 2, 2], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [15, 16, 8, 17], \\\"py\\\": [2, 1, 0, 2], \\\"pz\\\": [0, 0, 1, 0], \\\"nx\\\": [19, 20, 0, 8], \\\"ny\\\": [1, 2, 11, 10], \\\"nz\\\": [0, 0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 16], \\\"py\\\": [12, 12], \\\"pz\\\": [0, 0], \\\"nx\\\": [8, 9], \\\"ny\\\": [5, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 11, 0, 0], \\\"py\\\": [12, 13, 0, 0], \\\"pz\\\": [0, 0, -1, -1], \\\"nx\\\": [10, 10, 9, 10], \\\"ny\\\": [10, 12, 13, 11], \\\"nz\\\": [0, 0, 0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [11, 10, 8], \\\"py\\\": [5, 2, 6], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [8, 12, 4], \\\"ny\\\": [4, 17, 4], \\\"nz\\\": [1, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 21, 10, 20, 20], \\\"py\\\": [11, 13, 7, 13, 14], \\\"pz\\\": [1, 0, 1, 0, 0], \\\"nx\\\": [23, 23, 11, 23, 17], \\\"ny\\\": [23, 22, 11, 21, 21], \\\"nz\\\": [0, 0, 1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 7], \\\"py\\\": [3, 9], \\\"pz\\\": [2, 1], \\\"nx\\\": [9, 23], \\\"ny\\\": [4, 22], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [3, 2, 2, 5], \\\"py\\\": [11, 5, 4, 20], \\\"pz\\\": [1, 2, 2, 0], \\\"nx\\\": [4, 23, 11, 23], \\\"ny\\\": [10, 22, 11, 21], \\\"nz\\\": [1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 5], \\\"py\\\": [13, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 4], \\\"ny\\\": [8, 6], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 5], \\\"py\\\": [4, 9], \\\"pz\\\": [2, 1], \\\"nx\\\": [10, 10], \\\"ny\\\": [16, 16], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 2], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [3, 0], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [7, 3, 12, 13, 6], \\\"py\\\": [11, 5, 23, 23, 7], \\\"pz\\\": [1, 2, 0, 0, 1], \\\"nx\\\": [1, 0, 0, 0, 0], \\\"ny\\\": [23, 20, 19, 21, 21], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 0, 0, 0], \\\"py\\\": [10, 9, 6, 13, 13], \\\"pz\\\": [0, 0, 1, 0, -1], \\\"nx\\\": [8, 8, 4, 4, 9], \\\"ny\\\": [4, 11, 5, 4, 5], \\\"nz\\\": [1, 1, 2, 2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 18], \\\"py\\\": [8, 15], \\\"pz\\\": [1, 0], \\\"nx\\\": [15, 4], \\\"ny\\\": [15, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 13], \\\"py\\\": [6, 17], \\\"pz\\\": [1, -1], \\\"nx\\\": [1, 2], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [19, 10, 20, 18, 18], \\\"py\\\": [2, 0, 2, 2, 2], \\\"pz\\\": [0, 1, 0, 0, -1], \\\"nx\\\": [22, 23, 22, 11, 23], \\\"ny\\\": [1, 3, 0, 1, 2], \\\"nz\\\": [0, 0, 0, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [4, 2, 2, 2, 6], \\\"py\\\": [7, 2, 5, 4, 14], \\\"pz\\\": [1, 2, 2, 2, 0], \\\"nx\\\": [16, 7, 9, 15, 23], \\\"ny\\\": [8, 0, 3, 11, 2], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 10, 9, 9, 5], \\\"py\\\": [2, 0, 0, 1, 0], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [3, 2, 3, 2, 2], \\\"ny\\\": [11, 3, 9, 5, 5], \\\"nz\\\": [1, 2, 1, 2, -1] }], \\\"alpha\\\": [-1.490426e+00, 1.490426e+00, -1.214280e+00, 1.214280e+00, -8.124863e-01, 8.124863e-01, -7.307594e-01, 7.307594e-01, -7.377259e-01, 7.377259e-01, -5.982859e-01, 5.982859e-01, -6.451736e-01, 6.451736e-01, -6.117417e-01, 6.117417e-01, -5.438949e-01, 5.438949e-01, -4.563701e-01, 4.563701e-01, -4.975362e-01, 4.975362e-01, -4.707373e-01, 4.707373e-01, -5.013868e-01, 5.013868e-01, -5.139018e-01, 5.139018e-01, -4.728007e-01, 4.728007e-01, -4.839748e-01, 4.839748e-01, -4.852528e-01, 4.852528e-01, -5.768956e-01, 5.768956e-01, -3.635091e-01, 3.635091e-01, -4.190090e-01, 4.190090e-01, -3.854715e-01, 3.854715e-01, -3.409591e-01, 3.409591e-01, -3.440222e-01, 3.440222e-01, -3.375895e-01, 3.375895e-01, -3.367032e-01, 3.367032e-01, -3.708106e-01, 3.708106e-01, -3.260956e-01, 3.260956e-01, -3.657681e-01, 3.657681e-01, -3.518800e-01, 3.518800e-01, -3.845758e-01, 3.845758e-01, -2.832236e-01, 2.832236e-01, -2.865156e-01, 2.865156e-01] }, { \\\"count\\\": 45, \\\"threshold\\\": -5.479836e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [15, 6, 17, 6, 9], \\\"py\\\": [2, 13, 13, 4, 3], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [3, 9, 4, 8, 14], \\\"ny\\\": [5, 8, 4, 4, 8], \\\"nz\\\": [2, 0, 1, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [9, 8, 11, 6, 7], \\\"py\\\": [1, 2, 3, 14, 2], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [0, 0, 4, 0, 0], \\\"ny\\\": [4, 2, 4, 1, 0], \\\"nz\\\": [0, 0, 1, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [2, 2, 11, 11, 11], \\\"py\\\": [2, 4, 10, 8, 6], \\\"pz\\\": [2, 2, 0, 0, 0], \\\"nx\\\": [8, 4, 3, 23, 23], \\\"ny\\\": [4, 4, 4, 16, 18], \\\"nz\\\": [1, 1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [18, 16, 17, 15, 9], \\\"py\\\": [2, 2, 2, 2, 1], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [22, 22, 21, 23, 23], \\\"ny\\\": [1, 2, 0, 5, 4], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [15, 3, 17, 18, 6], \\\"py\\\": [11, 2, 11, 11, 4], \\\"pz\\\": [0, 2, 0, 0, 1], \\\"nx\\\": [3, 8, 1, 4, 23], \\\"ny\\\": [4, 4, 3, 9, 4], \\\"nz\\\": [1, 1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 5], \\\"py\\\": [4, 0], \\\"pz\\\": [2, -1], \\\"nx\\\": [7, 4], \\\"ny\\\": [8, 5], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 5], \\\"py\\\": [12, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 9], \\\"ny\\\": [10, 15], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 4, \\\"px\\\": [2, 2, 7, 1], \\\"py\\\": [7, 7, 3, 4], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [0, 2, 1, 2], \\\"ny\\\": [6, 20, 14, 16], \\\"nz\\\": [1, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [14, 12, 12, 13, 9], \\\"py\\\": [23, 5, 6, 5, 7], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [8, 18, 2, 8, 14], \\\"ny\\\": [4, 9, 0, 12, 7], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 10, 13, 11, 9], \\\"py\\\": [0, 3, 2, 3, 2], \\\"pz\\\": [2, 0, 0, 0, 0], \\\"nx\\\": [3, 11, 22, 22, 22], \\\"ny\\\": [2, 6, 15, 2, 0], \\\"nz\\\": [2, 1, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [8, 7, 5, 8, 5], \\\"py\\\": [23, 12, 12, 12, 13], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [3, 18, 3, 1, 22], \\\"ny\\\": [4, 4, 4, 2, 0], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [22, 22, 22, 21, 22], \\\"py\\\": [9, 11, 10, 14, 12], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [23, 23, 11, 1, 22], \\\"ny\\\": [23, 23, 11, 2, 0], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 3], \\\"py\\\": [18, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [10, 8], \\\"ny\\\": [16, 19], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 12, 11, 6, 6], \\\"py\\\": [4, 4, 4, 2, 2], \\\"pz\\\": [0, 0, 0, 1, -1], \\\"nx\\\": [3, 8, 7, 8, 4], \\\"ny\\\": [5, 4, 4, 10, 4], \\\"nz\\\": [2, 1, 1, 0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [12, 12, 4, 15], \\\"py\\\": [13, 12, 0, 11], \\\"pz\\\": [0, 0, -1, -1], \\\"nx\\\": [13, 14, 13, 14], \\\"ny\\\": [9, 12, 10, 13], \\\"nz\\\": [0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 4], \\\"py\\\": [3, 3], \\\"pz\\\": [2, -1], \\\"nx\\\": [9, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 3, \\\"px\\\": [9, 7, 0], \\\"py\\\": [7, 5, 5], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [4, 15, 9], \\\"ny\\\": [5, 14, 9], \\\"nz\\\": [2, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [15, 20, 7, 10, 16], \\\"py\\\": [17, 12, 6, 4, 23], \\\"pz\\\": [0, 0, 1, 1, 0], \\\"nx\\\": [1, 2, 2, 1, 1], \\\"ny\\\": [3, 0, 1, 2, 2], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [2, 1, 1, 11, 2], \\\"py\\\": [16, 4, 5, 12, 14], \\\"pz\\\": [0, 1, 1, 0, 0], \\\"nx\\\": [4, 6, 3, 19, 1], \\\"ny\\\": [4, 2, 5, 19, 2], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [15, 14, 14], \\\"py\\\": [1, 1, 0], \\\"pz\\\": [0, 0, 0], \\\"nx\\\": [4, 8, 4], \\\"ny\\\": [3, 4, 2], \\\"nz\\\": [2, 1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [2, 3, 1, 2, 7], \\\"py\\\": [8, 12, 4, 9, 13], \\\"pz\\\": [1, 0, 2, 1, 0], \\\"nx\\\": [1, 1, 0, 0, 0], \\\"ny\\\": [21, 20, 18, 17, 9], \\\"nz\\\": [0, 0, 0, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [17, 15, 17, 16, 16], \\\"py\\\": [12, 12, 22, 23, 12], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [7, 3, 16, 1, 0], \\\"ny\\\": [8, 6, 8, 3, 9], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 17, 18, 18, 18], \\\"py\\\": [6, 12, 12, 13, 13], \\\"pz\\\": [1, 0, 0, 0, -1], \\\"nx\\\": [23, 23, 20, 11, 11], \\\"ny\\\": [12, 13, 23, 7, 8], \\\"nz\\\": [0, 0, 0, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [4, 7], \\\"pz\\\": [2, 1], \\\"nx\\\": [4, 4], \\\"ny\\\": [10, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [4, 22, 19, 12], \\\"py\\\": [5, 8, 14, 9], \\\"pz\\\": [2, 0, 0, 0], \\\"nx\\\": [8, 4, 4, 2], \\\"ny\\\": [4, 4, 1, 2], \\\"nz\\\": [1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 21], \\\"py\\\": [7, 14], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 2], \\\"ny\\\": [7, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 3, \\\"px\\\": [7, 4, 17], \\\"py\\\": [3, 1, 6], \\\"pz\\\": [0, 1, -1], \\\"nx\\\": [3, 4, 5], \\\"ny\\\": [0, 2, 1], \\\"nz\\\": [1, 0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [15, 7, 14, 0], \\\"py\\\": [3, 1, 3, 7], \\\"pz\\\": [0, 1, 0, -1], \\\"nx\\\": [8, 18, 17, 18], \\\"ny\\\": [0, 1, 1, 2], \\\"nz\\\": [1, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 12, 12, 6], \\\"py\\\": [10, 11, 12, 13, 6], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [8, 15, 15, 4, 8], \\\"ny\\\": [10, 10, 9, 2, 4], \\\"nz\\\": [0, 0, 0, 2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 12], \\\"py\\\": [13, 11], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 8], \\\"ny\\\": [4, 10], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 0, 0, 0], \\\"py\\\": [10, 9, 12, 11, 4], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [8, 9, 8, 9, 9], \\\"ny\\\": [10, 4, 4, 5, 5], \\\"nz\\\": [1, 1, 1, 1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [7, 0, 1], \\\"py\\\": [1, 9, 8], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [4, 3, 3], \\\"ny\\\": [7, 15, 16], \\\"nz\\\": [0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 7], \\\"py\\\": [15, 23], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 18], \\\"ny\\\": [21, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [17, 4, 19, 18, 8], \\\"py\\\": [12, 3, 12, 17, 6], \\\"pz\\\": [0, 2, 0, 0, 1], \\\"nx\\\": [23, 23, 11, 22, 16], \\\"ny\\\": [0, 1, 0, 21, -1], \\\"nz\\\": [0, 0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 4], \\\"py\\\": [13, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 2], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [21, 20, 10, 10, 21], \\\"py\\\": [13, 14, 10, 7, 11], \\\"pz\\\": [0, 0, 1, 1, 0], \\\"nx\\\": [4, 4, 4, 5, 5], \\\"ny\\\": [18, 17, 19, 20, 20], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 3], \\\"py\\\": [11, 13], \\\"pz\\\": [1, 0], \\\"nx\\\": [12, 4], \\\"ny\\\": [17, 17], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 5], \\\"py\\\": [13, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 2], \\\"ny\\\": [1, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 7], \\\"py\\\": [17, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [14, 4], \\\"ny\\\": [15, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 11], \\\"py\\\": [3, 8], \\\"pz\\\": [2, 0], \\\"nx\\\": [13, 13], \\\"ny\\\": [9, 8], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 3], \\\"py\\\": [11, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [9, 5], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 3, \\\"px\\\": [12, 6, 9], \\\"py\\\": [9, 10, 11], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [2, 1, 5], \\\"ny\\\": [2, 1, 6], \\\"nz\\\": [2, 2, 1] }, { \\\"size\\\": 4, \\\"px\\\": [4, 5, 5, 1], \\\"py\\\": [11, 11, 11, 3], \\\"pz\\\": [1, 0, 1, 2], \\\"nx\\\": [0, 0, 5, 4], \\\"ny\\\": [23, 22, 0, 0], \\\"nz\\\": [0, 0, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [15, 7, 17, 15, 16], \\\"py\\\": [1, 0, 2, 2, 0], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [7, 4, 7, 4, 8], \\\"ny\\\": [5, 2, 4, 3, 4], \\\"nz\\\": [1, 2, 1, 2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 12], \\\"py\\\": [11, 23], \\\"pz\\\": [1, 0], \\\"nx\\\": [12, 4], \\\"ny\\\": [21, 2], \\\"nz\\\": [0, -1] }], \\\"alpha\\\": [-1.535800e+00, 1.535800e+00, -8.580514e-01, 8.580514e-01, -8.625210e-01, 8.625210e-01, -7.177500e-01, 7.177500e-01, -6.832222e-01, 6.832222e-01, -5.736298e-01, 5.736298e-01, -5.028217e-01, 5.028217e-01, -5.091788e-01, 5.091788e-01, -5.791940e-01, 5.791940e-01, -4.924942e-01, 4.924942e-01, -5.489055e-01, 5.489055e-01, -4.528190e-01, 4.528190e-01, -4.748324e-01, 4.748324e-01, -4.150403e-01, 4.150403e-01, -4.820464e-01, 4.820464e-01, -4.840212e-01, 4.840212e-01, -3.941872e-01, 3.941872e-01, -3.663507e-01, 3.663507e-01, -3.814835e-01, 3.814835e-01, -3.936426e-01, 3.936426e-01, -3.049970e-01, 3.049970e-01, -3.604256e-01, 3.604256e-01, -3.974041e-01, 3.974041e-01, -4.203486e-01, 4.203486e-01, -3.174435e-01, 3.174435e-01, -3.426336e-01, 3.426336e-01, -4.492150e-01, 4.492150e-01, -3.538784e-01, 3.538784e-01, -3.679703e-01, 3.679703e-01, -3.985452e-01, 3.985452e-01, -2.884028e-01, 2.884028e-01, -2.797264e-01, 2.797264e-01, -2.664214e-01, 2.664214e-01, -2.484857e-01, 2.484857e-01, -2.581492e-01, 2.581492e-01, -2.943778e-01, 2.943778e-01, -2.315507e-01, 2.315507e-01, -2.979337e-01, 2.979337e-01, -2.976173e-01, 2.976173e-01, -2.847965e-01, 2.847965e-01, -2.814763e-01, 2.814763e-01, -2.489068e-01, 2.489068e-01, -2.632427e-01, 2.632427e-01, -3.308292e-01, 3.308292e-01, -2.790170e-01, 2.790170e-01] }, { \\\"count\\\": 61, \\\"threshold\\\": -5.239104e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [8, 8, 11, 15, 6], \\\"py\\\": [3, 6, 5, 3, 4], \\\"pz\\\": [0, 1, 0, 0, 1], \\\"nx\\\": [3, 9, 14, 8, 4], \\\"ny\\\": [4, 8, 8, 7, 2], \\\"nz\\\": [1, 0, 0, 0, 2] }, { \\\"size\\\": 5, \\\"px\\\": [11, 12, 10, 6, 9], \\\"py\\\": [3, 3, 2, 13, 2], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [0, 0, 5, 2, 2], \\\"ny\\\": [13, 1, 8, 5, 2], \\\"nz\\\": [0, 1, 1, 2, 2] }, { \\\"size\\\": 5, \\\"px\\\": [11, 5, 11, 11, 4], \\\"py\\\": [9, 13, 10, 11, 6], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [4, 15, 9, 3, 3], \\\"ny\\\": [5, 8, 9, 4, 4], \\\"nz\\\": [1, 0, 0, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [15, 16, 8, 17, 17], \\\"py\\\": [1, 2, 0, 2, 2], \\\"pz\\\": [0, 0, 1, 0, -1], \\\"nx\\\": [23, 23, 23, 23, 23], \\\"ny\\\": [4, 0, 2, 3, 1], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [9, 18, 17, 18], \\\"py\\\": [7, 13, 13, 14], \\\"pz\\\": [1, 0, 0, 0], \\\"nx\\\": [9, 7, 4, 8], \\\"ny\\\": [4, 10, 2, 4], \\\"nz\\\": [1, 1, 2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 11, 12, 12, 6], \\\"py\\\": [6, 5, 14, 5, 3], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [13, 8, 14, 7, 7], \\\"ny\\\": [16, 4, 7, 4, 4], \\\"nz\\\": [0, 1, 0, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 6, 3, 7, 12], \\\"py\\\": [7, 12, 7, 11, 8], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [16, 4, 4, 4, 7], \\\"ny\\\": [8, 4, 4, 4, 4], \\\"nz\\\": [0, 1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 4, 5, 3, 3], \\\"py\\\": [2, 3, 2, 0, 0], \\\"pz\\\": [0, 0, 0, 1, -1], \\\"nx\\\": [1, 0, 1, 0, 0], \\\"ny\\\": [0, 3, 1, 1, 2], \\\"nz\\\": [0, 0, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [15, 9], \\\"py\\\": [11, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [14, 5], \\\"ny\\\": [9, 11], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 19, 19, 10, 20], \\\"py\\\": [7, 20, 14, 6, 12], \\\"pz\\\": [1, 0, 0, 1, 0], \\\"nx\\\": [23, 22, 11, 23, 23], \\\"ny\\\": [21, 23, 9, 20, 20], \\\"nz\\\": [0, 0, 1, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [1, 1, 5, 1, 1], \\\"py\\\": [8, 6, 6, 9, 4], \\\"pz\\\": [0, 1, 1, 0, 2], \\\"nx\\\": [3, 3, 3, 2, 5], \\\"ny\\\": [4, 4, 2, 5, 4], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [13, 12, 3, 11, 11], \\\"py\\\": [2, 2, 0, 1, 2], \\\"pz\\\": [0, 0, 2, 0, 0], \\\"nx\\\": [3, 6, 8, 4, 3], \\\"ny\\\": [2, 9, 4, 4, 5], \\\"nz\\\": [2, 1, 1, 1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [12, 12, 6], \\\"py\\\": [11, 12, 9], \\\"pz\\\": [0, 0, -1], \\\"nx\\\": [2, 1, 9], \\\"ny\\\": [6, 1, 14], \\\"nz\\\": [0, 2, 0] }, { \\\"size\\\": 5, \\\"px\\\": [6, 3, 17, 16, 16], \\\"py\\\": [4, 2, 14, 23, 13], \\\"pz\\\": [1, 2, 0, 0, 0], \\\"nx\\\": [8, 10, 21, 5, 1], \\\"ny\\\": [4, 10, 11, 0, 0], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [5, 6, 1, 3, 3], \\\"py\\\": [15, 14, 4, 7, 7], \\\"pz\\\": [0, 0, 2, 1, -1], \\\"nx\\\": [1, 0, 0, 1, 1], \\\"ny\\\": [5, 8, 7, 18, 17], \\\"nz\\\": [2, 1, 1, 0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [6, 12, 5, 3], \\\"py\\\": [6, 12, 2, 7], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [14, 13, 13, 7], \\\"ny\\\": [12, 10, 9, 8], \\\"nz\\\": [0, 0, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [7, 15], \\\"pz\\\": [1, 0], \\\"nx\\\": [3, 3], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 10, 12, 2], \\\"py\\\": [18, 18, 18, 3], \\\"pz\\\": [0, 0, 0, 2], \\\"nx\\\": [11, 17, 4, 16], \\\"ny\\\": [16, 4, 4, 21], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 8, 8, 5, 2], \\\"py\\\": [4, 4, 4, 2, 3], \\\"pz\\\": [0, 0, -1, -1, -1], \\\"nx\\\": [2, 2, 4, 4, 2], \\\"ny\\\": [1, 2, 10, 5, 4], \\\"nz\\\": [2, 2, 1, 1, 2] }, { \\\"size\\\": 4, \\\"px\\\": [8, 18, 14, 18], \\\"py\\\": [7, 16, 23, 15], \\\"pz\\\": [1, 0, 0, 0], \\\"nx\\\": [14, 3, 1, 0], \\\"ny\\\": [21, 1, 9, 3], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 3], \\\"py\\\": [9, 5], \\\"pz\\\": [0, 2], \\\"nx\\\": [8, 1], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 9], \\\"py\\\": [1, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [19, 20], \\\"ny\\\": [1, 2], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [10, 10, 10], \\\"py\\\": [6, 6, 8], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [22, 21, 22], \\\"ny\\\": [13, 18, 12], \\\"nz\\\": [0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [4, 1], \\\"pz\\\": [2, -1], \\\"nx\\\": [2, 4], \\\"ny\\\": [5, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [21, 21, 21, 21, 21], \\\"py\\\": [19, 17, 18, 15, 16], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [11, 21, 6, 1, 21], \\\"ny\\\": [17, 1, 10, 0, 2], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [7, 3, 4, 4, 4], \\\"py\\\": [23, 13, 14, 16, 13], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [21, 22, 22, 22, 22], \\\"ny\\\": [23, 21, 20, 19, 19], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 8], \\\"py\\\": [6, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [23, 23, 11, 23, 23], \\\"py\\\": [8, 12, 6, 11, 10], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [4, 4, 3, 8, 8], \\\"ny\\\": [3, 8, 4, 4, 4], \\\"nz\\\": [1, 1, 1, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 9, 4, 7, 10], \\\"py\\\": [2, 1, 0, 2, 1], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [5, 5, 6, 4, 4], \\\"ny\\\": [1, 0, 0, 2, 1], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 2], \\\"py\\\": [13, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [15, 9], \\\"ny\\\": [15, 4], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [4, 9], \\\"pz\\\": [2, 1], \\\"nx\\\": [3, 13], \\\"ny\\\": [4, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [3, 6, 2], \\\"py\\\": [10, 22, 4], \\\"pz\\\": [1, 0, 2], \\\"nx\\\": [4, 2, 1], \\\"ny\\\": [10, 4, 3], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 0], \\\"py\\\": [9, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [0, 0], \\\"ny\\\": [23, 22], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 7], \\\"py\\\": [0, 1], \\\"pz\\\": [0, 0], \\\"nx\\\": [4, 4], \\\"ny\\\": [8, 8], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [7, 4, 4, 6, 3], \\\"py\\\": [8, 4, 5, 5, 3], \\\"pz\\\": [1, 2, 2, 1, 2], \\\"nx\\\": [1, 0, 2, 0, 0], \\\"ny\\\": [1, 0, 0, 2, 4], \\\"nz\\\": [0, 2, 0, 1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [10, 4, 4], \\\"py\\\": [6, 1, 5], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [5, 23, 22], \\\"ny\\\": [4, 13, 7], \\\"nz\\\": [2, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [6, 5], \\\"pz\\\": [1, 1], \\\"nx\\\": [6, 0], \\\"ny\\\": [9, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [0, 1, 1, 0, 0], \\\"py\\\": [5, 18, 19, 16, 6], \\\"pz\\\": [2, 0, 0, 0, 1], \\\"nx\\\": [5, 9, 4, 8, 8], \\\"ny\\\": [8, 7, 3, 7, 7], \\\"nz\\\": [1, 0, 1, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 12], \\\"py\\\": [23, 23], \\\"pz\\\": [0, 0], \\\"nx\\\": [7, 6], \\\"ny\\\": [8, 10], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 19], \\\"py\\\": [12, 8], \\\"pz\\\": [0, 0], \\\"nx\\\": [18, 5], \\\"ny\\\": [8, 11], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [2, 8, 6, 4, 4], \\\"py\\\": [3, 23, 14, 6, 9], \\\"pz\\\": [2, 0, 0, 1, 1], \\\"nx\\\": [0, 0, 0, 0, 1], \\\"ny\\\": [21, 20, 5, 19, 23], \\\"nz\\\": [0, 0, 2, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 22], \\\"py\\\": [4, 14], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 8], \\\"ny\\\": [1, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [1, 1, 0, 1, 1], \\\"py\\\": [6, 8, 3, 12, 7], \\\"pz\\\": [1, 1, 2, 0, 1], \\\"nx\\\": [21, 21, 19, 10, 10], \\\"ny\\\": [14, 16, 23, 9, 9], \\\"nz\\\": [0, 0, 0, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 3], \\\"py\\\": [23, 2], \\\"pz\\\": [0, 2], \\\"nx\\\": [10, 3], \\\"ny\\\": [21, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 9], \\\"py\\\": [7, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [9, 9], \\\"ny\\\": [11, 10], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [23, 11, 23, 23, 23], \\\"py\\\": [18, 10, 19, 20, 16], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [3, 3, 2, 3, 2], \\\"ny\\\": [15, 16, 10, 17, 9], \\\"nz\\\": [0, 0, 1, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 14], \\\"py\\\": [7, 18], \\\"pz\\\": [1, 0], \\\"nx\\\": [7, 10], \\\"ny\\\": [8, 8], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 5], \\\"py\\\": [6, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [4, 5], \\\"py\\\": [13, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 4], \\\"ny\\\": [17, 19], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [2, 3, 3], \\\"py\\\": [11, 17, 19], \\\"pz\\\": [1, 0, 0], \\\"nx\\\": [7, 7, 4], \\\"ny\\\": [8, 8, 5], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 6], \\\"py\\\": [6, 5], \\\"pz\\\": [1, -1], \\\"nx\\\": [2, 9], \\\"ny\\\": [4, 12], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [8, 8, 9, 2, 2], \\\"py\\\": [18, 13, 12, 3, 3], \\\"pz\\\": [0, 0, 0, 2, -1], \\\"nx\\\": [23, 11, 23, 11, 11], \\\"ny\\\": [13, 6, 14, 7, 8], \\\"nz\\\": [0, 1, 0, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 11], \\\"py\\\": [6, 13], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 10], \\\"py\\\": [0, 6], \\\"pz\\\": [1, 1], \\\"nx\\\": [9, 4], \\\"ny\\\": [6, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [3, 10, 9], \\\"py\\\": [8, 6, 0], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [2, 2, 2], \\\"ny\\\": [15, 16, 9], \\\"nz\\\": [0, 0, 1] }, { \\\"size\\\": 3, \\\"px\\\": [14, 15, 0], \\\"py\\\": [2, 2, 5], \\\"pz\\\": [0, 0, -1], \\\"nx\\\": [17, 17, 18], \\\"ny\\\": [0, 1, 2], \\\"nz\\\": [0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 5], \\\"py\\\": [14, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [10, 9], \\\"ny\\\": [12, 14], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 8], \\\"py\\\": [7, 8], \\\"pz\\\": [1, 1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 0, 0, 0], \\\"py\\\": [19, 18, 10, 5, 20], \\\"pz\\\": [0, 0, 1, 2, 0], \\\"nx\\\": [4, 8, 2, 4, 4], \\\"ny\\\": [4, 15, 5, 10, 10], \\\"nz\\\": [1, 0, 2, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 0], \\\"py\\\": [13, 18], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 3], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [23, 22, 22, 11, 22], \\\"py\\\": [16, 13, 7, 6, 14], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [13, 7, 15, 14, 14], \\\"ny\\\": [6, 3, 7, 6, 6], \\\"nz\\\": [0, 1, 0, 0, -1] }], \\\"alpha\\\": [-1.428861e+00, 1.428861e+00, -8.591837e-01, 8.591837e-01, -7.734305e-01, 7.734305e-01, -6.534460e-01, 6.534460e-01, -6.262547e-01, 6.262547e-01, -5.231782e-01, 5.231782e-01, -4.984303e-01, 4.984303e-01, -4.913187e-01, 4.913187e-01, -4.852198e-01, 4.852198e-01, -4.906681e-01, 4.906681e-01, -4.126248e-01, 4.126248e-01, -4.590814e-01, 4.590814e-01, -4.653825e-01, 4.653825e-01, -4.179600e-01, 4.179600e-01, -4.357392e-01, 4.357392e-01, -4.087982e-01, 4.087982e-01, -4.594812e-01, 4.594812e-01, -4.858794e-01, 4.858794e-01, -3.713580e-01, 3.713580e-01, -3.894534e-01, 3.894534e-01, -3.127168e-01, 3.127168e-01, -4.012654e-01, 4.012654e-01, -3.370552e-01, 3.370552e-01, -3.534712e-01, 3.534712e-01, -3.843450e-01, 3.843450e-01, -2.688805e-01, 2.688805e-01, -3.500203e-01, 3.500203e-01, -2.827120e-01, 2.827120e-01, -3.742119e-01, 3.742119e-01, -3.219074e-01, 3.219074e-01, -2.544953e-01, 2.544953e-01, -3.355513e-01, 3.355513e-01, -2.672670e-01, 2.672670e-01, -2.932047e-01, 2.932047e-01, -2.404618e-01, 2.404618e-01, -2.354372e-01, 2.354372e-01, -2.657955e-01, 2.657955e-01, -2.293701e-01, 2.293701e-01, -2.708918e-01, 2.708918e-01, -2.340181e-01, 2.340181e-01, -2.464815e-01, 2.464815e-01, -2.944239e-01, 2.944239e-01, -2.407960e-01, 2.407960e-01, -3.029642e-01, 3.029642e-01, -2.684602e-01, 2.684602e-01, -2.495078e-01, 2.495078e-01, -2.539708e-01, 2.539708e-01, -2.989293e-01, 2.989293e-01, -2.391309e-01, 2.391309e-01, -2.531372e-01, 2.531372e-01, -2.500390e-01, 2.500390e-01, -2.295077e-01, 2.295077e-01, -2.526125e-01, 2.526125e-01, -2.337182e-01, 2.337182e-01, -1.984756e-01, 1.984756e-01, -3.089996e-01, 3.089996e-01, -2.589053e-01, 2.589053e-01, -2.962490e-01, 2.962490e-01, -2.458660e-01, 2.458660e-01, -2.515206e-01, 2.515206e-01, -2.637299e-01, 2.637299e-01] }, { \\\"count\\\": 80, \\\"threshold\\\": -5.185898e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [12, 17, 13, 10, 15], \\\"py\\\": [9, 13, 3, 3, 2], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [8, 14, 6, 9, 4], \\\"ny\\\": [10, 9, 8, 8, 2], \\\"nz\\\": [1, 0, 1, 0, 2] }, { \\\"size\\\": 5, \\\"px\\\": [3, 11, 8, 10, 9], \\\"py\\\": [7, 4, 3, 3, 3], \\\"pz\\\": [1, 0, 0, 0, 0], \\\"nx\\\": [2, 1, 5, 0, 0], \\\"ny\\\": [2, 15, 8, 4, 13], \\\"nz\\\": [2, 0, 1, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [11, 11, 11, 4, 17], \\\"py\\\": [7, 9, 8, 6, 11], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [8, 8, 8, 3, 0], \\\"ny\\\": [4, 8, 8, 8, 13], \\\"nz\\\": [1, 0, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [14, 15, 7, 16, 16], \\\"py\\\": [3, 3, 1, 3, 3], \\\"pz\\\": [0, 0, 1, 0, -1], \\\"nx\\\": [23, 22, 23, 22, 22], \\\"ny\\\": [6, 2, 14, 3, 4], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [6, 4, 7, 15], \\\"py\\\": [4, 2, 6, 17], \\\"pz\\\": [1, 2, 1, 0], \\\"nx\\\": [3, 8, 3, 14], \\\"ny\\\": [4, 4, 10, 22], \\\"nz\\\": [1, 1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [3, 5, 22], \\\"py\\\": [7, 7, 5], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [2, 2, 4], \\\"ny\\\": [5, 2, 7], \\\"nz\\\": [2, 2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [7, 6, 5, 6, 3], \\\"py\\\": [0, 1, 2, 2, 0], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [0, 1, 1, 0, 1], \\\"ny\\\": [0, 2, 1, 2, 0], \\\"nz\\\": [2, 0, 0, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [11, 11, 11, 11, 5], \\\"py\\\": [11, 10, 13, 12, 6], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [15, 14, 5, 2, 8], \\\"ny\\\": [9, 8, 10, 2, 10], \\\"nz\\\": [0, 0, 1, 2, 0] }, { \\\"size\\\": 5, \\\"px\\\": [8, 5, 6, 8, 7], \\\"py\\\": [12, 12, 12, 23, 12], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [3, 17, 5, 2, 8], \\\"ny\\\": [4, 0, 10, 2, 10], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 10, 10, 19, 20], \\\"py\\\": [8, 10, 9, 15, 13], \\\"pz\\\": [1, 1, 1, 0, 0], \\\"nx\\\": [23, 11, 5, 23, 23], \\\"ny\\\": [20, 10, 5, 19, 19], \\\"nz\\\": [0, 1, 2, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 13, 3, 10, 12], \\\"py\\\": [2, 0, 0, 1, 1], \\\"pz\\\": [0, 0, 2, 0, 0], \\\"nx\\\": [3, 3, 6, 7, 7], \\\"ny\\\": [5, 2, 11, 4, 4], \\\"nz\\\": [2, 2, 1, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 7], \\\"py\\\": [17, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [14, 0], \\\"ny\\\": [16, 10], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [17, 15, 18, 12, 19], \\\"py\\\": [22, 12, 13, 7, 15], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [8, 15, 6, 1, 7], \\\"ny\\\": [4, 8, 22, 5, 4], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 9, 18, 19, 8], \\\"py\\\": [2, 1, 3, 3, 1], \\\"pz\\\": [1, 1, 0, 0, 1], \\\"nx\\\": [23, 23, 23, 11, 11], \\\"ny\\\": [0, 1, 2, 0, 1], \\\"nz\\\": [0, 0, 0, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 23, 0, 1, 8], \\\"py\\\": [14, 5, 0, 17, 1], \\\"pz\\\": [0, -1, -1, -1, -1], \\\"nx\\\": [8, 14, 15, 18, 14], \\\"ny\\\": [10, 11, 14, 19, 10], \\\"nz\\\": [1, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 6], \\\"py\\\": [6, 13], \\\"pz\\\": [1, 0], \\\"nx\\\": [4, 12], \\\"ny\\\": [10, 14], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [5, 23, 11, 23, 13], \\\"py\\\": [3, 10, 4, 11, 12], \\\"pz\\\": [2, 0, 1, 0, 0], \\\"nx\\\": [7, 4, 9, 8, 8], \\\"ny\\\": [4, 2, 4, 4, 4], \\\"nz\\\": [1, 2, 1, 1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [9, 5, 11], \\\"py\\\": [4, 2, 4], \\\"pz\\\": [0, 1, -1], \\\"nx\\\": [5, 2, 4], \\\"ny\\\": [0, 1, 2], \\\"nz\\\": [0, 2, 0] }, { \\\"size\\\": 5, \\\"px\\\": [5, 2, 2, 5, 8], \\\"py\\\": [12, 4, 4, 6, 13], \\\"pz\\\": [0, 2, 1, 1, 0], \\\"nx\\\": [3, 9, 4, 4, 8], \\\"ny\\\": [4, 0, 2, 2, 4], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [9, 5, 22], \\\"py\\\": [7, 4, 20], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [8, 19, 4], \\\"ny\\\": [4, 18, 5], \\\"nz\\\": [1, 0, 2] }, { \\\"size\\\": 5, \\\"px\\\": [2, 3, 3, 3, 3], \\\"py\\\": [10, 16, 15, 14, 13], \\\"pz\\\": [1, 0, 0, 0, 0], \\\"nx\\\": [0, 0, 0, 1, 0], \\\"ny\\\": [10, 20, 5, 23, 21], \\\"nz\\\": [1, 0, 2, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 11], \\\"py\\\": [4, 18], \\\"pz\\\": [0, 0], \\\"nx\\\": [11, 23], \\\"ny\\\": [17, 13], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 8], \\\"py\\\": [16, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [8, 3], \\\"ny\\\": [4, 6], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [13, 5, 14, 12, 3], \\\"py\\\": [4, 7, 4, 5, 3], \\\"pz\\\": [0, 1, 0, 0, 1], \\\"nx\\\": [21, 20, 21, 21, 21], \\\"ny\\\": [2, 0, 4, 3, 3], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [20, 20, 20, 10], \\\"py\\\": [21, 19, 20, 8], \\\"pz\\\": [0, 0, 0, 1], \\\"nx\\\": [8, 11, 0, 2], \\\"ny\\\": [10, 8, 1, 3], \\\"nz\\\": [1, -1, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [6, 7, 12, 8], \\\"py\\\": [12, 12, 8, 11], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [9, 5, 5, 18], \\\"ny\\\": [9, 2, 0, 20], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [11, 5, 9], \\\"py\\\": [0, 0, 0], \\\"pz\\\": [0, 1, 0], \\\"nx\\\": [2, 6, 3], \\\"ny\\\": [3, 7, 4], \\\"nz\\\": [2, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [18, 18, 9, 17, 17], \\\"py\\\": [15, 14, 7, 14, 14], \\\"pz\\\": [0, 0, 1, 0, -1], \\\"nx\\\": [21, 21, 21, 22, 20], \\\"ny\\\": [15, 21, 17, 14, 23], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [9, 12, 12, 7, 4], \\\"py\\\": [4, 11, 12, 6, 5], \\\"pz\\\": [1, 0, 0, 1, 2], \\\"nx\\\": [16, 11, 9, 6, 20], \\\"ny\\\": [8, 4, 11, 10, 23], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 11, 10, 11, 11], \\\"py\\\": [23, 4, 4, 5, 23], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [11, 11, 7, 3, 20], \\\"ny\\\": [21, 21, 11, 1, 23], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 1], \\\"py\\\": [12, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [10, 10], \\\"ny\\\": [3, 2], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 4, 15, 9, 9], \\\"py\\\": [8, 4, 23, 7, 7], \\\"pz\\\": [1, 2, 0, 1, -1], \\\"nx\\\": [5, 3, 3, 3, 2], \\\"ny\\\": [23, 19, 17, 18, 15], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 0], \\\"py\\\": [16, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [9, 4], \\\"ny\\\": [15, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 3], \\\"py\\\": [3, 7], \\\"pz\\\": [2, 1], \\\"nx\\\": [3, 8], \\\"ny\\\": [4, 10], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [9, 4, 3], \\\"py\\\": [18, 0, 14], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [3, 5, 2], \\\"ny\\\": [5, 8, 5], \\\"nz\\\": [2, 1, 2] }, { \\\"size\\\": 3, \\\"px\\\": [1, 1, 10], \\\"py\\\": [2, 1, 7], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [0, 0, 0], \\\"ny\\\": [3, 5, 1], \\\"nz\\\": [0, 0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 11, 5, 2], \\\"py\\\": [12, 13, 7, 3], \\\"pz\\\": [0, 0, -1, -1], \\\"nx\\\": [5, 10, 10, 9], \\\"ny\\\": [6, 9, 10, 13], \\\"nz\\\": [1, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 8], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [9, 1], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 1, 1, 0], \\\"py\\\": [4, 10, 12, 13, 5], \\\"pz\\\": [1, 0, 0, 0, 1], \\\"nx\\\": [4, 4, 8, 7, 7], \\\"ny\\\": [3, 2, 10, 4, 4], \\\"nz\\\": [2, 2, 1, 1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [3, 4, 3], \\\"py\\\": [1, 1, 2], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [4, 5, 3], \\\"ny\\\": [1, 0, 2], \\\"nz\\\": [0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 2], \\\"py\\\": [6, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [6, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [12, 13, 15, 16, 7], \\\"py\\\": [1, 1, 2, 2, 1], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [4, 4, 4, 3, 7], \\\"ny\\\": [2, 2, 4, 2, 4], \\\"nz\\\": [2, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 3, 2, 11, 5], \\\"py\\\": [23, 7, 4, 10, 6], \\\"pz\\\": [0, 1, 2, 0, 1], \\\"nx\\\": [21, 20, 11, 21, 21], \\\"ny\\\": [21, 23, 8, 20, 20], \\\"nz\\\": [0, 0, 1, 0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [12, 6, 13, 12], \\\"py\\\": [7, 3, 5, 6], \\\"pz\\\": [0, 1, 0, 0], \\\"nx\\\": [3, 0, 5, 10], \\\"ny\\\": [4, 6, 5, 1], \\\"nz\\\": [1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 4], \\\"py\\\": [4, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [12, 11], \\\"ny\\\": [2, 1], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [2, 3, 22, 5], \\\"py\\\": [6, 1, 18, 5], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [0, 0, 0, 3], \\\"ny\\\": [14, 3, 12, 18], \\\"nz\\\": [0, 2, 0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [10, 20, 21], \\\"py\\\": [10, 18, 15], \\\"pz\\\": [1, 0, 0], \\\"nx\\\": [15, 1, 2], \\\"ny\\\": [7, 0, 8], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 0, 0, 0], \\\"py\\\": [4, 7, 13, 4, 6], \\\"pz\\\": [1, 1, 0, 2, 1], \\\"nx\\\": [5, 9, 8, 4, 4], \\\"ny\\\": [3, 7, 7, 3, 3], \\\"nz\\\": [1, 0, 0, 1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [13, 12, 14], \\\"py\\\": [2, 2, 2], \\\"pz\\\": [0, 0, 0], \\\"nx\\\": [4, 4, 4], \\\"ny\\\": [2, 2, 5], \\\"nz\\\": [2, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [5, 4, 6, 2, 12], \\\"py\\\": [7, 9, 7, 4, 10], \\\"pz\\\": [0, 1, 0, 2, 0], \\\"nx\\\": [6, 1, 2, 5, 2], \\\"ny\\\": [9, 2, 4, 13, 4], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 1], \\\"py\\\": [12, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 0], \\\"ny\\\": [7, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 5, \\\"px\\\": [8, 8, 1, 16, 6], \\\"py\\\": [6, 6, 4, 8, 11], \\\"pz\\\": [1, -1, -1, -1, -1], \\\"nx\\\": [13, 5, 4, 4, 13], \\\"ny\\\": [12, 1, 2, 5, 11], \\\"nz\\\": [0, 2, 2, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 6], \\\"py\\\": [4, 14], \\\"pz\\\": [1, 0], \\\"nx\\\": [9, 5], \\\"ny\\\": [7, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 6], \\\"py\\\": [4, 14], \\\"pz\\\": [2, 0], \\\"nx\\\": [9, 2], \\\"ny\\\": [15, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 19, 20, 10, 9], \\\"py\\\": [1, 2, 3, 0, 0], \\\"pz\\\": [1, 0, 0, 1, -1], \\\"nx\\\": [11, 23, 23, 11, 23], \\\"ny\\\": [0, 3, 1, 1, 2], \\\"nz\\\": [1, 0, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 9], \\\"py\\\": [3, 12], \\\"pz\\\": [2, 0], \\\"nx\\\": [2, 6], \\\"ny\\\": [4, 6], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 0, 0, 0], \\\"py\\\": [4, 10, 11, 9, 9], \\\"pz\\\": [1, 0, 0, 0, -1], \\\"nx\\\": [16, 2, 17, 8, 4], \\\"ny\\\": [10, 2, 9, 4, 4], \\\"nz\\\": [0, 2, 0, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 0], \\\"py\\\": [5, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 8], \\\"ny\\\": [4, 8], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [21, 21], \\\"py\\\": [9, 10], \\\"pz\\\": [0, 0], \\\"nx\\\": [11, 8], \\\"ny\\\": [18, 8], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 7], \\\"py\\\": [23, 9], \\\"pz\\\": [0, 1], \\\"nx\\\": [7, 13], \\\"ny\\\": [10, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 12, 6, 2], \\\"py\\\": [11, 13, 12, 6, 4], \\\"pz\\\": [0, 0, 0, -1, -1], \\\"nx\\\": [0, 0, 0, 0, 0], \\\"ny\\\": [14, 13, 6, 12, 11], \\\"nz\\\": [0, 0, 1, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 9], \\\"py\\\": [6, 11], \\\"pz\\\": [1, -1], \\\"nx\\\": [15, 15], \\\"ny\\\": [11, 10], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [4, 6, 7, 2], \\\"py\\\": [8, 4, 23, 7], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [4, 20, 19, 17], \\\"ny\\\": [0, 3, 1, 1], \\\"nz\\\": [2, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [7, 0], \\\"py\\\": [6, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [7, 4], \\\"ny\\\": [8, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [10, 0], \\\"py\\\": [7, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [15, 15], \\\"ny\\\": [15, 14], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [6, 2, 5, 2, 4], \\\"py\\\": [23, 7, 21, 8, 16], \\\"pz\\\": [0, 1, 0, 1, 0], \\\"nx\\\": [18, 2, 10, 0, 11], \\\"ny\\\": [9, 3, 23, 5, 3], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 9, 8, 10, 4], \\\"py\\\": [0, 2, 2, 1, 1], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [4, 3, 2, 2, 5], \\\"ny\\\": [7, 3, 4, 2, 17], \\\"nz\\\": [0, 1, 2, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 7], \\\"py\\\": [5, 6], \\\"pz\\\": [1, -1], \\\"nx\\\": [11, 11], \\\"ny\\\": [6, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 11, 5, 6, 11], \\\"py\\\": [8, 10, 5, 5, 9], \\\"pz\\\": [0, 0, 1, 1, 0], \\\"nx\\\": [13, 16, 11, 14, 4], \\\"ny\\\": [9, 13, 11, 20, 23], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 14], \\\"py\\\": [14, 22], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 11], \\\"py\\\": [4, 5], \\\"pz\\\": [2, -1], \\\"nx\\\": [2, 4], \\\"ny\\\": [5, 7], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 0], \\\"py\\\": [0, 0], \\\"pz\\\": [0, 1], \\\"nx\\\": [0, 4], \\\"ny\\\": [0, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 11, 11, 4, 9], \\\"py\\\": [5, 5, 2, 9, 23], \\\"pz\\\": [0, -1, -1, -1, -1], \\\"nx\\\": [11, 12, 10, 9, 5], \\\"ny\\\": [2, 2, 2, 2, 1], \\\"nz\\\": [0, 0, 0, 0, 1] }, { \\\"size\\\": 3, \\\"px\\\": [16, 14, 15], \\\"py\\\": [1, 1, 0], \\\"pz\\\": [0, 0, 0], \\\"nx\\\": [4, 7, 4], \\\"ny\\\": [2, 4, 4], \\\"nz\\\": [2, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 0], \\\"py\\\": [14, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 4], \\\"ny\\\": [5, 17], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 5, \\\"px\\\": [18, 7, 16, 19, 4], \\\"py\\\": [13, 6, 23, 13, 3], \\\"pz\\\": [0, 1, 0, 0, 2], \\\"nx\\\": [5, 2, 3, 4, 4], \\\"ny\\\": [1, 1, 4, 1, 3], \\\"nz\\\": [0, 1, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 8], \\\"py\\\": [7, 6], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [2, 1], \\\"py\\\": [10, 4], \\\"pz\\\": [1, 2], \\\"nx\\\": [4, 4], \\\"ny\\\": [3, 3], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 5], \\\"py\\\": [19, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 12], \\\"ny\\\": [10, 17], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [12, 6, 2, 4, 11], \\\"py\\\": [14, 4, 2, 1, 5], \\\"pz\\\": [0, -1, -1, -1, -1], \\\"nx\\\": [3, 4, 3, 4, 3], \\\"ny\\\": [13, 17, 14, 16, 15], \\\"nz\\\": [0, 0, 0, 0, 0] }], \\\"alpha\\\": [-1.368326e+00, 1.368326e+00, -7.706897e-01, 7.706897e-01, -8.378147e-01, 8.378147e-01, -6.120624e-01, 6.120624e-01, -5.139189e-01, 5.139189e-01, -4.759130e-01, 4.759130e-01, -5.161374e-01, 5.161374e-01, -5.407743e-01, 5.407743e-01, -4.216105e-01, 4.216105e-01, -4.418693e-01, 4.418693e-01, -4.435335e-01, 4.435335e-01, -4.052076e-01, 4.052076e-01, -4.293050e-01, 4.293050e-01, -3.431154e-01, 3.431154e-01, -4.231203e-01, 4.231203e-01, -3.917100e-01, 3.917100e-01, -3.623450e-01, 3.623450e-01, -3.202670e-01, 3.202670e-01, -3.331602e-01, 3.331602e-01, -3.552034e-01, 3.552034e-01, -3.784556e-01, 3.784556e-01, -3.295428e-01, 3.295428e-01, -3.587038e-01, 3.587038e-01, -2.861332e-01, 2.861332e-01, -3.403258e-01, 3.403258e-01, -3.989002e-01, 3.989002e-01, -2.631159e-01, 2.631159e-01, -3.272156e-01, 3.272156e-01, -2.816567e-01, 2.816567e-01, -3.125926e-01, 3.125926e-01, -3.146982e-01, 3.146982e-01, -2.521825e-01, 2.521825e-01, -2.434554e-01, 2.434554e-01, -3.435378e-01, 3.435378e-01, -3.161172e-01, 3.161172e-01, -2.805027e-01, 2.805027e-01, -3.303579e-01, 3.303579e-01, -2.725089e-01, 2.725089e-01, -2.575051e-01, 2.575051e-01, -3.210646e-01, 3.210646e-01, -2.986997e-01, 2.986997e-01, -2.408925e-01, 2.408925e-01, -2.456291e-01, 2.456291e-01, -2.836550e-01, 2.836550e-01, -2.469860e-01, 2.469860e-01, -2.915900e-01, 2.915900e-01, -2.513559e-01, 2.513559e-01, -2.433728e-01, 2.433728e-01, -2.377905e-01, 2.377905e-01, -2.089327e-01, 2.089327e-01, -1.978434e-01, 1.978434e-01, -3.017699e-01, 3.017699e-01, -2.339661e-01, 2.339661e-01, -1.932560e-01, 1.932560e-01, -2.278285e-01, 2.278285e-01, -2.438200e-01, 2.438200e-01, -2.216769e-01, 2.216769e-01, -1.941995e-01, 1.941995e-01, -2.129081e-01, 2.129081e-01, -2.270319e-01, 2.270319e-01, -2.393942e-01, 2.393942e-01, -2.132518e-01, 2.132518e-01, -1.867741e-01, 1.867741e-01, -2.394237e-01, 2.394237e-01, -2.005917e-01, 2.005917e-01, -2.445217e-01, 2.445217e-01, -2.229078e-01, 2.229078e-01, -2.342967e-01, 2.342967e-01, -2.481784e-01, 2.481784e-01, -2.735603e-01, 2.735603e-01, -2.187604e-01, 2.187604e-01, -1.677239e-01, 1.677239e-01, -2.248867e-01, 2.248867e-01, -2.505358e-01, 2.505358e-01, -1.867706e-01, 1.867706e-01, -1.904305e-01, 1.904305e-01, -1.939881e-01, 1.939881e-01, -2.249474e-01, 2.249474e-01, -1.762483e-01, 1.762483e-01, -2.299974e-01, 2.299974e-01] }, { \\\"count\\\": 115, \\\"threshold\\\": -5.151920e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [7, 14, 7, 10, 6], \\\"py\\\": [3, 3, 12, 4, 4], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [14, 3, 14, 9, 3], \\\"ny\\\": [7, 4, 8, 8, 5], \\\"nz\\\": [0, 1, 0, 0, 2] }, { \\\"size\\\": 5, \\\"px\\\": [13, 18, 16, 17, 15], \\\"py\\\": [1, 13, 1, 2, 0], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [23, 23, 8, 11, 22], \\\"ny\\\": [3, 4, 4, 8, 0], \\\"nz\\\": [0, 0, 1, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [16, 6, 6, 7, 12], \\\"py\\\": [12, 13, 4, 12, 5], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [0, 0, 8, 4, 0], \\\"ny\\\": [0, 2, 4, 4, 2], \\\"nz\\\": [0, 0, 1, 1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [12, 13, 7], \\\"py\\\": [13, 18, 6], \\\"pz\\\": [0, 0, 1], \\\"nx\\\": [13, 5, 6], \\\"ny\\\": [16, 3, 8], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 12, 9, 13, 11], \\\"py\\\": [3, 3, 3, 3, 3], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [3, 4, 15, 4, 4], \\\"ny\\\": [2, 5, 10, 4, 4], \\\"nz\\\": [2, 1, 0, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 12, 3, 12], \\\"py\\\": [7, 9, 8, 3, 10], \\\"pz\\\": [0, 0, 0, 2, 0], \\\"nx\\\": [4, 8, 15, 9, 9], \\\"ny\\\": [4, 4, 8, 8, 8], \\\"nz\\\": [1, 1, 0, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 3, 4, 4, 2], \\\"py\\\": [22, 12, 13, 14, 7], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [2, 0, 1, 1, 1], \\\"ny\\\": [23, 5, 22, 21, 21], \\\"nz\\\": [0, 2, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [8, 8], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [4, 10], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 11, 11, 11, 0], \\\"py\\\": [10, 12, 11, 13, 2], \\\"pz\\\": [0, 0, 0, -1, -1], \\\"nx\\\": [8, 13, 13, 13, 13], \\\"ny\\\": [10, 8, 9, 11, 10], \\\"nz\\\": [1, 0, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [16, 16, 15, 17, 18], \\\"py\\\": [12, 23, 11, 12, 12], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [8, 8, 9, 3, 13], \\\"ny\\\": [4, 4, 12, 3, 10], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [17, 16, 6, 5], \\\"py\\\": [14, 13, 4, 5], \\\"pz\\\": [0, 0, -1, -1], \\\"nx\\\": [8, 15, 4, 7], \\\"ny\\\": [10, 14, 4, 8], \\\"nz\\\": [1, 0, 2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [20, 10, 20, 21, 19], \\\"py\\\": [14, 7, 13, 12, 22], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [22, 23, 11, 23, 23], \\\"ny\\\": [23, 22, 11, 21, 20], \\\"nz\\\": [0, 0, 1, 0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [12, 13, 1, 18], \\\"py\\\": [14, 23, 3, 5], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [2, 10, 5, 9], \\\"ny\\\": [2, 9, 8, 14], \\\"nz\\\": [2, 0, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [10, 4, 7, 9, 8], \\\"py\\\": [1, 0, 2, 0, 1], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [2, 3, 5, 3, 3], \\\"ny\\\": [2, 4, 8, 3, 3], \\\"nz\\\": [2, 1, 1, 1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 2, 2, 11], \\\"py\\\": [6, 4, 5, 7], \\\"pz\\\": [0, 2, 2, 0], \\\"nx\\\": [3, 0, 5, 3], \\\"ny\\\": [4, 9, 8, 3], \\\"nz\\\": [1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 10, 9, 12, 12], \\\"py\\\": [11, 2, 1, 10, 10], \\\"pz\\\": [0, 1, 1, 0, -1], \\\"nx\\\": [22, 11, 5, 22, 23], \\\"ny\\\": [1, 1, 0, 0, 3], \\\"nz\\\": [0, 1, 2, 0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [5, 10, 7, 11], \\\"py\\\": [14, 3, 0, 4], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [4, 4, 4, 4], \\\"ny\\\": [17, 18, 15, 16], \\\"nz\\\": [0, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [2, 2, 3, 2, 2], \\\"py\\\": [16, 12, 20, 15, 17], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [12, 8, 4, 15, 15], \\\"ny\\\": [17, 4, 4, 8, 8], \\\"nz\\\": [0, 1, 1, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 1, 6, 12], \\\"py\\\": [11, 10, 3, 6, 10], \\\"pz\\\": [0, 0, -1, -1, -1], \\\"nx\\\": [0, 0, 1, 0, 2], \\\"ny\\\": [4, 0, 2, 1, 0], \\\"nz\\\": [0, 2, 0, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [21, 20, 21, 21, 14], \\\"py\\\": [9, 16, 11, 8, 12], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [17, 6, 15, 0, 2], \\\"ny\\\": [8, 23, 13, 2, 0], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [6, 9, 9, 5], \\\"py\\\": [14, 18, 23, 14], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [9, 5, 5, 12], \\\"ny\\\": [21, 5, 3, 1], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 13], \\\"py\\\": [4, 4], \\\"pz\\\": [0, 0], \\\"nx\\\": [4, 3], \\\"ny\\\": [4, 1], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [7, 8, 11, 4, 10], \\\"py\\\": [3, 3, 2, 1, 2], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [19, 20, 19, 20, 20], \\\"ny\\\": [0, 3, 1, 2, 2], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 1], \\\"py\\\": [7, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 7], \\\"ny\\\": [5, 9], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 10, 1, 5, 1], \\\"py\\\": [10, 12, 6, 6, 5], \\\"pz\\\": [0, 0, 1, 1, 1], \\\"nx\\\": [16, 3, 2, 4, 4], \\\"ny\\\": [10, 4, 2, 4, 4], \\\"nz\\\": [0, 1, 2, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 0], \\\"py\\\": [17, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 4], \\\"ny\\\": [8, 5], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [8, 10, 9, 9, 9], \\\"py\\\": [2, 2, 2, 1, 1], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [4, 2, 3, 3, 2], \\\"ny\\\": [0, 3, 2, 1, 4], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [11, 15, 17, 16], \\\"py\\\": [8, 10, 11, 11], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [14, 1, 1, 2], \\\"ny\\\": [9, 5, 7, 0], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [3, 5, 9], \\\"py\\\": [8, 6, 12], \\\"pz\\\": [0, 1, 0], \\\"nx\\\": [3, 4, 18], \\\"ny\\\": [4, 2, 22], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 1, 7, 3, 3], \\\"py\\\": [13, 4, 13, 7, 7], \\\"pz\\\": [0, 2, 0, 1, -1], \\\"nx\\\": [0, 0, 0, 0, 0], \\\"ny\\\": [16, 15, 8, 13, 14], \\\"nz\\\": [0, 0, 1, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 16], \\\"py\\\": [13, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [5, 23, 11, 23, 23], \\\"py\\\": [5, 12, 4, 16, 15], \\\"pz\\\": [2, 0, 1, 0, 0], \\\"nx\\\": [3, 2, 4, 5, 5], \\\"ny\\\": [4, 2, 4, 11, 11], \\\"nz\\\": [1, 2, 1, 1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [10, 10, 3, 23], \\\"py\\\": [7, 7, 3, 16], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [5, 23, 11, 22], \\\"ny\\\": [4, 13, 7, 16], \\\"nz\\\": [2, 0, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [15, 14, 13, 15, 16], \\\"py\\\": [1, 0, 0, 0, 1], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [4, 9, 8, 8, 8], \\\"ny\\\": [2, 4, 9, 4, 4], \\\"nz\\\": [2, 1, 1, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 4], \\\"py\\\": [5, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 15], \\\"ny\\\": [1, 8], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 12], \\\"py\\\": [6, 9], \\\"pz\\\": [1, 0], \\\"nx\\\": [10, 10], \\\"ny\\\": [10, 10], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [1, 0, 0, 0, 0], \\\"py\\\": [5, 4, 11, 9, 12], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [9, 8, 2, 4, 7], \\\"ny\\\": [7, 7, 2, 4, 7], \\\"nz\\\": [0, 0, 2, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 8], \\\"py\\\": [4, 7], \\\"pz\\\": [2, 1], \\\"nx\\\": [9, 8], \\\"ny\\\": [4, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 6], \\\"py\\\": [4, 1], \\\"pz\\\": [2, -1], \\\"nx\\\": [8, 6], \\\"ny\\\": [7, 3], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 5, 7, 6, 11], \\\"py\\\": [12, 5, 13, 13, 22], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [23, 23, 23, 22, 22], \\\"ny\\\": [20, 19, 21, 23, 23], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 17], \\\"py\\\": [6, 9], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 3], \\\"ny\\\": [10, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 11], \\\"py\\\": [23, 5], \\\"pz\\\": [0, 0], \\\"nx\\\": [7, 3], \\\"ny\\\": [10, 20], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 4], \\\"py\\\": [8, 8], \\\"pz\\\": [1, 1], \\\"nx\\\": [9, 4], \\\"ny\\\": [15, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [4, 7], \\\"pz\\\": [2, 1], \\\"nx\\\": [2, 4], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [23, 11], \\\"py\\\": [21, 10], \\\"pz\\\": [0, 1], \\\"nx\\\": [2, 3], \\\"ny\\\": [11, 14], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 4, \\\"px\\\": [11, 11, 11, 3], \\\"py\\\": [13, 12, 11, 4], \\\"pz\\\": [0, 0, 0, -1], \\\"nx\\\": [14, 13, 13, 6], \\\"ny\\\": [13, 11, 10, 5], \\\"nz\\\": [0, 0, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 7], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [9, 19], \\\"ny\\\": [4, 14], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [10, 5, 7], \\\"py\\\": [5, 0, 6], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [10, 21, 5], \\\"ny\\\": [0, 5, 3], \\\"nz\\\": [1, 0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [16, 13], \\\"py\\\": [3, 15], \\\"pz\\\": [0, -1], \\\"nx\\\": [17, 7], \\\"ny\\\": [23, 8], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 3, \\\"px\\\": [4, 2, 2], \\\"py\\\": [15, 7, 19], \\\"pz\\\": [0, 1, -1], \\\"nx\\\": [2, 8, 4], \\\"ny\\\": [5, 14, 9], \\\"nz\\\": [2, 0, 1] }, { \\\"size\\\": 3, \\\"px\\\": [8, 3, 6], \\\"py\\\": [10, 2, 4], \\\"pz\\\": [0, 2, 1], \\\"nx\\\": [3, 8, 4], \\\"ny\\\": [4, 14, 9], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 3], \\\"py\\\": [18, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [12, 14], \\\"ny\\\": [17, 9], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [7, 1, 10], \\\"py\\\": [14, 10, 10], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [9, 6, 2], \\\"ny\\\": [13, 18, 2], \\\"nz\\\": [0, 0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 8], \\\"py\\\": [13, 11], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 4], \\\"ny\\\": [7, 18], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 4], \\\"py\\\": [21, 17], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 3], \\\"ny\\\": [5, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 6], \\\"py\\\": [4, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 3], \\\"ny\\\": [2, 0], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 1], \\\"py\\\": [1, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 1], \\\"ny\\\": [1, 0], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [18, 1], \\\"py\\\": [13, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 0, 0, 1], \\\"py\\\": [4, 3, 2, 12, 15], \\\"pz\\\": [1, 1, 2, 0, 0], \\\"nx\\\": [5, 9, 4, 8, 8], \\\"ny\\\": [3, 6, 3, 6, 6], \\\"nz\\\": [1, 0, 1, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 5], \\\"py\\\": [0, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [2, 1], \\\"ny\\\": [0, 1], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [7, 15, 4, 20], \\\"py\\\": [8, 23, 4, 8], \\\"pz\\\": [1, 0, 2, 0], \\\"nx\\\": [6, 0, 3, 4], \\\"ny\\\": [9, 2, 13, 6], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 11, 10, 20], \\\"py\\\": [10, 9, 11, 8], \\\"pz\\\": [0, 0, 0, -1], \\\"nx\\\": [21, 20, 21, 21], \\\"ny\\\": [18, 23, 19, 17], \\\"nz\\\": [0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 8], \\\"py\\\": [7, 5], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 11], \\\"py\\\": [3, 4], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 7], \\\"ny\\\": [5, 12], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 1], \\\"py\\\": [1, 3], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 6], \\\"ny\\\": [0, 0], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [19, 9], \\\"py\\\": [16, 8], \\\"pz\\\": [0, 1], \\\"nx\\\": [14, 6], \\\"ny\\\": [15, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 6], \\\"py\\\": [13, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 5], \\\"ny\\\": [1, 2], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 5, \\\"px\\\": [16, 14, 4, 15, 12], \\\"py\\\": [1, 1, 1, 2, 1], \\\"pz\\\": [0, 0, 2, 0, 0], \\\"nx\\\": [6, 4, 3, 2, 10], \\\"ny\\\": [22, 8, 2, 1, 7], \\\"nz\\\": [0, 1, 1, 2, 0] }, { \\\"size\\\": 5, \\\"px\\\": [6, 8, 6, 5, 5], \\\"py\\\": [1, 0, 0, 1, 0], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [4, 4, 4, 4, 8], \\\"ny\\\": [4, 3, 2, 5, 10], \\\"nz\\\": [2, 2, 2, 2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 8], \\\"py\\\": [17, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 5], \\\"ny\\\": [5, 8], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 0], \\\"py\\\": [7, 3], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [10, 21], \\\"py\\\": [11, 20], \\\"pz\\\": [1, 0], \\\"nx\\\": [11, 4], \\\"ny\\\": [17, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [5, 10, 4, 17, 10], \\\"py\\\": [3, 6, 3, 11, 5], \\\"pz\\\": [1, 0, 1, 0, 0], \\\"nx\\\": [21, 20, 9, 19, 10], \\\"ny\\\": [4, 3, 0, 2, 1], \\\"nz\\\": [0, 0, 1, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [23, 23], \\\"py\\\": [10, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [23, 23], \\\"ny\\\": [21, 22], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [9, 20, 19, 20, 20], \\\"py\\\": [0, 3, 1, 2, 2], \\\"pz\\\": [1, 0, 0, 0, -1], \\\"nx\\\": [11, 23, 11, 23, 5], \\\"ny\\\": [1, 2, 0, 1, 0], \\\"nz\\\": [1, 0, 1, 0, 2] }, { \\\"size\\\": 3, \\\"px\\\": [6, 8, 7], \\\"py\\\": [4, 10, 11], \\\"pz\\\": [1, 0, 0], \\\"nx\\\": [8, 3, 4], \\\"ny\\\": [9, 4, 4], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [13, 13, 10, 4], \\\"py\\\": [14, 23, 1, 5], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [15, 14, 8, 8], \\\"ny\\\": [13, 12, 8, 9], \\\"nz\\\": [0, 0, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 9], \\\"py\\\": [5, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 8], \\\"ny\\\": [7, 4], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 8, 4, 7, 7], \\\"py\\\": [2, 3, 3, 11, 11], \\\"pz\\\": [2, 1, 2, 1, -1], \\\"nx\\\": [0, 0, 1, 0, 0], \\\"ny\\\": [4, 6, 15, 3, 2], \\\"nz\\\": [1, 1, 0, 2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [6, 1], \\\"py\\\": [12, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 10], \\\"ny\\\": [2, 11], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 2, 3, 7], \\\"py\\\": [0, 1, 4, 3, 11], \\\"pz\\\": [0, -1, -1, -1, -1], \\\"nx\\\": [9, 11, 9, 6, 12], \\\"ny\\\": [2, 1, 1, 0, 2], \\\"nz\\\": [0, 0, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 11], \\\"py\\\": [4, 4], \\\"pz\\\": [0, 0], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [1, 1, 1, 1, 1], \\\"py\\\": [15, 10, 19, 16, 18], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [4, 5, 3, 5, 6], \\\"ny\\\": [4, 19, 9, 18, 19], \\\"nz\\\": [1, 0, 1, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 12, 12, 20], \\\"py\\\": [11, 12, 13, 13, 18], \\\"pz\\\": [0, 0, 0, -1, -1], \\\"nx\\\": [0, 0, 0, 0, 0], \\\"ny\\\": [4, 2, 7, 6, 12], \\\"nz\\\": [1, 2, 1, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [9, 11], \\\"pz\\\": [0, 0], \\\"nx\\\": [10, 4], \\\"ny\\\": [5, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 8], \\\"py\\\": [9, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [13, 13], \\\"ny\\\": [10, 10], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [5, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [3, 3], \\\"ny\\\": [5, 5], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [19, 9], \\\"py\\\": [10, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [4, 1], \\\"ny\\\": [2, 2], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 4], \\\"py\\\": [19, 12], \\\"pz\\\": [0, -1], \\\"nx\\\": [14, 8], \\\"ny\\\": [17, 10], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [4, 2, 13, 2], \\\"py\\\": [12, 6, 9, 3], \\\"pz\\\": [0, 1, -1, -1], \\\"nx\\\": [1, 0, 1, 0], \\\"ny\\\": [16, 14, 11, 15], \\\"nz\\\": [0, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [8, 7], \\\"pz\\\": [1, 1], \\\"nx\\\": [4, 4], \\\"ny\\\": [4, 8], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 11, 12, 6, 10], \\\"py\\\": [2, 1, 2, 1, 2], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [4, 6, 4, 6, 2], \\\"ny\\\": [4, 0, 9, 1, 8], \\\"nz\\\": [0, 0, 1, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 4, 7, 2, 2], \\\"py\\\": [19, 20, 23, 8, 9], \\\"pz\\\": [0, 0, 0, 1, 1], \\\"nx\\\": [7, 0, 5, 6, 2], \\\"ny\\\": [10, 5, 4, 1, 8], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [18, 18, 17, 18, 18], \\\"py\\\": [15, 16, 14, 20, 17], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [15, 2, 2, 5, 2], \\\"ny\\\": [8, 0, 2, 9, 4], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [13, 13, 13, 18], \\\"py\\\": [11, 12, 12, 20], \\\"pz\\\": [0, 0, -1, -1], \\\"nx\\\": [1, 3, 10, 10], \\\"ny\\\": [1, 6, 12, 11], \\\"nz\\\": [2, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 9], \\\"py\\\": [0, 1], \\\"pz\\\": [1, 1], \\\"nx\\\": [19, 4], \\\"ny\\\": [2, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [4, 2], \\\"pz\\\": [1, 2], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [23, 11, 22, 13, 13], \\\"py\\\": [8, 3, 3, 12, 12], \\\"pz\\\": [0, 1, 0, 0, -1], \\\"nx\\\": [15, 7, 14, 13, 8], \\\"ny\\\": [7, 3, 6, 6, 3], \\\"nz\\\": [0, 1, 0, 0, 1] }, { \\\"size\\\": 3, \\\"px\\\": [9, 11, 19], \\\"py\\\": [7, 3, 0], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [23, 23, 11], \\\"ny\\\": [16, 12, 7], \\\"nz\\\": [0, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 8], \\\"py\\\": [23, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 3], \\\"ny\\\": [5, 4], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [4, 10], \\\"py\\\": [6, 13], \\\"pz\\\": [1, -1], \\\"nx\\\": [2, 3], \\\"ny\\\": [4, 10], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 1], \\\"py\\\": [11, 2], \\\"pz\\\": [1, 2], \\\"nx\\\": [9, 2], \\\"ny\\\": [5, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [22, 22], \\\"py\\\": [22, 21], \\\"pz\\\": [0, 0], \\\"nx\\\": [3, 0], \\\"ny\\\": [5, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [20, 10], \\\"py\\\": [12, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [20, 10], \\\"ny\\\": [23, 11], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [10, 3, 3, 4], \\\"py\\\": [5, 3, 4, 9], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [14, 4, 3, 11], \\\"ny\\\": [2, 1, 1, 3], \\\"nz\\\": [0, 2, 2, 0] }, { \\\"size\\\": 3, \\\"px\\\": [15, 15, 3], \\\"py\\\": [1, 1, 4], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [7, 4, 4], \\\"ny\\\": [8, 2, 3], \\\"nz\\\": [1, 2, 2] }, { \\\"size\\\": 3, \\\"px\\\": [0, 0, 0], \\\"py\\\": [3, 4, 6], \\\"pz\\\": [2, 2, 1], \\\"nx\\\": [0, 21, 4], \\\"ny\\\": [23, 14, 3], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 4, 5, 3, 4], \\\"py\\\": [9, 11, 8, 4, 8], \\\"pz\\\": [1, 1, 1, 2, 1], \\\"nx\\\": [21, 21, 10, 19, 19], \\\"ny\\\": [3, 4, 1, 0, 0], \\\"nz\\\": [0, 0, 1, 0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [21, 20, 20, 21], \\\"py\\\": [18, 21, 20, 17], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [8, 1, 4, 2], \\\"ny\\\": [10, 0, 2, 4], \\\"nz\\\": [1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [7, 14], \\\"pz\\\": [1, 0], \\\"nx\\\": [3, 5], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [12, 0, 23], \\\"py\\\": [20, 2, 13], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [12, 2, 9], \\\"ny\\\": [19, 2, 7], \\\"nz\\\": [0, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [0, 6], \\\"py\\\": [22, 11], \\\"pz\\\": [0, -1], \\\"nx\\\": [20, 18], \\\"ny\\\": [12, 23], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [9, 15, 15, 16, 8], \\\"py\\\": [2, 1, 2, 2, 1], \\\"pz\\\": [1, 0, 0, 0, 1], \\\"nx\\\": [1, 1, 1, 1, 1], \\\"ny\\\": [16, 10, 17, 18, 18], \\\"nz\\\": [0, 1, 0, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 5, 3, 5, 8], \\\"py\\\": [14, 2, 1, 4, 1], \\\"pz\\\": [0, -1, -1, -1, -1], \\\"nx\\\": [23, 23, 23, 23, 23], \\\"ny\\\": [18, 15, 16, 14, 17], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [2, 2, 2, 3, 2], \\\"py\\\": [16, 17, 15, 20, 11], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [8, 22, 2, 1, 23], \\\"ny\\\": [20, 11, 5, 0, 17], \\\"nz\\\": [0, -1, -1, -1, -1] }], \\\"alpha\\\": [-1.299972e+00, 1.299972e+00, -7.630804e-01, 7.630804e-01, -5.530378e-01, 5.530378e-01, -5.444703e-01, 5.444703e-01, -5.207701e-01, 5.207701e-01, -5.035143e-01, 5.035143e-01, -4.514416e-01, 4.514416e-01, -4.897723e-01, 4.897723e-01, -5.006264e-01, 5.006264e-01, -4.626049e-01, 4.626049e-01, -4.375402e-01, 4.375402e-01, -3.742565e-01, 3.742565e-01, -3.873996e-01, 3.873996e-01, -3.715484e-01, 3.715484e-01, -3.562480e-01, 3.562480e-01, -3.216189e-01, 3.216189e-01, -3.983409e-01, 3.983409e-01, -3.191891e-01, 3.191891e-01, -3.242173e-01, 3.242173e-01, -3.528040e-01, 3.528040e-01, -3.562318e-01, 3.562318e-01, -3.592398e-01, 3.592398e-01, -2.557584e-01, 2.557584e-01, -2.747951e-01, 2.747951e-01, -2.747554e-01, 2.747554e-01, -2.980481e-01, 2.980481e-01, -2.887670e-01, 2.887670e-01, -3.895318e-01, 3.895318e-01, -2.786896e-01, 2.786896e-01, -2.763841e-01, 2.763841e-01, -2.704816e-01, 2.704816e-01, -2.075489e-01, 2.075489e-01, -3.104773e-01, 3.104773e-01, -2.580337e-01, 2.580337e-01, -2.448334e-01, 2.448334e-01, -3.054279e-01, 3.054279e-01, -2.335804e-01, 2.335804e-01, -2.972322e-01, 2.972322e-01, -2.270521e-01, 2.270521e-01, -2.134621e-01, 2.134621e-01, -2.261655e-01, 2.261655e-01, -2.091024e-01, 2.091024e-01, -2.478928e-01, 2.478928e-01, -2.468972e-01, 2.468972e-01, -1.919746e-01, 1.919746e-01, -2.756623e-01, 2.756623e-01, -2.629717e-01, 2.629717e-01, -2.198653e-01, 2.198653e-01, -2.174434e-01, 2.174434e-01, -2.193626e-01, 2.193626e-01, -1.956262e-01, 1.956262e-01, -1.720459e-01, 1.720459e-01, -1.781067e-01, 1.781067e-01, -1.773484e-01, 1.773484e-01, -1.793871e-01, 1.793871e-01, -1.973396e-01, 1.973396e-01, -2.397262e-01, 2.397262e-01, -2.164685e-01, 2.164685e-01, -2.214348e-01, 2.214348e-01, -2.265941e-01, 2.265941e-01, -2.075436e-01, 2.075436e-01, -2.244070e-01, 2.244070e-01, -2.291992e-01, 2.291992e-01, -2.223506e-01, 2.223506e-01, -1.639398e-01, 1.639398e-01, -1.732374e-01, 1.732374e-01, -1.808631e-01, 1.808631e-01, -1.860962e-01, 1.860962e-01, -1.781604e-01, 1.781604e-01, -2.108322e-01, 2.108322e-01, -2.386390e-01, 2.386390e-01, -1.942083e-01, 1.942083e-01, -1.949161e-01, 1.949161e-01, -1.953729e-01, 1.953729e-01, -2.317591e-01, 2.317591e-01, -2.335136e-01, 2.335136e-01, -2.282835e-01, 2.282835e-01, -2.148716e-01, 2.148716e-01, -1.588127e-01, 1.588127e-01, -1.566765e-01, 1.566765e-01, -1.644839e-01, 1.644839e-01, -2.386947e-01, 2.386947e-01, -1.704126e-01, 1.704126e-01, -2.213945e-01, 2.213945e-01, -1.740398e-01, 1.740398e-01, -2.451678e-01, 2.451678e-01, -2.120524e-01, 2.120524e-01, -1.886646e-01, 1.886646e-01, -2.824447e-01, 2.824447e-01, -1.900364e-01, 1.900364e-01, -2.179183e-01, 2.179183e-01, -2.257696e-01, 2.257696e-01, -2.023404e-01, 2.023404e-01, -1.886901e-01, 1.886901e-01, -1.850663e-01, 1.850663e-01, -2.035414e-01, 2.035414e-01, -1.930174e-01, 1.930174e-01, -1.898282e-01, 1.898282e-01, -1.666640e-01, 1.666640e-01, -1.646143e-01, 1.646143e-01, -1.543475e-01, 1.543475e-01, -1.366289e-01, 1.366289e-01, -1.636837e-01, 1.636837e-01, -2.547716e-01, 2.547716e-01, -1.281869e-01, 1.281869e-01, -1.509159e-01, 1.509159e-01, -1.447827e-01, 1.447827e-01, -1.626126e-01, 1.626126e-01, -2.387014e-01, 2.387014e-01, -2.571160e-01, 2.571160e-01, -1.719175e-01, 1.719175e-01, -1.646742e-01, 1.646742e-01, -1.717041e-01, 1.717041e-01, -2.039217e-01, 2.039217e-01, -1.796907e-01, 1.796907e-01] }, { \\\"count\\\": 153, \\\"threshold\\\": -4.971032e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [14, 13, 18, 10, 16], \\\"py\\\": [2, 2, 13, 3, 12], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [21, 7, 14, 23, 23], \\\"ny\\\": [16, 7, 8, 3, 13], \\\"nz\\\": [0, 1, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 12, 15, 14], \\\"py\\\": [9, 10, 11, 3, 3], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [9, 9, 8, 14, 3], \\\"ny\\\": [9, 8, 5, 9, 5], \\\"nz\\\": [0, 0, 1, 0, 2] }, { \\\"size\\\": 5, \\\"px\\\": [5, 11, 7, 6, 8], \\\"py\\\": [12, 8, 12, 12, 11], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [8, 4, 3, 9, 9], \\\"ny\\\": [4, 4, 4, 9, 9], \\\"nz\\\": [1, 1, 1, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 8, 4, 10, 6], \\\"py\\\": [2, 2, 1, 3, 13], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [1, 1, 5, 1, 1], \\\"ny\\\": [2, 3, 8, 4, 16], \\\"nz\\\": [0, 0, 1, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [3, 16, 6, 17, 15], \\\"py\\\": [2, 17, 4, 12, 12], \\\"pz\\\": [2, 0, 1, 0, 0], \\\"nx\\\": [4, 8, 15, 1, 1], \\\"ny\\\": [4, 4, 8, 16, 16], \\\"nz\\\": [1, 1, -1, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [18, 15, 8, 17], \\\"py\\\": [12, 23, 6, 12], \\\"pz\\\": [0, 0, 1, 0], \\\"nx\\\": [15, 4, 10, 5], \\\"ny\\\": [21, 8, 14, 3], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [18, 17, 9, 19, 19], \\\"py\\\": [3, 1, 0, 3, 3], \\\"pz\\\": [0, 0, 1, 0, -1], \\\"nx\\\": [22, 11, 23, 23, 23], \\\"ny\\\": [0, 1, 2, 3, 4], \\\"nz\\\": [0, 1, 0, 0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [9, 5, 5, 10], \\\"py\\\": [18, 15, 14, 18], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [10, 11, 2, 0], \\\"ny\\\": [16, 7, 12, 7], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 12], \\\"py\\\": [4, 6], \\\"pz\\\": [2, 0], \\\"nx\\\": [3, 12], \\\"ny\\\": [4, 19], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 4, 5, 2, 2], \\\"py\\\": [3, 3, 3, 1, 1], \\\"pz\\\": [0, 0, 0, 1, -1], \\\"nx\\\": [0, 0, 1, 0, 0], \\\"ny\\\": [3, 4, 0, 1, 2], \\\"nz\\\": [0, 0, 0, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 12, 8, 10], \\\"py\\\": [13, 12, 12, 1, 18], \\\"pz\\\": [0, 0, -1, -1, -1], \\\"nx\\\": [13, 8, 7, 14, 9], \\\"ny\\\": [10, 10, 7, 13, 4], \\\"nz\\\": [0, 1, 1, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [15, 4, 12, 14, 12], \\\"py\\\": [12, 3, 9, 10, 8], \\\"pz\\\": [0, 2, 0, 0, 0], \\\"nx\\\": [14, 7, 11, 2, 9], \\\"ny\\\": [8, 4, 7, 5, 4], \\\"nz\\\": [0, 1, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [3, 9, 7], \\\"py\\\": [7, 23, 15], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [4, 4, 2], \\\"ny\\\": [9, 7, 5], \\\"nz\\\": [1, 1, 2] }, { \\\"size\\\": 3, \\\"px\\\": [5, 17, 5], \\\"py\\\": [3, 23, 4], \\\"pz\\\": [2, 0, 2], \\\"nx\\\": [23, 2, 4], \\\"ny\\\": [23, 16, 4], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 9, 9, 10, 8], \\\"py\\\": [1, 0, 1, 0, 2], \\\"pz\\\": [1, 0, 0, 0, 0], \\\"nx\\\": [2, 5, 4, 2, 2], \\\"ny\\\": [2, 19, 11, 4, 1], \\\"nz\\\": [2, 0, 1, 2, 2] }, { \\\"size\\\": 5, \\\"px\\\": [8, 3, 8, 4, 7], \\\"py\\\": [23, 9, 13, 8, 16], \\\"pz\\\": [0, 1, 0, 1, 0], \\\"nx\\\": [8, 2, 5, 3, 2], \\\"ny\\\": [8, 15, 1, 1, 1], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 5], \\\"py\\\": [14, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 9], \\\"ny\\\": [3, 13], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 5, \\\"px\\\": [5, 8, 1, 8, 6], \\\"py\\\": [12, 12, 3, 23, 12], \\\"pz\\\": [0, 0, 2, 0, 0], \\\"nx\\\": [1, 1, 2, 1, 1], \\\"ny\\\": [22, 21, 23, 20, 20], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [14, 21, 19, 21, 20], \\\"py\\\": [13, 8, 20, 10, 7], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [16, 0, 14, 23, 1], \\\"ny\\\": [8, 1, 23, 10, 20], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [15, 16, 13, 14, 14], \\\"py\\\": [3, 3, 3, 3, 3], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [18, 19, 18, 9, 17], \\\"ny\\\": [2, 2, 1, 1, 0], \\\"nz\\\": [0, 0, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [17, 9], \\\"py\\\": [14, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 18], \\\"ny\\\": [4, 18], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [21, 20], \\\"py\\\": [17, 21], \\\"pz\\\": [0, 0], \\\"nx\\\": [12, 3], \\\"ny\\\": [17, 10], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 1], \\\"py\\\": [10, 4], \\\"pz\\\": [1, 2], \\\"nx\\\": [4, 1], \\\"ny\\\": [10, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [7, 8, 4, 9, 9], \\\"py\\\": [2, 2, 0, 2, 2], \\\"pz\\\": [0, 0, 1, 0, -1], \\\"nx\\\": [5, 5, 4, 6, 3], \\\"ny\\\": [0, 1, 2, 0, 0], \\\"nz\\\": [0, 0, 0, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 5], \\\"py\\\": [3, 5], \\\"pz\\\": [2, -1], \\\"nx\\\": [3, 2], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 0, 0, 0], \\\"py\\\": [0, 1, 3, 4, 4], \\\"pz\\\": [2, 2, 1, 1, -1], \\\"nx\\\": [20, 20, 19, 20, 19], \\\"ny\\\": [21, 20, 23, 19, 22], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 18], \\\"py\\\": [8, 16], \\\"pz\\\": [1, 0], \\\"nx\\\": [14, 6], \\\"ny\\\": [15, 16], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [3, 4, 7], \\\"py\\\": [3, 3, 9], \\\"pz\\\": [2, 2, 1], \\\"nx\\\": [8, 9, 7], \\\"ny\\\": [4, 11, 4], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 14, 4, 7, 7], \\\"py\\\": [4, 23, 3, 6, 6], \\\"pz\\\": [1, 0, 2, 1, -1], \\\"nx\\\": [2, 0, 2, 1, 3], \\\"ny\\\": [20, 4, 21, 10, 23], \\\"nz\\\": [0, 2, 0, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [2, 4, 8, 9, 10], \\\"py\\\": [3, 8, 13, 23, 23], \\\"pz\\\": [2, 1, 0, 0, 0], \\\"nx\\\": [10, 4, 0, 3, 3], \\\"ny\\\": [21, 3, 0, 3, 23], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [11, 10, 11], \\\"py\\\": [6, 5, 5], \\\"pz\\\": [0, 0, 0], \\\"nx\\\": [14, 6, 1], \\\"ny\\\": [7, 9, 5], \\\"nz\\\": [0, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 11, 11, 11, 6], \\\"py\\\": [11, 12, 10, 13, 6], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [9, 13, 13, 13, 4], \\\"ny\\\": [4, 9, 10, 11, 2], \\\"nz\\\": [1, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [3, 11], \\\"ny\\\": [4, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 2], \\\"py\\\": [4, 11], \\\"pz\\\": [2, 0], \\\"nx\\\": [8, 8], \\\"ny\\\": [15, 15], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 13, 12, 12], \\\"py\\\": [10, 11, 13, 12, 12], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [0, 0, 0, 1, 0], \\\"ny\\\": [13, 2, 12, 5, 14], \\\"nz\\\": [0, 2, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 0, 1, 1], \\\"py\\\": [4, 3, 11, 15, 13], \\\"pz\\\": [1, 2, 0, 0, 0], \\\"nx\\\": [2, 3, 3, 1, 0], \\\"ny\\\": [2, 4, 4, 5, 14], \\\"nz\\\": [2, 1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 11], \\\"py\\\": [12, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 2], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [18, 8, 9, 9, 9], \\\"py\\\": [15, 7, 8, 10, 7], \\\"pz\\\": [0, 1, 1, 1, 1], \\\"nx\\\": [22, 23, 21, 22, 11], \\\"ny\\\": [20, 16, 23, 19, 9], \\\"nz\\\": [0, 0, 0, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [14, 12, 13, 14, 15], \\\"py\\\": [1, 0, 0, 0, 1], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [4, 9, 4, 7, 7], \\\"ny\\\": [2, 3, 1, 8, 8], \\\"nz\\\": [2, 1, 2, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 9], \\\"py\\\": [14, 19], \\\"pz\\\": [0, -1], \\\"nx\\\": [6, 10], \\\"ny\\\": [0, 2], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [13, 12], \\\"py\\\": [4, 4], \\\"pz\\\": [0, 0], \\\"nx\\\": [3, 3], \\\"ny\\\": [1, 1], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 3, \\\"px\\\": [14, 5, 5], \\\"py\\\": [18, 3, 4], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [8, 7, 8], \\\"ny\\\": [4, 8, 10], \\\"nz\\\": [1, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 18], \\\"py\\\": [6, 11], \\\"pz\\\": [1, 0], \\\"nx\\\": [9, 1], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 11], \\\"py\\\": [9, 7], \\\"pz\\\": [0, 0], \\\"nx\\\": [7, 7], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [23, 11, 23, 11, 23], \\\"py\\\": [13, 4, 12, 7, 10], \\\"pz\\\": [0, 1, 0, 1, 0], \\\"nx\\\": [7, 4, 8, 15, 15], \\\"ny\\\": [9, 2, 4, 8, 8], \\\"nz\\\": [0, 2, 1, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [1, 0], \\\"pz\\\": [0, 1], \\\"nx\\\": [4, 1], \\\"ny\\\": [1, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 5], \\\"py\\\": [7, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [6, 4], \\\"ny\\\": [9, 11], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [5, 6, 5, 5], \\\"py\\\": [8, 6, 11, 6], \\\"pz\\\": [1, 1, 1, 0], \\\"nx\\\": [23, 0, 4, 5], \\\"ny\\\": [0, 2, 2, 1], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 4], \\\"py\\\": [13, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [15, 4], \\\"ny\\\": [11, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [4, 0], \\\"py\\\": [8, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [9, 2], \\\"ny\\\": [15, 5], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 5, \\\"px\\\": [15, 15, 16, 14, 14], \\\"py\\\": [0, 1, 1, 0, 0], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [4, 4, 8, 8, 15], \\\"ny\\\": [4, 5, 4, 11, 23], \\\"nz\\\": [2, 2, 1, 1, 0] }, { \\\"size\\\": 4, \\\"px\\\": [12, 11, 3, 14], \\\"py\\\": [14, 22, 1, 0], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [8, 15, 7, 16], \\\"ny\\\": [2, 3, 1, 3], \\\"nz\\\": [1, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 12], \\\"py\\\": [6, 17], \\\"pz\\\": [1, -1], \\\"nx\\\": [2, 1], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [13, 12, 12, 7, 7], \\\"py\\\": [5, 6, 5, 14, 14], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [10, 3, 10, 1, 10], \\\"ny\\\": [13, 8, 11, 3, 10], \\\"nz\\\": [0, 0, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 4], \\\"py\\\": [15, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 4], \\\"ny\\\": [16, 17], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [1, 4, 2, 1, 2], \\\"py\\\": [4, 0, 1, 1, 0], \\\"pz\\\": [1, 1, 1, 2, 1], \\\"nx\\\": [4, 9, 1, 5, 1], \\\"ny\\\": [3, 4, 4, 5, 5], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 3], \\\"py\\\": [3, 1], \\\"pz\\\": [0, 2], \\\"nx\\\": [8, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 0], \\\"py\\\": [21, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [6, 8], \\\"ny\\\": [8, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 11], \\\"py\\\": [4, 18], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 7], \\\"ny\\\": [0, 2], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 7], \\\"py\\\": [0, 3], \\\"pz\\\": [1, -1], \\\"nx\\\": [20, 10], \\\"ny\\\": [0, 1], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [10, 4, 1, 5], \\\"py\\\": [0, 6, 8, 4], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [6, 15, 4, 14], \\\"ny\\\": [3, 5, 1, 5], \\\"nz\\\": [1, 0, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 4], \\\"py\\\": [3, 4], \\\"pz\\\": [2, 2], \\\"nx\\\": [9, 2], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 4], \\\"py\\\": [3, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 6], \\\"ny\\\": [2, 1], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 0], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [0, 7], \\\"ny\\\": [7, 8], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 0], \\\"py\\\": [7, 3], \\\"pz\\\": [1, -1], \\\"nx\\\": [15, 4], \\\"ny\\\": [14, 4], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 4, \\\"px\\\": [3, 1, 2, 2], \\\"py\\\": [20, 7, 18, 17], \\\"pz\\\": [0, 1, 0, 0], \\\"nx\\\": [9, 5, 5, 4], \\\"ny\\\": [5, 4, 18, 4], \\\"nz\\\": [1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 4], \\\"py\\\": [3, 1], \\\"pz\\\": [2, -1], \\\"nx\\\": [23, 23], \\\"ny\\\": [14, 13], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 4], \\\"py\\\": [6, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [22, 22, 11, 11, 11], \\\"py\\\": [12, 13, 4, 6, 6], \\\"pz\\\": [0, 0, 1, 1, -1], \\\"nx\\\": [4, 4, 4, 4, 3], \\\"ny\\\": [16, 15, 18, 14, 11], \\\"nz\\\": [0, 0, 0, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 10], \\\"py\\\": [0, 1], \\\"pz\\\": [1, 0], \\\"nx\\\": [2, 2], \\\"ny\\\": [2, 2], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 6], \\\"py\\\": [4, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [15, 4], \\\"ny\\\": [2, 1], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 2], \\\"py\\\": [10, 20], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 9], \\\"ny\\\": [1, 2], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 19], \\\"py\\\": [3, 8], \\\"pz\\\": [2, 0], \\\"nx\\\": [8, 21], \\\"ny\\\": [4, 20], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 6, 7, 6, 2], \\\"py\\\": [6, 15, 13, 14, 3], \\\"pz\\\": [1, 0, 0, 0, -1], \\\"nx\\\": [21, 22, 19, 21, 10], \\\"ny\\\": [6, 12, 0, 3, 2], \\\"nz\\\": [0, 0, 0, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 12, 15, 14, 13], \\\"py\\\": [0, 0, 0, 0, 0], \\\"pz\\\": [1, 0, 0, 0, 0], \\\"nx\\\": [4, 3, 1, 3, 4], \\\"ny\\\": [19, 16, 3, 15, 4], \\\"nz\\\": [0, 0, 2, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [2, 3], \\\"pz\\\": [2, 2], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [0, 0, 0, 5], \\\"py\\\": [10, 9, 11, 21], \\\"pz\\\": [1, 1, -1, -1], \\\"nx\\\": [12, 4, 3, 11], \\\"ny\\\": [3, 1, 1, 3], \\\"nz\\\": [0, 2, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 1], \\\"py\\\": [0, 0], \\\"pz\\\": [1, 2], \\\"nx\\\": [1, 4], \\\"ny\\\": [2, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [2, 5, 1, 0, 1], \\\"py\\\": [14, 23, 7, 5, 9], \\\"pz\\\": [0, 0, 1, 1, 1], \\\"nx\\\": [0, 0, 7, 9, 11], \\\"ny\\\": [23, 22, 4, 9, 3], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 9], \\\"py\\\": [7, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 8], \\\"ny\\\": [8, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 9], \\\"py\\\": [11, 3], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 2], \\\"ny\\\": [14, 10], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [2, 4, 5, 4], \\\"py\\\": [8, 20, 22, 16], \\\"pz\\\": [1, 0, 0, 0], \\\"nx\\\": [8, 2, 11, 3], \\\"ny\\\": [7, 4, 15, 4], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [1, 2, 3], \\\"py\\\": [2, 1, 0], \\\"pz\\\": [0, 0, 0], \\\"nx\\\": [0, 0, 15], \\\"ny\\\": [1, 0, 11], \\\"nz\\\": [0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 22], \\\"py\\\": [6, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 3, \\\"px\\\": [13, 0, 5], \\\"py\\\": [19, 10, 2], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [3, 4, 6], \\\"ny\\\": [5, 5, 9], \\\"nz\\\": [2, 2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 15], \\\"py\\\": [8, 22], \\\"pz\\\": [1, 0], \\\"nx\\\": [7, 4], \\\"ny\\\": [10, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 10], \\\"py\\\": [7, 6], \\\"pz\\\": [1, 1], \\\"nx\\\": [10, 1], \\\"ny\\\": [9, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 11], \\\"py\\\": [4, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 9], \\\"ny\\\": [0, 1], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [14, 13, 14, 12, 15], \\\"py\\\": [1, 2, 2, 2, 2], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [4, 8, 4, 7, 4], \\\"ny\\\": [2, 4, 3, 4, 4], \\\"nz\\\": [2, 1, 2, 1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [13, 8, 2], \\\"py\\\": [14, 5, 8], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [6, 8, 9], \\\"ny\\\": [3, 2, 2], \\\"nz\\\": [0, 0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [3, 6, 8], \\\"py\\\": [7, 4, 12], \\\"pz\\\": [1, 1, 0], \\\"nx\\\": [3, 8, 9], \\\"ny\\\": [5, 2, 2], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 4], \\\"py\\\": [16, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [13, 7], \\\"ny\\\": [15, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 0], \\\"py\\\": [7, 9], \\\"pz\\\": [1, -1], \\\"nx\\\": [2, 8], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 6, 8, 7, 7], \\\"py\\\": [0, 1, 0, 0, 0], \\\"pz\\\": [1, 0, 0, 0, -1], \\\"nx\\\": [7, 9, 4, 3, 4], \\\"ny\\\": [9, 7, 4, 2, 2], \\\"nz\\\": [1, 1, 1, 2, 2] }, { \\\"size\\\": 3, \\\"px\\\": [3, 4, 16], \\\"py\\\": [4, 4, 6], \\\"pz\\\": [1, 2, 0], \\\"nx\\\": [2, 2, 2], \\\"ny\\\": [0, 0, 1], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [1, 0], \\\"pz\\\": [2, 2], \\\"nx\\\": [5, 5], \\\"ny\\\": [2, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 3], \\\"py\\\": [7, 20], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 21], \\\"py\\\": [10, 18], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 4], \\\"ny\\\": [10, 4], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 13], \\\"py\\\": [6, 23], \\\"pz\\\": [1, -1], \\\"nx\\\": [10, 10], \\\"ny\\\": [11, 12], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [10, 9, 5, 10, 10], \\\"py\\\": [9, 13, 6, 10, 10], \\\"pz\\\": [0, 0, 1, 0, -1], \\\"nx\\\": [21, 21, 21, 10, 21], \\\"ny\\\": [18, 20, 19, 11, 17], \\\"nz\\\": [0, 0, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 8], \\\"py\\\": [7, 6], \\\"pz\\\": [1, 1], \\\"nx\\\": [8, 1], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 4], \\\"py\\\": [14, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [13, 13], \\\"ny\\\": [13, 11], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 4], \\\"py\\\": [4, 5], \\\"pz\\\": [2, 2], \\\"nx\\\": [12, 5], \\\"ny\\\": [16, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [1, 3, 20], \\\"py\\\": [3, 9, 2], \\\"pz\\\": [2, -1, -1], \\\"nx\\\": [0, 0, 0], \\\"ny\\\": [7, 4, 13], \\\"nz\\\": [1, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [4, 2], \\\"pz\\\": [1, 2], \\\"nx\\\": [1, 0], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [8, 9, 11], \\\"py\\\": [2, 1, 2], \\\"pz\\\": [0, 0, 0], \\\"nx\\\": [2, 2, 0], \\\"ny\\\": [2, 2, 13], \\\"nz\\\": [2, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 10], \\\"py\\\": [23, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 6], \\\"ny\\\": [1, 1], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 4, \\\"px\\\": [13, 6, 3, 4], \\\"py\\\": [8, 6, 4, 2], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [1, 1, 1, 4], \\\"ny\\\": [9, 7, 8, 20], \\\"nz\\\": [1, 1, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [11, 4, 4, 10, 3], \\\"py\\\": [9, 16, 13, 12, 7], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [7, 11, 3, 17, 4], \\\"ny\\\": [8, 11, 9, 0, 4], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 6], \\\"py\\\": [6, 8], \\\"pz\\\": [1, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [1, 2], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [10, 5], \\\"py\\\": [7, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 13], \\\"ny\\\": [5, 9], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 5], \\\"py\\\": [8, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [16, 4], \\\"ny\\\": [14, 5], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [1, 1], \\\"py\\\": [16, 15], \\\"pz\\\": [0, 0], \\\"nx\\\": [1, 20], \\\"ny\\\": [23, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 3], \\\"py\\\": [4, 7], \\\"pz\\\": [2, 1], \\\"nx\\\": [2, 3], \\\"ny\\\": [5, 4], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [19, 8], \\\"py\\\": [5, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [10, 10], \\\"ny\\\": [1, 3], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [21, 21], \\\"py\\\": [18, 16], \\\"pz\\\": [0, 0], \\\"nx\\\": [10, 3], \\\"ny\\\": [17, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 2], \\\"py\\\": [23, 4], \\\"pz\\\": [0, 2], \\\"nx\\\": [5, 11], \\\"ny\\\": [3, 7], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 0], \\\"py\\\": [3, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 6], \\\"ny\\\": [1, 1], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 4, \\\"px\\\": [5, 9, 8, 9], \\\"py\\\": [8, 12, 13, 18], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [6, 5, 2, 5], \\\"ny\\\": [8, 4, 7, 11], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 2], \\\"py\\\": [0, 0], \\\"pz\\\": [0, 2], \\\"nx\\\": [5, 5], \\\"ny\\\": [3, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [12, 13], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 1], \\\"ny\\\": [14, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 16, 9, 4, 15], \\\"py\\\": [11, 13, 8, 4, 12], \\\"pz\\\": [1, 0, 1, 2, 0], \\\"nx\\\": [3, 3, 3, 3, 4], \\\"ny\\\": [4, 2, 1, 3, 0], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 5], \\\"py\\\": [7, 6], \\\"pz\\\": [1, -1], \\\"nx\\\": [19, 8], \\\"ny\\\": [17, 11], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [14, 15, 12, 13, 13], \\\"py\\\": [2, 2, 2, 2, 2], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [20, 9, 19, 20, 4], \\\"ny\\\": [14, 2, 5, 15, 1], \\\"nz\\\": [0, 1, 0, 0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [18, 8], \\\"py\\\": [20, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [4, 9], \\\"ny\\\": [2, 2], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [11, 5], \\\"pz\\\": [1, 2], \\\"nx\\\": [13, 19], \\\"ny\\\": [20, 20], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [12, 11, 3], \\\"py\\\": [20, 20, 5], \\\"pz\\\": [0, 0, -1], \\\"nx\\\": [11, 12, 6], \\\"ny\\\": [21, 21, 10], \\\"nz\\\": [0, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [7, 14], \\\"pz\\\": [1, 0], \\\"nx\\\": [3, 13], \\\"ny\\\": [4, 8], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [5, 9], \\\"pz\\\": [2, 1], \\\"nx\\\": [2, 11], \\\"ny\\\": [8, 6], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [5, 5], \\\"pz\\\": [1, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [6, 3], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 23], \\\"py\\\": [5, 9], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 2], \\\"ny\\\": [11, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 23], \\\"py\\\": [12, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 22], \\\"ny\\\": [10, 21], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 12], \\\"py\\\": [7, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 4], \\\"ny\\\": [7, 10], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 8], \\\"py\\\": [18, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 4], \\\"ny\\\": [8, 10], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 17], \\\"py\\\": [11, 11], \\\"pz\\\": [0, 0], \\\"nx\\\": [15, 2], \\\"ny\\\": [9, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 1], \\\"py\\\": [3, 0], \\\"pz\\\": [2, -1], \\\"nx\\\": [9, 10], \\\"ny\\\": [6, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 13], \\\"py\\\": [20, 21], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 2], \\\"ny\\\": [6, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [20, 20, 4, 18, 19], \\\"py\\\": [17, 16, 5, 22, 20], \\\"pz\\\": [0, 0, 2, 0, 0], \\\"nx\\\": [8, 11, 5, 6, 2], \\\"ny\\\": [10, 15, 11, 10, 1], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [4, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 3, \\\"px\\\": [6, 5, 6], \\\"py\\\": [8, 10, 10], \\\"pz\\\": [1, 1, 1], \\\"nx\\\": [11, 8, 22], \\\"ny\\\": [19, 2, 15], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [5, 2, 13], \\\"py\\\": [7, 10, 10], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [11, 11, 23], \\\"ny\\\": [8, 9, 14], \\\"nz\\\": [1, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [3, 6, 1, 5, 10], \\\"py\\\": [7, 14, 1, 9, 2], \\\"pz\\\": [1, -1, -1, -1, -1], \\\"nx\\\": [11, 0, 1, 5, 1], \\\"ny\\\": [14, 12, 18, 5, 19], \\\"nz\\\": [0, 0, 0, 1, 0] }, { \\\"size\\\": 3, \\\"px\\\": [21, 21, 10], \\\"py\\\": [16, 17, 10], \\\"pz\\\": [0, 0, 1], \\\"nx\\\": [5, 5, 1], \\\"ny\\\": [9, 9, 18], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 21], \\\"py\\\": [6, 17], \\\"pz\\\": [1, -1], \\\"nx\\\": [20, 10], \\\"ny\\\": [7, 4], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 11], \\\"py\\\": [0, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [6, 13], \\\"ny\\\": [2, 4], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 4, \\\"px\\\": [4, 4, 7, 9], \\\"py\\\": [3, 4, 10, 3], \\\"pz\\\": [2, 2, 1, 1], \\\"nx\\\": [21, 2, 15, 5], \\\"ny\\\": [0, 0, 0, 2], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [11, 11, 11], \\\"py\\\": [7, 6, 9], \\\"pz\\\": [1, 1, 1], \\\"nx\\\": [23, 4, 9], \\\"ny\\\": [23, 5, 6], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 15], \\\"py\\\": [1, 1], \\\"pz\\\": [0, 0], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [11, 23, 11, 23, 23], \\\"py\\\": [11, 22, 10, 21, 20], \\\"pz\\\": [1, 0, 1, 0, 0], \\\"nx\\\": [10, 9, 19, 10, 10], \\\"ny\\\": [10, 11, 20, 9, 9], \\\"nz\\\": [1, 1, 0, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 23], \\\"py\\\": [13, 22], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 1], \\\"py\\\": [19, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 12], \\\"ny\\\": [22, 17], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 8], \\\"py\\\": [4, 3], \\\"pz\\\": [1, -1], \\\"nx\\\": [5, 23], \\\"ny\\\": [2, 7], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 10], \\\"py\\\": [6, 20], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 8], \\\"ny\\\": [4, 6], \\\"nz\\\": [1, 1] }], \\\"alpha\\\": [-1.135386e+00, 1.135386e+00, -9.090800e-01, 9.090800e-01, -5.913780e-01, 5.913780e-01, -5.556534e-01, 5.556534e-01, -5.084150e-01, 5.084150e-01, -4.464489e-01, 4.464489e-01, -4.463241e-01, 4.463241e-01, -4.985226e-01, 4.985226e-01, -4.424638e-01, 4.424638e-01, -4.300093e-01, 4.300093e-01, -4.231341e-01, 4.231341e-01, -4.087428e-01, 4.087428e-01, -3.374480e-01, 3.374480e-01, -3.230151e-01, 3.230151e-01, -3.084427e-01, 3.084427e-01, -3.235494e-01, 3.235494e-01, -2.589281e-01, 2.589281e-01, -2.970292e-01, 2.970292e-01, -2.957065e-01, 2.957065e-01, -3.997619e-01, 3.997619e-01, -3.535901e-01, 3.535901e-01, -2.725396e-01, 2.725396e-01, -2.649725e-01, 2.649725e-01, -3.103888e-01, 3.103888e-01, -3.117775e-01, 3.117775e-01, -2.589620e-01, 2.589620e-01, -2.689202e-01, 2.689202e-01, -2.127024e-01, 2.127024e-01, -2.436322e-01, 2.436322e-01, -3.120574e-01, 3.120574e-01, -2.786010e-01, 2.786010e-01, -2.649072e-01, 2.649072e-01, -2.766509e-01, 2.766509e-01, -2.367237e-01, 2.367237e-01, -2.658049e-01, 2.658049e-01, -2.103463e-01, 2.103463e-01, -1.911522e-01, 1.911522e-01, -2.535425e-01, 2.535425e-01, -2.434696e-01, 2.434696e-01, -2.180788e-01, 2.180788e-01, -2.496873e-01, 2.496873e-01, -2.700969e-01, 2.700969e-01, -2.565479e-01, 2.565479e-01, -2.737741e-01, 2.737741e-01, -1.675507e-01, 1.675507e-01, -2.551417e-01, 2.551417e-01, -2.067648e-01, 2.067648e-01, -1.636834e-01, 1.636834e-01, -2.129306e-01, 2.129306e-01, -1.656758e-01, 1.656758e-01, -1.919369e-01, 1.919369e-01, -2.031763e-01, 2.031763e-01, -2.062327e-01, 2.062327e-01, -2.577950e-01, 2.577950e-01, -2.951823e-01, 2.951823e-01, -2.023160e-01, 2.023160e-01, -2.022234e-01, 2.022234e-01, -2.132906e-01, 2.132906e-01, -1.653278e-01, 1.653278e-01, -1.648474e-01, 1.648474e-01, -1.593352e-01, 1.593352e-01, -1.735650e-01, 1.735650e-01, -1.688778e-01, 1.688778e-01, -1.519705e-01, 1.519705e-01, -1.812202e-01, 1.812202e-01, -1.967481e-01, 1.967481e-01, -1.852954e-01, 1.852954e-01, -2.317780e-01, 2.317780e-01, -2.036251e-01, 2.036251e-01, -1.609324e-01, 1.609324e-01, -2.160205e-01, 2.160205e-01, -2.026190e-01, 2.026190e-01, -1.854761e-01, 1.854761e-01, -1.832038e-01, 1.832038e-01, -2.001141e-01, 2.001141e-01, -1.418333e-01, 1.418333e-01, -1.704773e-01, 1.704773e-01, -1.586261e-01, 1.586261e-01, -1.587582e-01, 1.587582e-01, -1.899489e-01, 1.899489e-01, -1.477160e-01, 1.477160e-01, -2.260467e-01, 2.260467e-01, -2.393598e-01, 2.393598e-01, -1.582373e-01, 1.582373e-01, -1.702498e-01, 1.702498e-01, -1.737398e-01, 1.737398e-01, -1.462529e-01, 1.462529e-01, -1.396517e-01, 1.396517e-01, -1.629625e-01, 1.629625e-01, -1.446933e-01, 1.446933e-01, -1.811657e-01, 1.811657e-01, -1.336427e-01, 1.336427e-01, -1.924813e-01, 1.924813e-01, -1.457520e-01, 1.457520e-01, -1.600259e-01, 1.600259e-01, -1.297000e-01, 1.297000e-01, -2.076199e-01, 2.076199e-01, -1.510060e-01, 1.510060e-01, -1.914568e-01, 1.914568e-01, -2.138162e-01, 2.138162e-01, -1.856916e-01, 1.856916e-01, -1.843047e-01, 1.843047e-01, -1.526846e-01, 1.526846e-01, -1.328320e-01, 1.328320e-01, -1.751311e-01, 1.751311e-01, -1.643908e-01, 1.643908e-01, -1.482706e-01, 1.482706e-01, -1.622298e-01, 1.622298e-01, -1.884979e-01, 1.884979e-01, -1.633604e-01, 1.633604e-01, -1.554166e-01, 1.554166e-01, -1.405332e-01, 1.405332e-01, -1.772398e-01, 1.772398e-01, -1.410008e-01, 1.410008e-01, -1.362301e-01, 1.362301e-01, -1.709087e-01, 1.709087e-01, -1.584613e-01, 1.584613e-01, -1.188814e-01, 1.188814e-01, -1.423888e-01, 1.423888e-01, -1.345565e-01, 1.345565e-01, -1.835986e-01, 1.835986e-01, -1.445329e-01, 1.445329e-01, -1.385826e-01, 1.385826e-01, -1.558917e-01, 1.558917e-01, -1.476053e-01, 1.476053e-01, -1.370722e-01, 1.370722e-01, -2.362666e-01, 2.362666e-01, -2.907774e-01, 2.907774e-01, -1.656360e-01, 1.656360e-01, -1.644407e-01, 1.644407e-01, -1.443394e-01, 1.443394e-01, -1.438823e-01, 1.438823e-01, -1.476964e-01, 1.476964e-01, -1.956593e-01, 1.956593e-01, -2.417519e-01, 2.417519e-01, -1.659315e-01, 1.659315e-01, -1.466254e-01, 1.466254e-01, -2.034909e-01, 2.034909e-01, -2.128771e-01, 2.128771e-01, -1.665429e-01, 1.665429e-01, -1.387131e-01, 1.387131e-01, -1.298823e-01, 1.298823e-01, -1.329495e-01, 1.329495e-01, -1.769587e-01, 1.769587e-01, -1.366530e-01, 1.366530e-01, -1.254359e-01, 1.254359e-01, -1.673022e-01, 1.673022e-01, -1.602519e-01, 1.602519e-01, -1.897245e-01, 1.897245e-01, -1.893579e-01, 1.893579e-01, -1.579350e-01, 1.579350e-01, -1.472589e-01, 1.472589e-01, -1.614193e-01, 1.614193e-01] }, { \\\"count\\\": 203, \\\"threshold\\\": -4.769677e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [12, 5, 14, 9, 7], \\\"py\\\": [9, 13, 3, 1, 3], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [1, 0, 5, 14, 9], \\\"ny\\\": [5, 3, 8, 8, 9], \\\"nz\\\": [2, 0, 1, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [14, 13, 11, 17, 12], \\\"py\\\": [2, 2, 4, 13, 3], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [7, 22, 8, 23, 22], \\\"ny\\\": [8, 15, 11, 12, 3], \\\"nz\\\": [1, 0, 1, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [9, 11, 11, 11, 16], \\\"py\\\": [4, 8, 7, 9, 12], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [4, 8, 14, 9, 9], \\\"ny\\\": [4, 4, 8, 8, 8], \\\"nz\\\": [1, 1, 0, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 12, 12, 8, 3], \\\"py\\\": [11, 7, 8, 10, 2], \\\"pz\\\": [0, 0, 0, 0, 2], \\\"nx\\\": [8, 4, 4, 4, 0], \\\"ny\\\": [4, 4, 4, 11, 0], \\\"nz\\\": [1, 1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [19, 17, 18, 9, 9], \\\"py\\\": [3, 2, 3, 1, 1], \\\"pz\\\": [0, 0, 0, 1, -1], \\\"nx\\\": [21, 21, 10, 22, 22], \\\"ny\\\": [1, 2, 0, 4, 3], \\\"nz\\\": [0, 0, 1, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 7], \\\"py\\\": [4, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 7], \\\"ny\\\": [4, 10], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [14, 17, 17, 13, 12], \\\"py\\\": [18, 15, 16, 18, 18], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [13, 19, 5, 20, 6], \\\"ny\\\": [16, 4, 1, 19, 0], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 7, 4, 5, 5], \\\"py\\\": [15, 23, 6, 12, 16], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [3, 14, 14, 6, 6], \\\"ny\\\": [4, 11, 11, 9, 0], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [16, 9, 6, 3, 11], \\\"py\\\": [2, 2, 5, 3, 2], \\\"pz\\\": [0, 0, 1, 2, 0], \\\"nx\\\": [3, 4, 2, 5, 5], \\\"ny\\\": [4, 11, 2, 8, 8], \\\"nz\\\": [1, 1, 2, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 1, 5, 3, 3], \\\"py\\\": [14, 4, 15, 7, 7], \\\"pz\\\": [0, 2, 0, 1, -1], \\\"nx\\\": [0, 0, 1, 1, 1], \\\"ny\\\": [7, 8, 18, 17, 5], \\\"nz\\\": [1, 1, 0, 0, 2] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 9, 5, 3], \\\"py\\\": [14, 14, 0, 3, 7], \\\"pz\\\": [0, -1, -1, -1, -1], \\\"nx\\\": [7, 7, 14, 8, 13], \\\"ny\\\": [7, 8, 13, 10, 10], \\\"nz\\\": [1, 1, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 4], \\\"py\\\": [7, 9], \\\"pz\\\": [1, -1], \\\"nx\\\": [2, 4], \\\"ny\\\": [5, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 3, \\\"px\\\": [10, 21, 17], \\\"py\\\": [7, 11, 23], \\\"pz\\\": [1, 0, 0], \\\"nx\\\": [21, 9, 3], \\\"ny\\\": [23, 5, 5], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 11, 9, 10, 11], \\\"py\\\": [2, 0, 1, 1, 2], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [4, 5, 6, 4, 3], \\\"ny\\\": [8, 4, 18, 7, 4], \\\"nz\\\": [1, 1, 0, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [20, 22, 3, 19, 10], \\\"py\\\": [20, 9, 4, 22, 3], \\\"pz\\\": [0, 0, 2, 0, 1], \\\"nx\\\": [8, 20, 8, 3, 2], \\\"ny\\\": [4, 3, 6, 4, 3], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 4], \\\"py\\\": [8, 7], \\\"pz\\\": [1, 1], \\\"nx\\\": [9, 2], \\\"ny\\\": [15, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 13], \\\"py\\\": [13, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [20, 21], \\\"ny\\\": [1, 4], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [1, 2, 7, 6, 8], \\\"py\\\": [0, 2, 3, 3, 3], \\\"pz\\\": [2, 1, 0, 0, 0], \\\"nx\\\": [1, 2, 1, 1, 1], \\\"ny\\\": [0, 0, 4, 3, 3], \\\"nz\\\": [1, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 10], \\\"py\\\": [9, 11], \\\"pz\\\": [0, 0], \\\"nx\\\": [6, 3], \\\"ny\\\": [9, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 12, 12, 6], \\\"py\\\": [10, 11, 13, 12, 6], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [10, 2, 1, 10, 10], \\\"ny\\\": [10, 4, 2, 11, 9], \\\"nz\\\": [0, 1, 2, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [16, 18, 11, 17, 15], \\\"py\\\": [11, 12, 8, 12, 11], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [14, 0, 19, 0, 10], \\\"ny\\\": [9, 3, 14, 8, 9], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [5, 9, 5, 8], \\\"py\\\": [21, 18, 20, 23], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [8, 4, 3, 1], \\\"ny\\\": [20, 3, 4, 3], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 3], \\\"py\\\": [3, 2], \\\"pz\\\": [2, 2], \\\"nx\\\": [3, 12], \\\"ny\\\": [4, 23], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [0, 1, 1, 1, 1], \\\"py\\\": [2, 16, 14, 13, 12], \\\"pz\\\": [2, 0, 0, 0, 0], \\\"nx\\\": [8, 4, 9, 4, 7], \\\"ny\\\": [9, 3, 4, 2, 9], \\\"nz\\\": [1, 2, 1, 2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 9], \\\"py\\\": [3, 7], \\\"pz\\\": [2, -1], \\\"nx\\\": [4, 9], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [15, 16, 17, 15, 8], \\\"py\\\": [3, 3, 3, 18, 1], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [1, 2, 2, 1, 3], \\\"ny\\\": [5, 3, 2, 6, 0], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 17], \\\"py\\\": [4, 14], \\\"pz\\\": [2, 0], \\\"nx\\\": [15, 7], \\\"ny\\\": [15, 10], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [14, 12, 3], \\\"py\\\": [3, 13, 3], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [4, 17, 4], \\\"ny\\\": [3, 19, 4], \\\"nz\\\": [2, 0, 2] }, { \\\"size\\\": 4, \\\"px\\\": [4, 5, 12, 2], \\\"py\\\": [9, 6, 19, 4], \\\"pz\\\": [1, 1, 0, 2], \\\"nx\\\": [12, 17, 4, 4], \\\"ny\\\": [18, 19, 4, 4], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 19, 20, 20, 19], \\\"py\\\": [7, 14, 13, 14, 13], \\\"pz\\\": [1, 0, 0, 0, -1], \\\"nx\\\": [11, 23, 23, 23, 23], \\\"ny\\\": [9, 15, 13, 16, 14], \\\"nz\\\": [1, 0, 0, 0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [0, 0, 0, 2], \\\"py\\\": [5, 6, 5, 14], \\\"pz\\\": [1, 1, 2, 0], \\\"nx\\\": [0, 3, 3, 17], \\\"ny\\\": [23, 5, 5, 9], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 4], \\\"py\\\": [23, 5], \\\"pz\\\": [0, 2], \\\"nx\\\": [9, 3], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [6, 5, 10, 12], \\\"py\\\": [3, 3, 23, 23], \\\"pz\\\": [1, 1, 0, 0], \\\"nx\\\": [11, 1, 1, 4], \\\"ny\\\": [21, 3, 5, 5], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 2], \\\"py\\\": [9, 4], \\\"pz\\\": [1, 2], \\\"nx\\\": [4, 9], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [23, 23, 23, 23, 23], \\\"py\\\": [14, 9, 13, 11, 12], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [6, 13, 7, 8, 8], \\\"ny\\\": [9, 6, 3, 3, 3], \\\"nz\\\": [1, 0, 1, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 3], \\\"py\\\": [4, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 8], \\\"ny\\\": [1, 3], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 12], \\\"py\\\": [4, 18], \\\"pz\\\": [2, 0], \\\"nx\\\": [12, 0], \\\"ny\\\": [16, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 2], \\\"py\\\": [4, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [16, 4], \\\"ny\\\": [1, 0], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [3, 4], \\\"py\\\": [7, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [5, 3], \\\"ny\\\": [19, 9], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [20, 19, 20, 21], \\\"py\\\": [2, 0, 1, 3], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [11, 5, 23, 11], \\\"ny\\\": [0, 0, 1, 1], \\\"nz\\\": [1, 2, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 13], \\\"py\\\": [7, 5], \\\"pz\\\": [0, 0], \\\"nx\\\": [8, 5], \\\"ny\\\": [3, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [22, 21, 22, 22, 22], \\\"py\\\": [20, 22, 18, 19, 16], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [2, 3, 3, 15, 15], \\\"ny\\\": [4, 5, 4, 7, 7], \\\"nz\\\": [1, 2, 1, 0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [15, 14, 14], \\\"py\\\": [1, 1, 1], \\\"pz\\\": [0, 0, -1], \\\"nx\\\": [17, 18, 16], \\\"ny\\\": [1, 2, 1], \\\"nz\\\": [0, 0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [17, 16, 16, 15], \\\"py\\\": [2, 1, 0, 0], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [7, 4, 2, 11], \\\"ny\\\": [11, 2, 1, 4], \\\"nz\\\": [1, 2, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [18, 0, 0, 0], \\\"py\\\": [14, 6, 5, 4], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [19, 19, 19, 19], \\\"ny\\\": [16, 19, 17, 18], \\\"nz\\\": [0, 0, 0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [11, 5, 5, 0], \\\"py\\\": [14, 1, 4, 4], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [11, 8, 2, 15], \\\"ny\\\": [17, 14, 1, 9], \\\"nz\\\": [0, 0, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 5], \\\"py\\\": [19, 21], \\\"pz\\\": [0, 0], \\\"nx\\\": [10, 2], \\\"ny\\\": [15, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 4], \\\"py\\\": [4, 6], \\\"pz\\\": [1, 1], \\\"nx\\\": [3, 3], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 7], \\\"py\\\": [1, 13], \\\"pz\\\": [2, 0], \\\"nx\\\": [7, 2], \\\"ny\\\": [1, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [15, 10, 4, 7], \\\"py\\\": [23, 3, 1, 7], \\\"pz\\\": [0, 1, 2, 1], \\\"nx\\\": [0, 4, 1, 1], \\\"ny\\\": [0, 2, 0, -1900147915], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 2], \\\"py\\\": [12, 11], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 4], \\\"ny\\\": [2, 5], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 0, 1, 0], \\\"py\\\": [9, 4, 3, 2, 6], \\\"pz\\\": [0, 1, 2, 1, 1], \\\"nx\\\": [9, 4, 2, 16, 16], \\\"ny\\\": [7, 4, 2, 8, 8], \\\"nz\\\": [0, 1, 2, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [18, 4, 9, 4, 4], \\\"py\\\": [12, 5, 6, 3, 4], \\\"pz\\\": [0, 2, 1, 2, -1], \\\"nx\\\": [4, 3, 3, 2, 3], \\\"ny\\\": [23, 19, 21, 16, 18], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 6], \\\"py\\\": [14, 13], \\\"pz\\\": [0, 0], \\\"nx\\\": [3, 10], \\\"ny\\\": [4, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 4, 4, 2, 2], \\\"py\\\": [8, 11, 7, 4, 4], \\\"pz\\\": [1, 1, 1, 2, -1], \\\"nx\\\": [20, 18, 19, 20, 19], \\\"ny\\\": [4, 0, 2, 3, 1], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [17, 12, 14, 8, 16], \\\"py\\\": [2, 0, 0, 0, 0], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [3, 15, 3, 2, 2], \\\"ny\\\": [2, 9, 7, 2, 2], \\\"nz\\\": [2, 0, 1, 2, -1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 10, 11, 11, 11], \\\"py\\\": [10, 12, 11, 12, 12], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [13, 13, 20, 10, 13], \\\"ny\\\": [9, 11, 8, 4, 10], \\\"nz\\\": [0, 0, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 16], \\\"py\\\": [7, 13], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 13], \\\"ny\\\": [4, 11], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 7], \\\"py\\\": [20, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [10, 10], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 3, \\\"px\\\": [13, 10, 17], \\\"py\\\": [9, 3, 5], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [1, 3, 1], \\\"ny\\\": [5, 16, 6], \\\"nz\\\": [2, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [5, 5], \\\"pz\\\": [2, -1], \\\"nx\\\": [8, 3], \\\"ny\\\": [14, 10], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 9, 12, 10], \\\"py\\\": [2, 2, 2, 2], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [4, 4, 4, 10], \\\"ny\\\": [5, 5, 0, 16], \\\"nz\\\": [1, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [7, 9, 12], \\\"py\\\": [2, 2, 2], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [4, 7, 2], \\\"ny\\\": [3, 1, 0], \\\"nz\\\": [0, 0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [3, 12], \\\"pz\\\": [2, 0], \\\"nx\\\": [7, 4], \\\"ny\\\": [6, 5], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 4, \\\"px\\\": [12, 12, 6, 3], \\\"py\\\": [12, 11, 21, 7], \\\"pz\\\": [0, 0, -1, -1], \\\"nx\\\": [1, 0, 0, 0], \\\"ny\\\": [13, 3, 6, 5], \\\"nz\\\": [0, 2, 1, 1] }, { \\\"size\\\": 3, \\\"px\\\": [3, 1, 3], \\\"py\\\": [21, 8, 18], \\\"pz\\\": [0, 1, 0], \\\"nx\\\": [11, 20, 0], \\\"ny\\\": [17, 17, 6], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 8], \\\"py\\\": [3, 12], \\\"pz\\\": [2, 0], \\\"nx\\\": [2, 20], \\\"ny\\\": [4, 17], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [2, 3, 4, 3, 2], \\\"py\\\": [10, 14, 14, 15, 13], \\\"pz\\\": [1, 0, 0, 0, 0], \\\"nx\\\": [0, 0, 1, 0, 0], \\\"ny\\\": [21, 20, 23, 19, 19], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 15], \\\"py\\\": [7, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 8], \\\"ny\\\": [4, 14], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [19, 14, 12, 15, 4], \\\"py\\\": [8, 12, 10, 16, 2], \\\"pz\\\": [0, 0, 0, 0, 2], \\\"nx\\\": [8, 0, 12, 4, 0], \\\"ny\\\": [4, 1, 12, 2, 19], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 9], \\\"py\\\": [15, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 15], \\\"ny\\\": [9, 14], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [4, 2, 3, 4, 9], \\\"py\\\": [9, 4, 3, 8, 23], \\\"pz\\\": [1, 2, 1, 1, 0], \\\"nx\\\": [11, 23, 23, 11, 11], \\\"ny\\\": [0, 2, 3, 1, 1], \\\"nz\\\": [1, 0, 0, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 7], \\\"py\\\": [1, 1], \\\"pz\\\": [0, 0], \\\"nx\\\": [3, 4], \\\"ny\\\": [10, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 9, 8, 5], \\\"py\\\": [12, 15, 13, 3], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [3, 12, 14, 13], \\\"ny\\\": [0, 3, 3, 3], \\\"nz\\\": [2, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [6, 5], \\\"pz\\\": [0, 0], \\\"nx\\\": [8, 11], \\\"ny\\\": [4, 20], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [21, 20, 21, 21, 21], \\\"py\\\": [18, 21, 17, 19, 19], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [2, 5, 4, 4, 5], \\\"ny\\\": [5, 12, 11, 10, 10], \\\"nz\\\": [1, 0, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [1, 1, 1, 1, 1], \\\"py\\\": [10, 11, 7, 9, 8], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [11, 23, 23, 23, 23], \\\"ny\\\": [10, 20, 21, 19, 19], \\\"nz\\\": [1, 0, 0, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [7, 8, 7, 3, 1], \\\"py\\\": [14, 13, 13, 2, 2], \\\"pz\\\": [0, 0, -1, -1, -1], \\\"nx\\\": [1, 10, 2, 2, 10], \\\"ny\\\": [2, 13, 4, 16, 12], \\\"nz\\\": [2, 0, 1, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [17, 18], \\\"py\\\": [12, 12], \\\"pz\\\": [0, 0], \\\"nx\\\": [8, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 0], \\\"py\\\": [5, 20], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 9], \\\"ny\\\": [0, 2], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [22, 22, 22, 11, 23], \\\"py\\\": [16, 15, 14, 6, 13], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [16, 15, 7, 9, 9], \\\"ny\\\": [15, 8, 4, 10, 10], \\\"nz\\\": [0, 0, 1, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 3], \\\"py\\\": [3, 1], \\\"pz\\\": [0, 2], \\\"nx\\\": [8, 3], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 6], \\\"py\\\": [4, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [6, 3], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 3, \\\"px\\\": [4, 2, 6], \\\"py\\\": [6, 3, 4], \\\"pz\\\": [1, 2, 1], \\\"nx\\\": [10, 0, 4], \\\"ny\\\": [9, 4, 3], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [2, 8, 4, 10], \\\"py\\\": [4, 23, 7, 23], \\\"pz\\\": [2, 0, 1, 0], \\\"nx\\\": [9, 4, 11, 9], \\\"ny\\\": [21, 5, 16, 0], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [13, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 2], \\\"ny\\\": [11, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [1, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 5], \\\"ny\\\": [0, 1], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [7, 2], \\\"py\\\": [0, 0], \\\"pz\\\": [0, 2], \\\"nx\\\": [2, 10], \\\"ny\\\": [1, 6], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 2], \\\"py\\\": [7, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [21, 5], \\\"ny\\\": [15, 4], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [1, 1], \\\"py\\\": [10, 9], \\\"pz\\\": [0, 0], \\\"nx\\\": [0, 3], \\\"ny\\\": [13, 11], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 9], \\\"py\\\": [13, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 3], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [14, 13, 13, 14, 14], \\\"py\\\": [12, 10, 11, 13, 13], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [9, 8, 4, 5, 7], \\\"ny\\\": [4, 4, 2, 2, 4], \\\"nz\\\": [0, 0, 1, 1, 0] }, { \\\"size\\\": 3, \\\"px\\\": [2, 4, 1], \\\"py\\\": [2, 0, 0], \\\"pz\\\": [0, 0, 1], \\\"nx\\\": [0, 7, 4], \\\"ny\\\": [0, 3, 2], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 4], \\\"py\\\": [5, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 6], \\\"ny\\\": [4, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 3, \\\"px\\\": [0, 0, 0], \\\"py\\\": [20, 2, 4], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [12, 3, 10], \\\"ny\\\": [3, 1, 3], \\\"nz\\\": [0, 2, 0] }, { \\\"size\\\": 5, \\\"px\\\": [5, 11, 10, 13, 13], \\\"py\\\": [0, 0, 0, 2, 2], \\\"pz\\\": [1, 0, 0, 0, -1], \\\"nx\\\": [4, 5, 5, 4, 5], \\\"ny\\\": [14, 0, 2, 6, 1], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [3, 11], \\\"ny\\\": [4, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, -1715597992], \\\"py\\\": [19, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 14], \\\"ny\\\": [10, 17], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 1], \\\"py\\\": [9, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 12], \\\"ny\\\": [2, 10], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [17, 9], \\\"py\\\": [13, 17], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 7], \\\"py\\\": [1, 9], \\\"pz\\\": [1, -1], \\\"nx\\\": [18, 4], \\\"ny\\\": [14, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [14, 7], \\\"py\\\": [23, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [5, 10], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 7], \\\"py\\\": [17, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 2], \\\"ny\\\": [0, 3], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [13, 4], \\\"py\\\": [20, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 3], \\\"ny\\\": [21, 17], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [0, 0, 1], \\\"py\\\": [3, 6, 15], \\\"pz\\\": [2, 1, 0], \\\"nx\\\": [10, 8, 3], \\\"ny\\\": [6, 4, 2], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 8], \\\"py\\\": [18, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 4], \\\"ny\\\": [8, 10], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 5], \\\"py\\\": [2, 2], \\\"pz\\\": [1, 1], \\\"nx\\\": [8, 9], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [11, 5], \\\"pz\\\": [1, 2], \\\"nx\\\": [13, 3], \\\"ny\\\": [19, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 6], \\\"py\\\": [1, 11], \\\"pz\\\": [2, -1], \\\"nx\\\": [3, 2], \\\"ny\\\": [1, 0], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [9, 4], \\\"py\\\": [10, 5], \\\"pz\\\": [1, 2], \\\"nx\\\": [8, 4], \\\"ny\\\": [10, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 12], \\\"py\\\": [11, 20], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [6, 10], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [7, 12], \\\"py\\\": [2, 20], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 2], \\\"ny\\\": [2, 3], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [0, 15], \\\"py\\\": [5, 21], \\\"pz\\\": [1, -1], \\\"nx\\\": [10, 9], \\\"ny\\\": [3, 3], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 9], \\\"py\\\": [1, 0], \\\"pz\\\": [0, 1], \\\"nx\\\": [19, 3], \\\"ny\\\": [0, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [21, 5], \\\"py\\\": [13, 5], \\\"pz\\\": [0, 2], \\\"nx\\\": [23, 6], \\\"ny\\\": [23, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 8], \\\"py\\\": [3, 1], \\\"pz\\\": [2, -1], \\\"nx\\\": [9, 9], \\\"ny\\\": [6, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [7, 7], \\\"pz\\\": [1, -1], \\\"nx\\\": [5, 3], \\\"ny\\\": [23, 17], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 3], \\\"py\\\": [6, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 4], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 3, \\\"px\\\": [14, 0, 17], \\\"py\\\": [20, 3, 21], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [11, 11, 11], \\\"ny\\\": [7, 9, 10], \\\"nz\\\": [1, 1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 11, 23, 23, 12], \\\"py\\\": [10, 11, 21, 20, 12], \\\"pz\\\": [1, 1, 0, 0, 0], \\\"nx\\\": [8, 3, 6, 7, 7], \\\"ny\\\": [4, 5, 11, 11, 11], \\\"nz\\\": [1, 2, 1, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [11, 10], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 3], \\\"ny\\\": [2, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 14], \\\"py\\\": [19, 19], \\\"pz\\\": [0, 0], \\\"nx\\\": [12, 13], \\\"ny\\\": [18, 17], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [13, 14, 12, 15, 14], \\\"py\\\": [0, 0, 1, 1, 1], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [4, 8, 4, 7, 7], \\\"ny\\\": [3, 4, 2, 5, 5], \\\"nz\\\": [2, 1, 2, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 5], \\\"py\\\": [10, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 9], \\\"ny\\\": [2, 3], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 10], \\\"py\\\": [6, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [8, 18, 8, 4, 16], \\\"py\\\": [6, 12, 9, 4, 13], \\\"pz\\\": [1, 0, 1, 2, 0], \\\"nx\\\": [3, 4, 3, 5, 5], \\\"ny\\\": [0, 2, 3, 1, 1], \\\"nz\\\": [1, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [2, 4], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 0], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [4, 5], \\\"pz\\\": [2, -1], \\\"nx\\\": [4, 2], \\\"ny\\\": [14, 7], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [3, 4, 4, 3], \\\"py\\\": [11, 12, 12, 2], \\\"pz\\\": [0, 0, -1, -1], \\\"nx\\\": [1, 2, 1, 2], \\\"ny\\\": [11, 14, 12, 16], \\\"nz\\\": [0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 0], \\\"py\\\": [11, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 2], \\\"py\\\": [21, 11], \\\"pz\\\": [0, 1], \\\"nx\\\": [3, 2], \\\"ny\\\": [10, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [10, 3, 13], \\\"py\\\": [2, 0, 2], \\\"pz\\\": [0, 2, 0], \\\"nx\\\": [7, 16, 1], \\\"ny\\\": [10, 4, 1], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 12], \\\"py\\\": [2, 5], \\\"pz\\\": [1, 0], \\\"nx\\\": [6, 18], \\\"ny\\\": [1, 19], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 16], \\\"py\\\": [0, 16], \\\"pz\\\": [1, -1], \\\"nx\\\": [11, 2], \\\"ny\\\": [5, 1], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 10], \\\"py\\\": [13, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 1], \\\"ny\\\": [22, 21], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 10], \\\"py\\\": [18, 18], \\\"pz\\\": [0, 0], \\\"nx\\\": [5, 8], \\\"ny\\\": [9, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 2], \\\"py\\\": [20, 18], \\\"pz\\\": [0, 0], \\\"nx\\\": [8, 3], \\\"ny\\\": [5, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 2], \\\"py\\\": [17, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [14, 13], \\\"ny\\\": [15, 15], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 4], \\\"py\\\": [2, 3], \\\"pz\\\": [2, 2], \\\"nx\\\": [8, 3], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 18, 18, 8, 7], \\\"py\\\": [6, 11, 11, 7, 9], \\\"pz\\\": [1, 0, -1, -1, -1], \\\"nx\\\": [5, 13, 5, 11, 5], \\\"ny\\\": [3, 11, 0, 8, 2], \\\"nz\\\": [2, 0, 2, 1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [12, 0, 5, 4, 7], \\\"py\\\": [15, 0, 4, 0, 9], \\\"pz\\\": [0, -1, -1, -1, -1], \\\"nx\\\": [8, 7, 4, 16, 6], \\\"ny\\\": [17, 12, 9, 10, 12], \\\"nz\\\": [0, 0, 1, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 7], \\\"py\\\": [14, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 4], \\\"ny\\\": [9, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 4, \\\"px\\\": [8, 0, 22, 4], \\\"py\\\": [4, 4, 23, 0], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [2, 4, 2, 5], \\\"ny\\\": [0, 1, 2, 9], \\\"nz\\\": [2, 1, 2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 9, 10, 10, 8], \\\"py\\\": [0, 1, 1, 2, 0], \\\"pz\\\": [1, 1, 1, 1, 1], \\\"nx\\\": [4, 16, 16, 16, 6], \\\"ny\\\": [2, 11, 11, 11, 12], \\\"nz\\\": [2, 0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 6], \\\"py\\\": [6, 5], \\\"pz\\\": [1, 1], \\\"nx\\\": [0, 4], \\\"ny\\\": [3, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [10, 3, 4], \\\"py\\\": [5, 9, 8], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [11, 23, 23], \\\"ny\\\": [7, 12, 11], \\\"nz\\\": [1, 0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [13, 12, 7], \\\"py\\\": [19, 19, 10], \\\"pz\\\": [0, 0, 1], \\\"nx\\\": [13, 5, 19], \\\"ny\\\": [20, 15, 22], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 12], \\\"py\\\": [12, 13], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 10], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 12], \\\"py\\\": [1, 13], \\\"pz\\\": [2, -1], \\\"nx\\\": [2, 7], \\\"ny\\\": [2, 13], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 10], \\\"py\\\": [8, 9], \\\"pz\\\": [1, 1], \\\"nx\\\": [19, 7], \\\"ny\\\": [23, 13], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [8, 7, 23, 15], \\\"py\\\": [11, 12, 4, 21], \\\"pz\\\": [0, 0, -1, -1], \\\"nx\\\": [2, 5, 1, 10], \\\"ny\\\": [6, 6, 2, 13], \\\"nz\\\": [0, 1, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 9], \\\"py\\\": [3, 3], \\\"pz\\\": [0, 0], \\\"nx\\\": [2, 3], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 2], \\\"py\\\": [3, 4], \\\"pz\\\": [2, -1], \\\"nx\\\": [3, 6], \\\"ny\\\": [1, 2], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 11], \\\"py\\\": [20, 16], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 4], \\\"ny\\\": [5, 20], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 7], \\\"py\\\": [7, 5], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [4, 2], \\\"py\\\": [11, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [5, 5], \\\"ny\\\": [3, 5], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 3], \\\"py\\\": [11, 5], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 1], \\\"ny\\\": [12, 3], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [9, 11], \\\"py\\\": [6, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [10, 20], \\\"ny\\\": [9, 18], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [2, 2, 2, 2, 1], \\\"py\\\": [15, 13, 16, 14, 7], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [15, 8, 9, 8, 4], \\\"ny\\\": [11, 6, 5, 5, 4], \\\"nz\\\": [0, 1, 1, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 2], \\\"py\\\": [5, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 2], \\\"ny\\\": [7, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [5, 11], \\\"py\\\": [1, 3], \\\"pz\\\": [2, 1], \\\"nx\\\": [10, 10], \\\"ny\\\": [3, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 11], \\\"py\\\": [13, 18], \\\"pz\\\": [0, -1], \\\"nx\\\": [6, 9], \\\"ny\\\": [9, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [5, 1, 2, 5, 6], \\\"py\\\": [14, 4, 9, 15, 23], \\\"pz\\\": [0, 2, 1, 0, 0], \\\"nx\\\": [4, 9, 18, 16, 17], \\\"ny\\\": [0, 1, 1, 0, 0], \\\"nz\\\": [2, 1, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [16, 17], \\\"py\\\": [0, 0], \\\"pz\\\": [0, 0], \\\"nx\\\": [23, 23], \\\"ny\\\": [5, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 8], \\\"py\\\": [20, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 6], \\\"ny\\\": [12, 10], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 15], \\\"py\\\": [15, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [6, 3], \\\"ny\\\": [16, 4], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 20], \\\"py\\\": [7, 8], \\\"pz\\\": [0, 0], \\\"nx\\\": [18, 11], \\\"ny\\\": [9, 14], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 4], \\\"py\\\": [12, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [3, 15], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [5, 2], \\\"pz\\\": [1, 2], \\\"nx\\\": [5, 5], \\\"ny\\\": [2, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 20], \\\"py\\\": [1, 20], \\\"pz\\\": [1, -1], \\\"nx\\\": [15, 17], \\\"ny\\\": [1, 2], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [7, 2], \\\"py\\\": [16, 4], \\\"pz\\\": [0, 2], \\\"nx\\\": [4, 0], \\\"ny\\\": [10, 6], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 8], \\\"py\\\": [5, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [1, 1], \\\"ny\\\": [10, 18], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [22, 0], \\\"py\\\": [3, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [23, 11], \\\"ny\\\": [4, 1], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 3, \\\"px\\\": [19, 10, 20], \\\"py\\\": [21, 8, 18], \\\"pz\\\": [0, 1, 0], \\\"nx\\\": [3, 6, 20], \\\"ny\\\": [5, 11, 14], \\\"nz\\\": [2, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [2, 1, 6, 5], \\\"py\\\": [7, 4, 23, 22], \\\"pz\\\": [1, 2, 0, 0], \\\"nx\\\": [9, 19, 20, 4], \\\"ny\\\": [8, 11, 9, 2], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [2, 11], \\\"pz\\\": [2, 1], \\\"nx\\\": [12, 10], \\\"ny\\\": [21, 9], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [6, 0, 2, 2], \\\"py\\\": [6, 1, 4, 1], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [0, 0, 0, 0], \\\"ny\\\": [5, 8, 9, 4], \\\"nz\\\": [1, 0, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 13, 6, 11, 9], \\\"py\\\": [0, 3, 1, 1, 2], \\\"pz\\\": [2, 0, 1, 0, 0], \\\"nx\\\": [7, 20, 16, 4, 7], \\\"ny\\\": [7, 2, 19, 2, 6], \\\"nz\\\": [1, 0, 0, 2, 1] }, { \\\"size\\\": 4, \\\"px\\\": [7, 5, 2, 6], \\\"py\\\": [7, 7, 4, 11], \\\"pz\\\": [0, 0, 2, 1], \\\"nx\\\": [7, 1, 21, 0], \\\"ny\\\": [8, 4, 11, 3], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [3, 2], \\\"pz\\\": [2, 2], \\\"nx\\\": [8, 9], \\\"ny\\\": [3, 11], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 13], \\\"py\\\": [3, 5], \\\"pz\\\": [1, 0], \\\"nx\\\": [4, 3], \\\"ny\\\": [2, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [3, 12, 13, 11], \\\"py\\\": [0, 1, 1, 1], \\\"pz\\\": [2, 0, 0, 0], \\\"nx\\\": [8, 9, 13, 0], \\\"ny\\\": [4, 1, 16, 3], \\\"nz\\\": [1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 1], \\\"py\\\": [4, 14], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 10], \\\"ny\\\": [1, 2], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 12], \\\"py\\\": [21, 21], \\\"pz\\\": [0, 0], \\\"nx\\\": [10, 11], \\\"ny\\\": [19, 19], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 12], \\\"py\\\": [6, 21], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 7], \\\"py\\\": [19, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [6, 5], \\\"ny\\\": [9, 11], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 11, 11, 10, 10], \\\"py\\\": [10, 12, 11, 13, 13], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [7, 13, 6, 12, 7], \\\"ny\\\": [10, 6, 3, 6, 11], \\\"nz\\\": [0, 0, 1, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 11], \\\"py\\\": [6, 12], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [16, 15, 16, 15, 17], \\\"py\\\": [1, 0, 0, 1, 1], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [13, 7, 6, 12, 12], \\\"ny\\\": [5, 4, 3, 6, 6], \\\"nz\\\": [0, 1, 1, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 3], \\\"py\\\": [1, 3], \\\"pz\\\": [2, 1], \\\"nx\\\": [1, 5], \\\"ny\\\": [1, 3], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [13, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [4, 9], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 3], \\\"py\\\": [4, 3], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [3, 6], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [2, 1], \\\"pz\\\": [0, 1], \\\"nx\\\": [5, 5], \\\"ny\\\": [7, 21], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 4], \\\"py\\\": [0, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [19, 17], \\\"ny\\\": [1, 0], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [8, 11, 5, 0], \\\"py\\\": [6, 1, 1, 22], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [0, 10, 10, 1], \\\"ny\\\": [6, 12, 13, 4], \\\"nz\\\": [1, 0, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 17], \\\"py\\\": [6, 13], \\\"pz\\\": [1, 0], \\\"nx\\\": [14, 17], \\\"ny\\\": [9, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 8], \\\"py\\\": [0, 4], \\\"pz\\\": [2, -1], \\\"nx\\\": [9, 8], \\\"ny\\\": [1, 1], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 14], \\\"py\\\": [13, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [23, 23], \\\"ny\\\": [21, 19], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 9], \\\"py\\\": [9, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [6, 3], \\\"ny\\\": [2, 1], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 1], \\\"py\\\": [4, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 4], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 9], \\\"py\\\": [3, 3], \\\"pz\\\": [2, -1], \\\"nx\\\": [17, 9], \\\"ny\\\": [12, 5], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 7], \\\"py\\\": [18, 16], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 2], \\\"ny\\\": [9, 5], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [0, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 5], \\\"ny\\\": [1, 0], \\\"nz\\\": [0, 0] }], \\\"alpha\\\": [-1.149973e+00, 1.149973e+00, -6.844773e-01, 6.844773e-01, -6.635048e-01, 6.635048e-01, -4.888349e-01, 4.888349e-01, -4.267976e-01, 4.267976e-01, -4.258100e-01, 4.258100e-01, -4.815853e-01, 4.815853e-01, -4.091859e-01, 4.091859e-01, -3.137414e-01, 3.137414e-01, -3.339860e-01, 3.339860e-01, -3.891196e-01, 3.891196e-01, -4.167691e-01, 4.167691e-01, -3.186609e-01, 3.186609e-01, -2.957171e-01, 2.957171e-01, -3.210062e-01, 3.210062e-01, -2.725684e-01, 2.725684e-01, -2.452176e-01, 2.452176e-01, -2.812662e-01, 2.812662e-01, -3.029622e-01, 3.029622e-01, -3.293745e-01, 3.293745e-01, -3.441536e-01, 3.441536e-01, -2.946918e-01, 2.946918e-01, -2.890545e-01, 2.890545e-01, -1.949205e-01, 1.949205e-01, -2.176102e-01, 2.176102e-01, -2.595190e-01, 2.595190e-01, -2.690931e-01, 2.690931e-01, -2.130294e-01, 2.130294e-01, -2.316308e-01, 2.316308e-01, -2.798562e-01, 2.798562e-01, -2.146988e-01, 2.146988e-01, -2.332089e-01, 2.332089e-01, -2.470614e-01, 2.470614e-01, -2.204300e-01, 2.204300e-01, -2.272045e-01, 2.272045e-01, -2.583686e-01, 2.583686e-01, -2.072299e-01, 2.072299e-01, -1.834971e-01, 1.834971e-01, -2.332656e-01, 2.332656e-01, -3.271297e-01, 3.271297e-01, -2.401937e-01, 2.401937e-01, -2.006316e-01, 2.006316e-01, -2.401947e-01, 2.401947e-01, -2.475346e-01, 2.475346e-01, -2.579532e-01, 2.579532e-01, -2.466235e-01, 2.466235e-01, -1.787582e-01, 1.787582e-01, -2.036892e-01, 2.036892e-01, -1.665028e-01, 1.665028e-01, -1.576510e-01, 1.576510e-01, -2.036997e-01, 2.036997e-01, -2.040734e-01, 2.040734e-01, -1.792532e-01, 1.792532e-01, -2.174767e-01, 2.174767e-01, -1.876948e-01, 1.876948e-01, -1.883137e-01, 1.883137e-01, -1.923872e-01, 1.923872e-01, -2.620218e-01, 2.620218e-01, -1.659873e-01, 1.659873e-01, -1.475948e-01, 1.475948e-01, -1.731607e-01, 1.731607e-01, -2.059256e-01, 2.059256e-01, -1.586309e-01, 1.586309e-01, -1.607668e-01, 1.607668e-01, -1.975101e-01, 1.975101e-01, -2.130745e-01, 2.130745e-01, -1.898872e-01, 1.898872e-01, -2.052598e-01, 2.052598e-01, -1.599397e-01, 1.599397e-01, -1.770134e-01, 1.770134e-01, -1.888249e-01, 1.888249e-01, -1.515406e-01, 1.515406e-01, -1.907771e-01, 1.907771e-01, -1.698406e-01, 1.698406e-01, -2.079535e-01, 2.079535e-01, -1.966967e-01, 1.966967e-01, -1.631391e-01, 1.631391e-01, -2.158666e-01, 2.158666e-01, -2.891774e-01, 2.891774e-01, -1.581556e-01, 1.581556e-01, -1.475359e-01, 1.475359e-01, -1.806169e-01, 1.806169e-01, -1.782238e-01, 1.782238e-01, -1.660440e-01, 1.660440e-01, -1.576919e-01, 1.576919e-01, -1.741775e-01, 1.741775e-01, -1.427265e-01, 1.427265e-01, -1.695880e-01, 1.695880e-01, -1.486712e-01, 1.486712e-01, -1.533565e-01, 1.533565e-01, -1.601464e-01, 1.601464e-01, -1.978414e-01, 1.978414e-01, -1.746566e-01, 1.746566e-01, -1.794736e-01, 1.794736e-01, -1.896567e-01, 1.896567e-01, -1.666197e-01, 1.666197e-01, -1.969351e-01, 1.969351e-01, -2.321735e-01, 2.321735e-01, -1.592485e-01, 1.592485e-01, -1.671464e-01, 1.671464e-01, -1.688885e-01, 1.688885e-01, -1.868042e-01, 1.868042e-01, -1.301138e-01, 1.301138e-01, -1.330094e-01, 1.330094e-01, -1.268423e-01, 1.268423e-01, -1.820868e-01, 1.820868e-01, -1.881020e-01, 1.881020e-01, -1.580814e-01, 1.580814e-01, -1.302653e-01, 1.302653e-01, -1.787262e-01, 1.787262e-01, -1.658453e-01, 1.658453e-01, -1.240772e-01, 1.240772e-01, -1.315621e-01, 1.315621e-01, -1.756341e-01, 1.756341e-01, -1.429438e-01, 1.429438e-01, -1.351775e-01, 1.351775e-01, -2.035692e-01, 2.035692e-01, -1.267670e-01, 1.267670e-01, -1.288470e-01, 1.288470e-01, -1.393648e-01, 1.393648e-01, -1.755962e-01, 1.755962e-01, -1.308445e-01, 1.308445e-01, -1.703894e-01, 1.703894e-01, -1.461334e-01, 1.461334e-01, -1.368683e-01, 1.368683e-01, -1.244085e-01, 1.244085e-01, -1.718163e-01, 1.718163e-01, -1.415624e-01, 1.415624e-01, -1.752024e-01, 1.752024e-01, -1.666463e-01, 1.666463e-01, -1.407325e-01, 1.407325e-01, -1.258317e-01, 1.258317e-01, -1.416511e-01, 1.416511e-01, -1.420816e-01, 1.420816e-01, -1.562547e-01, 1.562547e-01, -1.542952e-01, 1.542952e-01, -1.158829e-01, 1.158829e-01, -1.392875e-01, 1.392875e-01, -1.610095e-01, 1.610095e-01, -1.546440e-01, 1.546440e-01, -1.416235e-01, 1.416235e-01, -2.028817e-01, 2.028817e-01, -1.106779e-01, 1.106779e-01, -9.231660e-02, 9.231660e-02, -1.164460e-01, 1.164460e-01, -1.701578e-01, 1.701578e-01, -1.277995e-01, 1.277995e-01, -1.946177e-01, 1.946177e-01, -1.394509e-01, 1.394509e-01, -1.370145e-01, 1.370145e-01, -1.446031e-01, 1.446031e-01, -1.665215e-01, 1.665215e-01, -1.435822e-01, 1.435822e-01, -1.559354e-01, 1.559354e-01, -1.591860e-01, 1.591860e-01, -1.193338e-01, 1.193338e-01, -1.236954e-01, 1.236954e-01, -1.209139e-01, 1.209139e-01, -1.267385e-01, 1.267385e-01, -1.232397e-01, 1.232397e-01, -1.299632e-01, 1.299632e-01, -1.302020e-01, 1.302020e-01, -1.202975e-01, 1.202975e-01, -1.525378e-01, 1.525378e-01, -1.123073e-01, 1.123073e-01, -1.605678e-01, 1.605678e-01, -1.406867e-01, 1.406867e-01, -1.354273e-01, 1.354273e-01, -1.393192e-01, 1.393192e-01, -1.278263e-01, 1.278263e-01, -1.172073e-01, 1.172073e-01, -1.153493e-01, 1.153493e-01, -1.356318e-01, 1.356318e-01, -1.316614e-01, 1.316614e-01, -1.374489e-01, 1.374489e-01, -1.018254e-01, 1.018254e-01, -1.473336e-01, 1.473336e-01, -1.289687e-01, 1.289687e-01, -1.299183e-01, 1.299183e-01, -1.178391e-01, 1.178391e-01, -1.619059e-01, 1.619059e-01, -1.842569e-01, 1.842569e-01, -1.829095e-01, 1.829095e-01, -1.939918e-01, 1.939918e-01, -1.395362e-01, 1.395362e-01, -1.774673e-01, 1.774673e-01, -1.688216e-01, 1.688216e-01, -1.671747e-01, 1.671747e-01, -1.850178e-01, 1.850178e-01, -1.106695e-01, 1.106695e-01, -1.258323e-01, 1.258323e-01, -1.246819e-01, 1.246819e-01, -9.892193e-02, 9.892193e-02, -1.399638e-01, 1.399638e-01, -1.228375e-01, 1.228375e-01, -1.756236e-01, 1.756236e-01, -1.360307e-01, 1.360307e-01, -1.266574e-01, 1.266574e-01, -1.372135e-01, 1.372135e-01, -1.175947e-01, 1.175947e-01, -1.330075e-01, 1.330075e-01, -1.396152e-01, 1.396152e-01, -2.088443e-01, 2.088443e-01] }, { \\\"count\\\": 301, \\\"threshold\\\": -4.887516e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [8, 11, 8, 14, 10], \\\"py\\\": [6, 9, 3, 3, 4], \\\"pz\\\": [1, 0, 0, 0, 0], \\\"nx\\\": [8, 7, 19, 7, 13], \\\"ny\\\": [11, 8, 8, 5, 8], \\\"nz\\\": [1, 1, 0, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [14, 3, 13, 12, 12], \\\"py\\\": [4, 6, 4, 4, 8], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [2, 5, 2, 10, 10], \\\"ny\\\": [2, 8, 5, 8, 8], \\\"nz\\\": [2, 1, 2, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 5, 3, 7, 7], \\\"py\\\": [2, 3, 1, 2, 2], \\\"pz\\\": [0, 0, 1, 0, -1], \\\"nx\\\": [2, 2, 1, 2, 1], \\\"ny\\\": [3, 1, 2, 2, 2], \\\"nz\\\": [0, 0, 2, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 3, 6, 12, 8], \\\"py\\\": [4, 2, 4, 10, 17], \\\"pz\\\": [2, 2, 1, 0, 0], \\\"nx\\\": [4, 8, 8, 2, 1], \\\"ny\\\": [4, 4, 4, 2, 2], \\\"nz\\\": [1, 1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [18, 19, 17, 9, 16], \\\"py\\\": [1, 2, 2, 0, 2], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [23, 23, 22, 22, 22], \\\"ny\\\": [4, 3, 1, 0, 2], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [15, 4, 14], \\\"py\\\": [23, 4, 18], \\\"pz\\\": [0, 2, 0], \\\"nx\\\": [7, 0, 5], \\\"ny\\\": [10, 4, 9], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 11, 16, 11, 17], \\\"py\\\": [8, 6, 11, 7, 11], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [8, 4, 14, 14, 1], \\\"ny\\\": [4, 4, 8, 8, 5], \\\"nz\\\": [1, 1, 0, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 12, 12, 12], \\\"py\\\": [13, 10, 11, 12, 12], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [4, 4, 1, 2, 9], \\\"ny\\\": [8, 10, 2, 4, 15], \\\"nz\\\": [0, 1, 2, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [19, 0], \\\"py\\\": [14, 17], \\\"pz\\\": [0, -1], \\\"nx\\\": [20, 19], \\\"ny\\\": [15, 22], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [3, 3, 1, 3, 5], \\\"py\\\": [13, 15, 6, 14, 22], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [0, 0, 1, 0, 0], \\\"ny\\\": [11, 21, 23, 5, 5], \\\"nz\\\": [1, 0, 0, 2, -1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 2, 10, 4, 3], \\\"py\\\": [19, 4, 13, 16, 13], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [3, 20, 7, 4, 0], \\\"ny\\\": [4, 19, 5, 1, 5], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 5], \\\"py\\\": [4, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [15, 3], \\\"ny\\\": [15, 1], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 4, \\\"px\\\": [17, 17, 12, 11], \\\"py\\\": [14, 15, 18, 18], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [11, 4, 1, 0], \\\"ny\\\": [17, 20, 8, 5], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 2, 1, 2, 11], \\\"py\\\": [14, 4, 1, 1, 18], \\\"pz\\\": [0, -1, -1, -1, -1], \\\"nx\\\": [5, 5, 3, 5, 2], \\\"ny\\\": [18, 17, 7, 9, 2], \\\"nz\\\": [0, 0, 1, 1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [20, 19, 20, 15, 20], \\\"py\\\": [17, 20, 12, 12, 8], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [17, 0, 5, 2, 2], \\\"ny\\\": [8, 4, 9, 2, 2], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 8], \\\"py\\\": [7, 11], \\\"pz\\\": [1, -1], \\\"nx\\\": [7, 8], \\\"ny\\\": [7, 10], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [15, 16, 14, 8, 8], \\\"py\\\": [2, 2, 2, 0, 0], \\\"pz\\\": [0, 0, 0, 1, -1], \\\"nx\\\": [20, 11, 21, 18, 19], \\\"ny\\\": [3, 6, 5, 1, 2], \\\"nz\\\": [0, 1, 0, 0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [17, 18, 9, 8], \\\"py\\\": [23, 21, 7, 8], \\\"pz\\\": [0, 0, 1, 1], \\\"nx\\\": [8, 17, 10, 18], \\\"ny\\\": [4, 12, 2, 1], \\\"nz\\\": [1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [2, 2, 9, 4, 8], \\\"py\\\": [7, 3, 12, 12, 23], \\\"pz\\\": [1, 1, 0, 0, 0], \\\"nx\\\": [0, 0, 0, 0, 0], \\\"ny\\\": [3, 1, 2, 4, 4], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [7, 8, 5], \\\"py\\\": [22, 23, 9], \\\"pz\\\": [0, 0, 1], \\\"nx\\\": [9, 4, 2], \\\"ny\\\": [21, 4, 0], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [7, 7], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 2], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [15, 11, 10, 3, 17], \\\"py\\\": [0, 1, 2, 3, 1], \\\"pz\\\": [0, 0, 0, 2, 0], \\\"nx\\\": [5, 8, 4, 3, 3], \\\"ny\\\": [9, 4, 7, 10, 10], \\\"nz\\\": [1, 1, 1, 1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [22, 11, 22], \\\"py\\\": [12, 5, 14], \\\"pz\\\": [0, 1, 0], \\\"nx\\\": [23, 23, 3], \\\"ny\\\": [22, 23, 8], \\\"nz\\\": [0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 11], \\\"py\\\": [7, 5], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 2], \\\"ny\\\": [14, 5], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 4, \\\"px\\\": [17, 16, 2, 4], \\\"py\\\": [14, 13, 5, 0], \\\"pz\\\": [0, 0, -1, -1], \\\"nx\\\": [8, 9, 15, 8], \\\"ny\\\": [8, 9, 14, 7], \\\"nz\\\": [1, 1, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 16], \\\"py\\\": [6, 13], \\\"pz\\\": [1, -1], \\\"nx\\\": [2, 1], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [1, 0, 1, 2, 1], \\\"py\\\": [15, 2, 16, 19, 12], \\\"pz\\\": [0, 2, 0, 0, 0], \\\"nx\\\": [8, 7, 4, 9, 9], \\\"ny\\\": [5, 11, 4, 5, 5], \\\"nz\\\": [1, 1, 1, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 7], \\\"py\\\": [11, 12], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 1], \\\"ny\\\": [10, 16], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 13], \\\"py\\\": [17, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 4], \\\"ny\\\": [8, 4], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [11, 10, 7, 8, 9], \\\"py\\\": [0, 0, 1, 1, 1], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [4, 5, 4, 5, 6], \\\"ny\\\": [1, 0, 2, 1, 0], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [4, 3], \\\"pz\\\": [2, 2], \\\"nx\\\": [3, 21], \\\"ny\\\": [4, 20], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 11, 5, 2, 11], \\\"py\\\": [12, 10, 6, 11, 11], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [4, 15, 16, 7, 7], \\\"ny\\\": [5, 10, 11, 10, 10], \\\"nz\\\": [1, 0, 0, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [13, 14, 1, 11, 11], \\\"py\\\": [2, 2, 3, 2, 2], \\\"pz\\\": [0, 0, 2, 0, -1], \\\"nx\\\": [3, 0, 0, 1, 0], \\\"ny\\\": [23, 15, 14, 9, 8], \\\"nz\\\": [0, 0, 0, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 2], \\\"py\\\": [13, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 9], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 5], \\\"py\\\": [4, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 3], \\\"ny\\\": [3, 0], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [5, 3], \\\"py\\\": [3, 3], \\\"pz\\\": [2, -1], \\\"nx\\\": [11, 23], \\\"ny\\\": [8, 14], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 3, \\\"px\\\": [22, 22, 22], \\\"py\\\": [16, 18, 9], \\\"pz\\\": [0, 0, 0], \\\"nx\\\": [13, 2, 0], \\\"ny\\\": [17, 3, 5], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [13, 10, 13, 14, 11], \\\"py\\\": [2, 2, 1, 2, 1], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [3, 3, 8, 6, 6], \\\"ny\\\": [2, 5, 4, 11, 11], \\\"nz\\\": [2, 2, 1, 1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [12, 1, 1], \\\"py\\\": [14, 0, 1], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [8, 15, 7], \\\"ny\\\": [1, 2, 0], \\\"nz\\\": [1, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 5], \\\"py\\\": [20, 23], \\\"pz\\\": [0, 0], \\\"nx\\\": [3, 3], \\\"ny\\\": [10, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [7, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 3], \\\"ny\\\": [23, 16], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [3, 3, 6], \\\"py\\\": [5, 2, 4], \\\"pz\\\": [2, 2, 1], \\\"nx\\\": [3, 1, 2], \\\"ny\\\": [5, 17, 0], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 8], \\\"py\\\": [17, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [13, 10], \\\"ny\\\": [16, 9], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [15, 7, 14, 13, 14], \\\"py\\\": [1, 0, 0, 0, 1], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [4, 4, 4, 8, 8], \\\"ny\\\": [5, 3, 2, 10, 10], \\\"nz\\\": [2, 2, 2, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 9, 4, 5, 4], \\\"py\\\": [13, 12, 9, 5, 7], \\\"pz\\\": [0, 0, 1, 1, 1], \\\"nx\\\": [22, 21, 22, 22, 22], \\\"ny\\\": [4, 0, 3, 2, 2], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 17], \\\"py\\\": [16, 13], \\\"pz\\\": [0, 0], \\\"nx\\\": [14, 21], \\\"ny\\\": [8, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 10], \\\"py\\\": [4, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [16, 10], \\\"ny\\\": [3, 3], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [1, 1, 0, 1, 0], \\\"py\\\": [17, 16, 7, 15, 8], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [4, 3, 8, 9, 7], \\\"ny\\\": [3, 3, 6, 6, 6], \\\"nz\\\": [1, 1, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [2, 3], \\\"pz\\\": [2, 2], \\\"nx\\\": [8, 3], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 2], \\\"py\\\": [17, 4], \\\"pz\\\": [0, 2], \\\"nx\\\": [10, 12], \\\"ny\\\": [15, 14], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [14, 12], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 10], \\\"ny\\\": [13, 11], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 13], \\\"py\\\": [5, 5], \\\"pz\\\": [0, 0], \\\"nx\\\": [3, 4], \\\"ny\\\": [4, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [7, 10, 8, 11, 11], \\\"py\\\": [13, 2, 12, 2, 2], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [10, 1, 1, 10, 1], \\\"ny\\\": [12, 5, 3, 13, 1], \\\"nz\\\": [0, 1, 1, 0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [6, 10], \\\"py\\\": [4, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 6], \\\"ny\\\": [4, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [20, 20], \\\"py\\\": [21, 22], \\\"pz\\\": [0, 0], \\\"nx\\\": [15, 8], \\\"ny\\\": [5, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 3], \\\"py\\\": [3, 3], \\\"pz\\\": [2, 2], \\\"nx\\\": [9, 17], \\\"ny\\\": [4, 15], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [2, 2, 4], \\\"py\\\": [3, 3, 7], \\\"pz\\\": [2, -1, -1], \\\"nx\\\": [7, 4, 4], \\\"ny\\\": [6, 5, 4], \\\"nz\\\": [1, 2, 2] }, { \\\"size\\\": 5, \\\"px\\\": [8, 9, 16, 17, 17], \\\"py\\\": [1, 2, 1, 1, 1], \\\"pz\\\": [1, 1, 0, 0, -1], \\\"nx\\\": [2, 2, 4, 2, 4], \\\"ny\\\": [16, 14, 22, 15, 21], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 9], \\\"py\\\": [18, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 5], \\\"ny\\\": [5, 8], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 8], \\\"py\\\": [11, 11], \\\"pz\\\": [0, 0], \\\"nx\\\": [15, 5], \\\"ny\\\": [8, 8], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 3], \\\"py\\\": [4, 3], \\\"pz\\\": [2, -1], \\\"nx\\\": [1, 6], \\\"ny\\\": [4, 14], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 12], \\\"py\\\": [7, 11], \\\"pz\\\": [1, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [7, 12], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 7], \\\"py\\\": [10, 22], \\\"pz\\\": [1, 0], \\\"nx\\\": [4, 3], \\\"ny\\\": [10, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 19], \\\"py\\\": [4, 21], \\\"pz\\\": [2, -1], \\\"nx\\\": [11, 11], \\\"ny\\\": [8, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [8, 7], \\\"pz\\\": [1, 1], \\\"nx\\\": [4, 20], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 23, 23, 23, 23], \\\"py\\\": [7, 13, 19, 20, 21], \\\"pz\\\": [1, 0, 0, 0, 0], \\\"nx\\\": [4, 3, 2, 8, 8], \\\"ny\\\": [11, 5, 5, 23, 23], \\\"nz\\\": [1, 1, 2, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 1], \\\"py\\\": [0, 2], \\\"pz\\\": [0, 0], \\\"nx\\\": [0, 6], \\\"ny\\\": [0, 11], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 8], \\\"py\\\": [12, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [23, 23], \\\"ny\\\": [13, 12], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [23, 11, 23, 11, 11], \\\"py\\\": [13, 7, 12, 5, 6], \\\"pz\\\": [0, 1, 0, 1, 1], \\\"nx\\\": [6, 3, 8, 7, 7], \\\"ny\\\": [12, 4, 4, 11, 11], \\\"nz\\\": [0, 1, 1, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [20, 5], \\\"py\\\": [15, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [10, 10], \\\"ny\\\": [11, 10], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 4], \\\"py\\\": [19, 8], \\\"pz\\\": [0, 1], \\\"nx\\\": [11, 19], \\\"ny\\\": [18, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 6], \\\"py\\\": [3, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 15], \\\"ny\\\": [1, 0], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 4, \\\"px\\\": [14, 5, 13, 12], \\\"py\\\": [23, 3, 23, 23], \\\"pz\\\": [0, 1, 0, 0], \\\"nx\\\": [12, 0, 1, 4], \\\"ny\\\": [21, 3, 2, 4], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [19, 5], \\\"py\\\": [12, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 7], \\\"ny\\\": [3, 5], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 8], \\\"py\\\": [5, 3], \\\"pz\\\": [2, -1], \\\"nx\\\": [5, 22], \\\"ny\\\": [3, 11], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 6], \\\"py\\\": [3, 12], \\\"pz\\\": [2, 0], \\\"nx\\\": [3, 5], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 5], \\\"py\\\": [0, 6], \\\"pz\\\": [2, -1], \\\"nx\\\": [14, 6], \\\"ny\\\": [4, 2], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 11], \\\"py\\\": [1, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [4, 10], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 4], \\\"py\\\": [4, 3], \\\"pz\\\": [1, 1], \\\"nx\\\": [5, 8], \\\"ny\\\": [0, 10], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 1], \\\"py\\\": [22, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 2], \\\"ny\\\": [4, 2], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [12, 2], \\\"py\\\": [11, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 5], \\\"ny\\\": [1, 0], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [4, 3], \\\"pz\\\": [1, 1], \\\"nx\\\": [7, 5], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 2], \\\"py\\\": [22, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [4, 9], \\\"ny\\\": [10, 11], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [8, 10], \\\"pz\\\": [1, -1], \\\"nx\\\": [5, 3], \\\"ny\\\": [23, 18], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 6], \\\"py\\\": [21, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 23], \\\"ny\\\": [6, 10], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 9], \\\"py\\\": [8, 7], \\\"pz\\\": [1, 1], \\\"nx\\\": [18, 8], \\\"ny\\\": [18, 6], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 3], \\\"py\\\": [19, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [6, 5], \\\"ny\\\": [9, 11], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [2, 10, 9, 7, 8], \\\"py\\\": [0, 1, 0, 1, 0], \\\"pz\\\": [2, 0, 0, 0, 0], \\\"nx\\\": [3, 4, 6, 8, 8], \\\"ny\\\": [2, 4, 9, 4, 4], \\\"nz\\\": [2, 1, 1, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 4], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [9, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 4], \\\"py\\\": [23, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [12, 9], \\\"ny\\\": [2, 2], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 2], \\\"py\\\": [10, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [0, 2], \\\"ny\\\": [23, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 14], \\\"py\\\": [18, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [12, 8], \\\"ny\\\": [16, 10], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [10, 18, 7, 5], \\\"py\\\": [14, 8, 0, 3], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [8, 6, 8, 5], \\\"ny\\\": [11, 12, 5, 5], \\\"nz\\\": [0, 0, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 5], \\\"py\\\": [2, 2], \\\"pz\\\": [1, 1], \\\"nx\\\": [8, 8], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 10], \\\"py\\\": [20, 20], \\\"pz\\\": [0, 0], \\\"nx\\\": [11, 10], \\\"ny\\\": [19, 19], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [17, 10], \\\"py\\\": [16, 20], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 7], \\\"ny\\\": [4, 8], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 3, \\\"px\\\": [2, 1, 3], \\\"py\\\": [20, 4, 21], \\\"pz\\\": [0, 2, 0], \\\"nx\\\": [3, 4, 0], \\\"ny\\\": [10, 1, 0], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 7, 3, 6, 6], \\\"py\\\": [15, 14, 7, 16, 19], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [0, 0, 0, 0, 0], \\\"ny\\\": [18, 19, 16, 17, 17], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 16], \\\"py\\\": [6, 12], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 15], \\\"ny\\\": [4, 10], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 0, 0, 0], \\\"py\\\": [1, 3, 2, 0, 4], \\\"pz\\\": [2, 2, 2, 2, 1], \\\"nx\\\": [13, 8, 14, 4, 7], \\\"ny\\\": [23, 6, 23, 3, 9], \\\"nz\\\": [0, 1, 0, 2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [3, 5], \\\"pz\\\": [2, 1], \\\"nx\\\": [10, 8], \\\"ny\\\": [11, 6], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 10], \\\"py\\\": [4, 4], \\\"pz\\\": [0, 0], \\\"nx\\\": [8, 5], \\\"ny\\\": [4, 9], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [15, 18, 9, 16, 4], \\\"py\\\": [12, 13, 6, 23, 3], \\\"pz\\\": [0, 0, 1, 0, 2], \\\"nx\\\": [6, 3, 6, 2, 7], \\\"ny\\\": [2, 3, 0, 1, 0], \\\"nz\\\": [0, 0, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 18], \\\"py\\\": [12, 13], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 8], \\\"ny\\\": [3, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 2], \\\"py\\\": [10, 4], \\\"pz\\\": [1, 2], \\\"nx\\\": [3, 3], \\\"ny\\\": [5, 0], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 19], \\\"py\\\": [7, 8], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 3], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 0], \\\"py\\\": [6, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [7, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [8, 8], \\\"py\\\": [0, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [17, 18], \\\"ny\\\": [0, 2], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [13, 4, 4, 1], \\\"py\\\": [14, 7, 3, 5], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [3, 16, 3, 7], \\\"ny\\\": [1, 15, 5, 13], \\\"nz\\\": [2, 0, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 9], \\\"py\\\": [6, 11], \\\"pz\\\": [1, 0], \\\"nx\\\": [3, 23], \\\"ny\\\": [4, 8], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 17, 4, 16, 16], \\\"py\\\": [2, 3, 1, 3, 3], \\\"pz\\\": [1, 0, 2, 0, -1], \\\"nx\\\": [2, 3, 3, 2, 3], \\\"ny\\\": [1, 7, 2, 3, 3], \\\"nz\\\": [2, 1, 1, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 5], \\\"py\\\": [22, 9], \\\"pz\\\": [0, 1], \\\"nx\\\": [10, 3], \\\"ny\\\": [21, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [6, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 5], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 5], \\\"py\\\": [8, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [14, 5], \\\"ny\\\": [14, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [7, 8], \\\"py\\\": [3, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 2], \\\"ny\\\": [18, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [1, 1], \\\"py\\\": [19, 11], \\\"pz\\\": [0, 1], \\\"nx\\\": [9, 4], \\\"ny\\\": [5, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [3, 3], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [7, 15, 13, 14, 4], \\\"py\\\": [6, 12, 9, 11, 4], \\\"pz\\\": [1, 0, 0, 0, 2], \\\"nx\\\": [7, 3, 8, 4, 5], \\\"ny\\\": [0, 3, 0, 2, 1], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [10, 13, 7, 8, 9], \\\"py\\\": [0, 1, 1, 0, 1], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [7, 4, 4, 4, 8], \\\"ny\\\": [8, 3, 4, 2, 4], \\\"nz\\\": [1, 2, 2, 2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 1], \\\"py\\\": [6, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [11, 7], \\\"ny\\\": [3, 2], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 0], \\\"py\\\": [13, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 1], \\\"ny\\\": [13, 16], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 17], \\\"py\\\": [6, 13], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 1], \\\"ny\\\": [4, 16], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 11, 3, 6, 17], \\\"py\\\": [4, 4, 1, 2, 14], \\\"pz\\\": [0, 0, 2, 1, 0], \\\"nx\\\": [6, 23, 23, 6, 23], \\\"ny\\\": [5, 7, 6, 6, 14], \\\"nz\\\": [1, 0, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 22], \\\"py\\\": [4, 17], \\\"pz\\\": [2, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [5, 7], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 14], \\\"py\\\": [1, 1], \\\"pz\\\": [0, 0], \\\"nx\\\": [4, 7], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 17], \\\"py\\\": [12, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [14, 10], \\\"ny\\\": [11, 4], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [10, 2, 9, 15], \\\"py\\\": [5, 11, 1, 13], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [11, 3, 3, 13], \\\"ny\\\": [1, 1, 0, 1], \\\"nz\\\": [0, 2, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [7, 21], \\\"py\\\": [15, 22], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 9], \\\"ny\\\": [8, 14], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 5], \\\"py\\\": [21, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 5], \\\"ny\\\": [11, 21], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [17, 7], \\\"py\\\": [2, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [5, 11], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 8], \\\"py\\\": [10, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [13, 12], \\\"ny\\\": [3, 3], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 5], \\\"py\\\": [2, 2], \\\"pz\\\": [1, 1], \\\"nx\\\": [7, 1], \\\"ny\\\": [8, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 1, 0, 0], \\\"py\\\": [12, 4, 14, 0, 2], \\\"pz\\\": [0, 1, 0, 2, 2], \\\"nx\\\": [9, 5, 8, 4, 4], \\\"ny\\\": [6, 3, 6, 3, 3], \\\"nz\\\": [0, 1, 0, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 0, 0, 3, 2], \\\"py\\\": [6, 5, 0, 8, 2], \\\"pz\\\": [1, -1, -1, -1, -1], \\\"nx\\\": [23, 7, 22, 11, 4], \\\"ny\\\": [12, 6, 14, 4, 3], \\\"nz\\\": [0, 1, 0, 1, 2] }, { \\\"size\\\": 4, \\\"px\\\": [12, 12, 4, 8], \\\"py\\\": [12, 11, 3, 10], \\\"pz\\\": [0, 0, -1, -1], \\\"nx\\\": [0, 0, 0, 0], \\\"ny\\\": [2, 1, 0, 3], \\\"nz\\\": [1, 2, 2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 6], \\\"py\\\": [7, 6], \\\"pz\\\": [1, -1], \\\"nx\\\": [16, 4], \\\"ny\\\": [12, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 5, \\\"px\\\": [2, 1, 3, 3, 3], \\\"py\\\": [14, 8, 20, 21, 21], \\\"pz\\\": [0, 1, 0, 0, -1], \\\"nx\\\": [20, 10, 21, 21, 21], \\\"ny\\\": [23, 11, 21, 23, 20], \\\"nz\\\": [0, 1, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 13], \\\"py\\\": [2, 4], \\\"pz\\\": [1, 0], \\\"nx\\\": [7, 21], \\\"ny\\\": [8, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 3], \\\"py\\\": [17, 4], \\\"pz\\\": [0, 2], \\\"nx\\\": [11, 10], \\\"ny\\\": [15, 7], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 0, 19, 2], \\\"py\\\": [15, 2, 23, 10], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [6, 8, 16, 2], \\\"ny\\\": [13, 11, 10, 2], \\\"nz\\\": [0, 0, 0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [14, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [3, 1], \\\"ny\\\": [4, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [12, 17, 5, 10], \\\"py\\\": [19, 15, 14, 3], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [4, 12, 6, 12], \\\"ny\\\": [4, 18, 9, 22], \\\"nz\\\": [1, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 3], \\\"py\\\": [13, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [4, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 5, 4, 5, 3], \\\"py\\\": [2, 1, 2, 2, 0], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [7, 4, 9, 18, 18], \\\"ny\\\": [4, 4, 7, 14, 14], \\\"nz\\\": [1, 1, 1, 0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [8, 3, 20, 1], \\\"py\\\": [6, 3, 18, 0], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [13, 11, 5, 22], \\\"ny\\\": [12, 6, 2, 17], \\\"nz\\\": [0, 1, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [8, 5], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [21, 7], \\\"py\\\": [14, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [16, 11], \\\"ny\\\": [14, 6], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 4], \\\"py\\\": [3, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 5], \\\"ny\\\": [0, 0], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 10], \\\"py\\\": [5, 8], \\\"pz\\\": [2, 1], \\\"nx\\\": [5, 14], \\\"ny\\\": [9, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 2], \\\"py\\\": [23, 4], \\\"pz\\\": [0, 2], \\\"nx\\\": [2, 2], \\\"ny\\\": [5, 5], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 9, 11, 10, 10], \\\"py\\\": [2, 2, 1, 1, 1], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [2, 3, 2, 4, 5], \\\"ny\\\": [4, 10, 2, 4, 3], \\\"nz\\\": [2, 1, 1, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 4], \\\"py\\\": [13, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 1], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [17, 5], \\\"py\\\": [15, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [20, 19], \\\"ny\\\": [14, 14], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [20, 18], \\\"pz\\\": [0, 0], \\\"nx\\\": [2, 1], \\\"ny\\\": [23, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 1], \\\"py\\\": [18, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [11, 3], \\\"ny\\\": [16, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 8], \\\"py\\\": [6, 10], \\\"pz\\\": [1, 0], \\\"nx\\\": [9, 0], \\\"ny\\\": [9, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [20, 10], \\\"py\\\": [21, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [7, 2], \\\"ny\\\": [3, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 6], \\\"py\\\": [4, 7], \\\"pz\\\": [1, -1], \\\"nx\\\": [23, 5], \\\"ny\\\": [9, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 5, \\\"px\\\": [2, 4, 5, 3, 4], \\\"py\\\": [0, 1, 1, 2, 2], \\\"pz\\\": [1, 0, 0, 0, 0], \\\"nx\\\": [1, 0, 1, 1, 1], \\\"ny\\\": [2, 1, 0, 1, 1], \\\"nz\\\": [0, 1, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 16], \\\"py\\\": [7, 13], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 3], \\\"ny\\\": [4, 16], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 15], \\\"py\\\": [7, 19], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 3], \\\"py\\\": [11, 5], \\\"pz\\\": [1, 2], \\\"nx\\\": [7, 8], \\\"ny\\\": [9, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [23, 11], \\\"py\\\": [9, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [22, 22], \\\"ny\\\": [23, 23], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [23, 23], \\\"py\\\": [21, 20], \\\"pz\\\": [0, 0], \\\"nx\\\": [2, 2], \\\"ny\\\": [5, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 4], \\\"py\\\": [12, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 8], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 14], \\\"py\\\": [2, 4], \\\"pz\\\": [1, 0], \\\"nx\\\": [7, 18], \\\"ny\\\": [1, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [20, 22], \\\"py\\\": [1, 2], \\\"pz\\\": [0, 0], \\\"nx\\\": [23, 23], \\\"ny\\\": [1, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 1], \\\"py\\\": [9, 10], \\\"pz\\\": [1, 1], \\\"nx\\\": [8, 0], \\\"ny\\\": [15, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [11, 11, 6], \\\"py\\\": [10, 11, 11], \\\"pz\\\": [0, 0, -1], \\\"nx\\\": [23, 23, 23], \\\"ny\\\": [19, 21, 20], \\\"nz\\\": [0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [23, 23, 23, 6, 6], \\\"py\\\": [21, 22, 22, 3, 6], \\\"pz\\\": [0, 0, -1, -1, -1], \\\"nx\\\": [8, 8, 8, 17, 4], \\\"ny\\\": [7, 10, 8, 16, 5], \\\"nz\\\": [1, 1, 1, 0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [10, 23], \\\"py\\\": [1, 22], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 2], \\\"ny\\\": [11, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [7, 14], \\\"py\\\": [3, 10], \\\"pz\\\": [1, -1], \\\"nx\\\": [5, 3], \\\"ny\\\": [2, 1], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 3], \\\"py\\\": [13, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [4, 10], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 0], \\\"py\\\": [15, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 6], \\\"ny\\\": [1, 2], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 4], \\\"py\\\": [18, 17], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 6], \\\"ny\\\": [10, 7], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 11], \\\"py\\\": [3, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 4], \\\"py\\\": [5, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [17, 10], \\\"ny\\\": [4, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [16, 8, 16, 15, 15], \\\"py\\\": [0, 0, 1, 0, 1], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [7, 4, 7, 4, 4], \\\"ny\\\": [7, 5, 8, 1, 1], \\\"nz\\\": [1, 2, 1, 2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 11], \\\"py\\\": [5, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 5], \\\"ny\\\": [2, 2], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 16], \\\"py\\\": [8, 10], \\\"pz\\\": [0, 0], \\\"nx\\\": [7, 2], \\\"ny\\\": [3, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 8], \\\"py\\\": [4, 11], \\\"pz\\\": [1, 0], \\\"nx\\\": [10, 1], \\\"ny\\\": [9, 20], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 1], \\\"py\\\": [4, 2], \\\"pz\\\": [2, -1], \\\"nx\\\": [23, 23], \\\"ny\\\": [15, 16], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [9, 8, 2, 4, 9], \\\"py\\\": [1, 1, 0, 1, 2], \\\"pz\\\": [0, 0, 2, 1, 0], \\\"nx\\\": [8, 3, 8, 4, 4], \\\"ny\\\": [6, 2, 4, 2, 2], \\\"nz\\\": [1, 2, 1, 2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 6], \\\"py\\\": [10, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [13, 7], \\\"ny\\\": [6, 3], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 5], \\\"py\\\": [10, 5], \\\"pz\\\": [1, 2], \\\"nx\\\": [10, 8], \\\"ny\\\": [10, 9], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 4], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [9, 14], \\\"ny\\\": [4, 9], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [5, 2, 15], \\\"py\\\": [3, 1, 22], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [15, 9, 4], \\\"ny\\\": [0, 1, 0], \\\"nz\\\": [0, 1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [10, 19], \\\"py\\\": [9, 21], \\\"pz\\\": [1, 0], \\\"nx\\\": [2, 17], \\\"ny\\\": [5, 14], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 3, \\\"px\\\": [16, 2, 1], \\\"py\\\": [2, 10, 4], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [4, 4, 9], \\\"ny\\\": [3, 2, 6], \\\"nz\\\": [2, 2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 2], \\\"py\\\": [6, 10], \\\"pz\\\": [1, -1], \\\"nx\\\": [21, 22], \\\"ny\\\": [16, 12], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [7, 16], \\\"py\\\": [4, 23], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 3], \\\"ny\\\": [3, 3], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 1], \\\"py\\\": [13, 14], \\\"pz\\\": [0, 0], \\\"nx\\\": [1, 2], \\\"ny\\\": [18, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 5], \\\"py\\\": [13, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 13], \\\"ny\\\": [2, 11], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [18, 17], \\\"py\\\": [3, 3], \\\"pz\\\": [0, 0], \\\"nx\\\": [19, 19], \\\"ny\\\": [1, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 5], \\\"py\\\": [0, 5], \\\"pz\\\": [1, -1], \\\"nx\\\": [12, 3], \\\"ny\\\": [5, 1], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [5, 3], \\\"py\\\": [2, 1], \\\"pz\\\": [1, 2], \\\"nx\\\": [18, 4], \\\"ny\\\": [4, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [13, 13, 2, 10, 15], \\\"py\\\": [11, 12, 13, 17, 23], \\\"pz\\\": [0, -1, -1, -1, -1], \\\"nx\\\": [12, 13, 4, 3, 8], \\\"ny\\\": [4, 4, 1, 0, 3], \\\"nz\\\": [0, 0, 2, 2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 3], \\\"py\\\": [2, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 2], \\\"ny\\\": [7, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [13, 4], \\\"py\\\": [5, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [18, 4], \\\"ny\\\": [12, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [19, 4], \\\"py\\\": [11, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 7], \\\"ny\\\": [2, 2], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 2], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [3, 2], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 0], \\\"py\\\": [7, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 9], \\\"ny\\\": [0, 2], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 9], \\\"py\\\": [0, 2], \\\"pz\\\": [2, 1], \\\"nx\\\": [6, 4], \\\"ny\\\": [3, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 2], \\\"py\\\": [9, 4], \\\"pz\\\": [1, 2], \\\"nx\\\": [13, 5], \\\"ny\\\": [18, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [5, 23, 23], \\\"py\\\": [2, 8, 7], \\\"pz\\\": [2, 0, 0], \\\"nx\\\": [10, 12, 1], \\\"ny\\\": [4, 1, 0], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 0], \\\"py\\\": [3, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 4], \\\"ny\\\": [2, 3], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [6, 5], \\\"py\\\": [10, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [4, 11], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 2], \\\"py\\\": [14, 11], \\\"pz\\\": [0, -1], \\\"nx\\\": [10, 11], \\\"ny\\\": [4, 13], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 6], \\\"py\\\": [21, 23], \\\"pz\\\": [0, 0], \\\"nx\\\": [7, 0], \\\"ny\\\": [21, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 4], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [8, 5], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 6], \\\"py\\\": [8, 8], \\\"pz\\\": [0, 0], \\\"nx\\\": [6, 14], \\\"ny\\\": [9, 15], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 6], \\\"py\\\": [4, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [16, 8], \\\"ny\\\": [0, 1], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [3, 6, 0, 9], \\\"py\\\": [0, 8, 5, 23], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [12, 2, 6, 10], \\\"ny\\\": [5, 0, 3, 5], \\\"nz\\\": [0, 2, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [7, 13], \\\"pz\\\": [1, 0], \\\"nx\\\": [3, 9], \\\"ny\\\": [4, 9], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 5], \\\"py\\\": [8, 23], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 9], \\\"ny\\\": [15, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 18], \\\"py\\\": [8, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 1], \\\"ny\\\": [9, 8], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 7], \\\"py\\\": [4, 21], \\\"pz\\\": [2, 0], \\\"nx\\\": [13, 11], \\\"ny\\\": [8, 9], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 4], \\\"py\\\": [8, 8], \\\"pz\\\": [0, 0], \\\"nx\\\": [6, 1], \\\"ny\\\": [8, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 3], \\\"py\\\": [20, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 3], \\\"ny\\\": [10, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 9], \\\"py\\\": [8, 7], \\\"pz\\\": [1, -1], \\\"nx\\\": [1, 2], \\\"ny\\\": [4, 9], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 10], \\\"py\\\": [5, 13], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 6], \\\"ny\\\": [1, 2], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 5], \\\"py\\\": [6, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 10], \\\"py\\\": [4, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [5, 11], \\\"ny\\\": [2, 5], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 23, 11, 23, 11], \\\"py\\\": [4, 9, 5, 10, 6], \\\"pz\\\": [1, 0, 1, 0, 1], \\\"nx\\\": [7, 14, 13, 7, 3], \\\"ny\\\": [9, 5, 6, 4, 4], \\\"nz\\\": [0, 0, 0, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 5], \\\"py\\\": [0, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [9, 20], \\\"ny\\\": [1, 4], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [19, 20], \\\"py\\\": [0, 3], \\\"pz\\\": [0, 0], \\\"nx\\\": [4, 6], \\\"ny\\\": [11, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [13, 5, 20, 5], \\\"py\\\": [14, 3, 23, 4], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [8, 15, 7, 16], \\\"ny\\\": [8, 14, 6, 15], \\\"nz\\\": [1, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 20], \\\"py\\\": [5, 17], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 3], \\\"ny\\\": [10, 1], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 3, \\\"px\\\": [1, 12, 7], \\\"py\\\": [3, 7, 10], \\\"pz\\\": [2, 0, 0], \\\"nx\\\": [2, 2, 3], \\\"ny\\\": [3, 2, 2], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [10, 5, 7], \\\"py\\\": [7, 10, 10], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [10, 10, 18], \\\"ny\\\": [10, 9, 23], \\\"nz\\\": [1, 1, 0] }, { \\\"size\\\": 3, \\\"px\\\": [14, 14, 4], \\\"py\\\": [3, 3, 4], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [4, 4, 8], \\\"ny\\\": [3, 2, 6], \\\"nz\\\": [2, 2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 12], \\\"py\\\": [4, 17], \\\"pz\\\": [2, 0], \\\"nx\\\": [13, 1], \\\"ny\\\": [15, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 20], \\\"py\\\": [9, 22], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 4], \\\"ny\\\": [2, 0], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 2], \\\"py\\\": [3, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 4], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 3, \\\"px\\\": [15, 10, 1], \\\"py\\\": [12, 2, 3], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [7, 5, 10], \\\"ny\\\": [2, 1, 1], \\\"nz\\\": [0, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [9, 11, 10, 12, 12], \\\"py\\\": [0, 0, 0, 0, 0], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [8, 4, 16, 5, 10], \\\"ny\\\": [4, 4, 10, 3, 6], \\\"nz\\\": [1, 1, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [0, 10], \\\"py\\\": [3, 5], \\\"pz\\\": [2, -1], \\\"nx\\\": [3, 6], \\\"ny\\\": [0, 1], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [7, 8, 7, 2, 12], \\\"py\\\": [14, 13, 13, 16, 0], \\\"pz\\\": [0, 0, -1, -1, -1], \\\"nx\\\": [10, 1, 10, 1, 1], \\\"ny\\\": [13, 2, 12, 4, 9], \\\"nz\\\": [0, 2, 0, 1, 0] }, { \\\"size\\\": 3, \\\"px\\\": [6, 14, 13], \\\"py\\\": [1, 2, 1], \\\"pz\\\": [1, 0, 0], \\\"nx\\\": [8, 21, 10], \\\"ny\\\": [4, 23, 12], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [19, 19], \\\"py\\\": [22, 21], \\\"pz\\\": [0, 0], \\\"nx\\\": [20, 1], \\\"ny\\\": [22, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 12], \\\"py\\\": [19, 22], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 3], \\\"ny\\\": [0, 1], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 9, 21, 4], \\\"py\\\": [13, 3, 19, 5], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [9, 9, 9, 5], \\\"ny\\\": [13, 14, 12, 6], \\\"nz\\\": [0, 0, 0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 12, 13, 14], \\\"py\\\": [22, 22, 22, 22], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [13, 2, 4, 5], \\\"ny\\\": [20, 0, 0, 6], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 2], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [3, 1], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [0, 1], \\\"pz\\\": [2, 2], \\\"nx\\\": [9, 4], \\\"ny\\\": [6, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 0], \\\"py\\\": [10, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 4], \\\"ny\\\": [3, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [10, 4], \\\"py\\\": [3, 1], \\\"pz\\\": [1, 2], \\\"nx\\\": [12, 18], \\\"ny\\\": [17, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [2, 3, 4], \\\"py\\\": [4, 3, 9], \\\"pz\\\": [2, 2, 1], \\\"nx\\\": [0, 3, 17], \\\"ny\\\": [0, 1, 18], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 3], \\\"py\\\": [12, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [5, 1], \\\"ny\\\": [11, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 17], \\\"py\\\": [20, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 2], \\\"ny\\\": [9, 5], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [8, 11], \\\"py\\\": [18, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 4], \\\"ny\\\": [9, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 15], \\\"py\\\": [2, 2], \\\"pz\\\": [0, 0], \\\"nx\\\": [17, 12], \\\"ny\\\": [2, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 4], \\\"py\\\": [5, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 5], \\\"ny\\\": [23, 19], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 13], \\\"py\\\": [23, 23], \\\"pz\\\": [0, 0], \\\"nx\\\": [7, 11], \\\"ny\\\": [10, 20], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 10], \\\"py\\\": [3, 18], \\\"pz\\\": [2, -1], \\\"nx\\\": [9, 9], \\\"ny\\\": [5, 6], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 10], \\\"py\\\": [2, 4], \\\"pz\\\": [1, 0], \\\"nx\\\": [4, 23], \\\"ny\\\": [4, 20], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 3], \\\"py\\\": [8, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [15, 12], \\\"ny\\\": [2, 1], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 7], \\\"py\\\": [3, 10], \\\"pz\\\": [2, 1], \\\"nx\\\": [10, 1], \\\"ny\\\": [20, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [10, 11], \\\"pz\\\": [0, 0], \\\"nx\\\": [22, 3], \\\"ny\\\": [5, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 17, 17, 9, 18], \\\"py\\\": [0, 1, 0, 1, 0], \\\"pz\\\": [1, 0, 0, 1, 0], \\\"nx\\\": [11, 8, 9, 4, 4], \\\"ny\\\": [23, 4, 6, 2, 2], \\\"nz\\\": [0, 1, 0, 2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 5], \\\"py\\\": [4, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [13, 4], \\\"ny\\\": [9, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 5, \\\"px\\\": [9, 4, 8, 7, 7], \\\"py\\\": [3, 1, 3, 3, 3], \\\"pz\\\": [0, 1, 0, 0, -1], \\\"nx\\\": [4, 2, 5, 3, 2], \\\"ny\\\": [1, 15, 1, 4, 13], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [17, 7], \\\"py\\\": [13, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 2], \\\"py\\\": [1, 12], \\\"pz\\\": [2, 0], \\\"nx\\\": [9, 21], \\\"ny\\\": [5, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 0], \\\"py\\\": [14, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 1], \\\"ny\\\": [19, 10], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 1], \\\"py\\\": [5, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [16, 15], \\\"ny\\\": [3, 3], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 8], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 6], \\\"py\\\": [17, 15], \\\"pz\\\": [0, 0], \\\"nx\\\": [11, 0], \\\"ny\\\": [16, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [12, 11, 0, 3], \\\"py\\\": [16, 8, 7, 1], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [10, 5, 10, 5], \\\"ny\\\": [11, 9, 10, 8], \\\"nz\\\": [0, 1, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [7, 13], \\\"pz\\\": [1, 0], \\\"nx\\\": [4, 14], \\\"ny\\\": [4, 16], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 17], \\\"py\\\": [6, 13], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [4, 9], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 11], \\\"py\\\": [3, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 15], \\\"ny\\\": [1, 2], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 11], \\\"py\\\": [18, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 5], \\\"ny\\\": [8, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 4], \\\"py\\\": [7, 4], \\\"pz\\\": [1, 2], \\\"nx\\\": [4, 3], \\\"ny\\\": [5, 7], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 4], \\\"py\\\": [15, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 8], \\\"ny\\\": [14, 19], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [18, 13], \\\"py\\\": [13, 20], \\\"pz\\\": [0, 0], \\\"nx\\\": [13, 4], \\\"ny\\\": [18, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 4], \\\"py\\\": [6, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [21, 5, 11, 5, 10], \\\"py\\\": [1, 1, 3, 0, 0], \\\"pz\\\": [0, 2, 1, 2, 1], \\\"nx\\\": [7, 14, 15, 4, 8], \\\"ny\\\": [3, 6, 11, 3, 4], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 6], \\\"py\\\": [15, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [21, 22], \\\"ny\\\": [14, 12], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [18, 0], \\\"py\\\": [20, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 3], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 6, 13, 11, 7], \\\"py\\\": [1, 1, 1, 2, 1], \\\"pz\\\": [0, 1, 0, 0, 1], \\\"nx\\\": [7, 6, 8, 5, 5], \\\"ny\\\": [4, 15, 4, 16, 16], \\\"nz\\\": [1, 0, 1, 0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [22, 21, 21], \\\"py\\\": [14, 15, 17], \\\"pz\\\": [0, 0, 0], \\\"nx\\\": [5, 9, 4], \\\"ny\\\": [0, 5, 0], \\\"nz\\\": [2, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 2], \\\"py\\\": [14, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [23, 11], \\\"ny\\\": [16, 8], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [21, 21, 0, 18], \\\"py\\\": [14, 15, 5, 4], \\\"pz\\\": [0, 0, -1, -1], \\\"nx\\\": [8, 8, 9, 4], \\\"ny\\\": [7, 8, 10, 5], \\\"nz\\\": [1, 1, 1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [15, 5], \\\"py\\\": [18, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [23, 23], \\\"ny\\\": [16, 18], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [15, 14], \\\"py\\\": [1, 1], \\\"pz\\\": [0, 0], \\\"nx\\\": [4, 4], \\\"ny\\\": [2, 3], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 6], \\\"py\\\": [6, 5], \\\"pz\\\": [1, -1], \\\"nx\\\": [14, 11], \\\"ny\\\": [1, 1], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 17], \\\"py\\\": [2, 8], \\\"pz\\\": [2, 0], \\\"nx\\\": [8, 3], \\\"ny\\\": [4, 9], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 8], \\\"py\\\": [13, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [8, 3], \\\"pz\\\": [0, 1], \\\"nx\\\": [1, 11], \\\"ny\\\": [4, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 8], \\\"py\\\": [5, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [3, 1], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [5, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [1, 18], \\\"ny\\\": [5, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 3], \\\"py\\\": [6, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [7, 12], \\\"ny\\\": [5, 20], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 1], \\\"py\\\": [0, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 2], \\\"ny\\\": [9, 3], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [10, 11], \\\"pz\\\": [0, 0], \\\"nx\\\": [0, 5], \\\"ny\\\": [5, 9], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 1], \\\"py\\\": [23, 4], \\\"pz\\\": [0, 2], \\\"nx\\\": [0, 0], \\\"ny\\\": [13, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 1], \\\"py\\\": [6, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 4], \\\"ny\\\": [4, 5], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [7, 6], \\\"py\\\": [6, 5], \\\"pz\\\": [1, 1], \\\"nx\\\": [3, 9], \\\"ny\\\": [4, 16], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 3], \\\"py\\\": [9, 13], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 10], \\\"ny\\\": [3, 7], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [13, 9, 6, 10, 10], \\\"py\\\": [2, 2, 1, 2, 2], \\\"pz\\\": [0, 0, 1, 0, -1], \\\"nx\\\": [7, 5, 6, 5, 6], \\\"ny\\\": [0, 2, 2, 1, 1], \\\"nz\\\": [0, 0, 0, 0, 0] }], \\\"alpha\\\": [-1.119615e+00, 1.119615e+00, -8.169953e-01, 8.169953e-01, -5.291213e-01, 5.291213e-01, -4.904488e-01, 4.904488e-01, -4.930982e-01, 4.930982e-01, -4.106179e-01, 4.106179e-01, -4.246842e-01, 4.246842e-01, -3.802383e-01, 3.802383e-01, -3.364358e-01, 3.364358e-01, -3.214186e-01, 3.214186e-01, -3.210798e-01, 3.210798e-01, -2.993167e-01, 2.993167e-01, -3.426336e-01, 3.426336e-01, -3.199184e-01, 3.199184e-01, -3.061071e-01, 3.061071e-01, -2.758972e-01, 2.758972e-01, -3.075590e-01, 3.075590e-01, -3.009565e-01, 3.009565e-01, -2.015739e-01, 2.015739e-01, -2.603266e-01, 2.603266e-01, -2.772993e-01, 2.772993e-01, -2.184913e-01, 2.184913e-01, -2.306681e-01, 2.306681e-01, -1.983223e-01, 1.983223e-01, -2.194760e-01, 2.194760e-01, -2.528421e-01, 2.528421e-01, -2.436416e-01, 2.436416e-01, -3.032886e-01, 3.032886e-01, -2.556071e-01, 2.556071e-01, -2.562170e-01, 2.562170e-01, -1.930298e-01, 1.930298e-01, -2.735898e-01, 2.735898e-01, -1.814703e-01, 1.814703e-01, -2.054824e-01, 2.054824e-01, -1.986146e-01, 1.986146e-01, -1.769226e-01, 1.769226e-01, -1.775257e-01, 1.775257e-01, -2.167927e-01, 2.167927e-01, -1.823633e-01, 1.823633e-01, -1.584280e-01, 1.584280e-01, -1.778321e-01, 1.778321e-01, -1.826777e-01, 1.826777e-01, -1.979903e-01, 1.979903e-01, -1.898326e-01, 1.898326e-01, -1.835506e-01, 1.835506e-01, -1.967860e-01, 1.967860e-01, -1.871528e-01, 1.871528e-01, -1.772414e-01, 1.772414e-01, -1.985514e-01, 1.985514e-01, -2.144078e-01, 2.144078e-01, -2.742303e-01, 2.742303e-01, -2.240550e-01, 2.240550e-01, -2.132534e-01, 2.132534e-01, -1.552127e-01, 1.552127e-01, -1.568276e-01, 1.568276e-01, -1.630086e-01, 1.630086e-01, -1.458232e-01, 1.458232e-01, -1.559541e-01, 1.559541e-01, -1.720131e-01, 1.720131e-01, -1.708434e-01, 1.708434e-01, -1.624431e-01, 1.624431e-01, -1.814161e-01, 1.814161e-01, -1.552639e-01, 1.552639e-01, -1.242354e-01, 1.242354e-01, -1.552139e-01, 1.552139e-01, -1.694359e-01, 1.694359e-01, -1.801481e-01, 1.801481e-01, -1.387182e-01, 1.387182e-01, -1.409679e-01, 1.409679e-01, -1.486724e-01, 1.486724e-01, -1.779553e-01, 1.779553e-01, -1.524595e-01, 1.524595e-01, -1.788086e-01, 1.788086e-01, -1.671479e-01, 1.671479e-01, -1.376197e-01, 1.376197e-01, -1.511808e-01, 1.511808e-01, -1.524632e-01, 1.524632e-01, -1.198986e-01, 1.198986e-01, -1.382641e-01, 1.382641e-01, -1.148901e-01, 1.148901e-01, -1.131803e-01, 1.131803e-01, -1.273508e-01, 1.273508e-01, -1.405125e-01, 1.405125e-01, -1.322132e-01, 1.322132e-01, -1.386966e-01, 1.386966e-01, -1.275621e-01, 1.275621e-01, -1.180573e-01, 1.180573e-01, -1.238803e-01, 1.238803e-01, -1.428389e-01, 1.428389e-01, -1.694437e-01, 1.694437e-01, -1.290855e-01, 1.290855e-01, -1.520260e-01, 1.520260e-01, -1.398282e-01, 1.398282e-01, -1.890736e-01, 1.890736e-01, -2.280428e-01, 2.280428e-01, -1.325099e-01, 1.325099e-01, -1.342873e-01, 1.342873e-01, -1.463841e-01, 1.463841e-01, -1.983567e-01, 1.983567e-01, -1.585711e-01, 1.585711e-01, -1.260154e-01, 1.260154e-01, -1.426774e-01, 1.426774e-01, -1.554278e-01, 1.554278e-01, -1.361201e-01, 1.361201e-01, -1.181856e-01, 1.181856e-01, -1.255941e-01, 1.255941e-01, -1.113275e-01, 1.113275e-01, -1.506576e-01, 1.506576e-01, -1.202859e-01, 1.202859e-01, -2.159751e-01, 2.159751e-01, -1.443150e-01, 1.443150e-01, -1.379194e-01, 1.379194e-01, -1.805758e-01, 1.805758e-01, -1.465612e-01, 1.465612e-01, -1.328856e-01, 1.328856e-01, -1.532173e-01, 1.532173e-01, -1.590635e-01, 1.590635e-01, -1.462229e-01, 1.462229e-01, -1.350012e-01, 1.350012e-01, -1.195634e-01, 1.195634e-01, -1.173221e-01, 1.173221e-01, -1.192867e-01, 1.192867e-01, -1.595013e-01, 1.595013e-01, -1.209751e-01, 1.209751e-01, -1.571290e-01, 1.571290e-01, -1.527274e-01, 1.527274e-01, -1.373708e-01, 1.373708e-01, -1.318313e-01, 1.318313e-01, -1.273391e-01, 1.273391e-01, -1.271365e-01, 1.271365e-01, -1.528693e-01, 1.528693e-01, -1.590476e-01, 1.590476e-01, -1.581911e-01, 1.581911e-01, -1.183023e-01, 1.183023e-01, -1.559822e-01, 1.559822e-01, -1.214999e-01, 1.214999e-01, -1.283378e-01, 1.283378e-01, -1.542583e-01, 1.542583e-01, -1.336377e-01, 1.336377e-01, -1.800416e-01, 1.800416e-01, -1.710931e-01, 1.710931e-01, -1.621737e-01, 1.621737e-01, -1.239002e-01, 1.239002e-01, -1.432928e-01, 1.432928e-01, -1.392447e-01, 1.392447e-01, -1.383938e-01, 1.383938e-01, -1.357633e-01, 1.357633e-01, -1.175842e-01, 1.175842e-01, -1.085318e-01, 1.085318e-01, -1.148885e-01, 1.148885e-01, -1.320396e-01, 1.320396e-01, -1.351204e-01, 1.351204e-01, -1.581518e-01, 1.581518e-01, -1.459574e-01, 1.459574e-01, -1.180068e-01, 1.180068e-01, -1.464196e-01, 1.464196e-01, -1.179543e-01, 1.179543e-01, -1.004204e-01, 1.004204e-01, -1.294660e-01, 1.294660e-01, -1.534244e-01, 1.534244e-01, -1.378970e-01, 1.378970e-01, -1.226545e-01, 1.226545e-01, -1.281182e-01, 1.281182e-01, -1.201471e-01, 1.201471e-01, -1.448701e-01, 1.448701e-01, -1.290980e-01, 1.290980e-01, -1.388764e-01, 1.388764e-01, -9.605773e-02, 9.605773e-02, -1.411021e-01, 1.411021e-01, -1.295693e-01, 1.295693e-01, -1.371739e-01, 1.371739e-01, -1.167579e-01, 1.167579e-01, -1.400486e-01, 1.400486e-01, -1.214224e-01, 1.214224e-01, -1.287835e-01, 1.287835e-01, -1.197646e-01, 1.197646e-01, -1.192358e-01, 1.192358e-01, -1.218651e-01, 1.218651e-01, -1.564816e-01, 1.564816e-01, -1.172391e-01, 1.172391e-01, -1.342268e-01, 1.342268e-01, -1.492471e-01, 1.492471e-01, -1.157299e-01, 1.157299e-01, -1.046703e-01, 1.046703e-01, -1.255571e-01, 1.255571e-01, -1.100135e-01, 1.100135e-01, -1.501592e-01, 1.501592e-01, -1.155712e-01, 1.155712e-01, -1.145563e-01, 1.145563e-01, -1.013425e-01, 1.013425e-01, -1.145783e-01, 1.145783e-01, -1.328031e-01, 1.328031e-01, -1.077413e-01, 1.077413e-01, -1.064996e-01, 1.064996e-01, -1.191170e-01, 1.191170e-01, -1.213217e-01, 1.213217e-01, -1.260969e-01, 1.260969e-01, -1.156494e-01, 1.156494e-01, -1.268126e-01, 1.268126e-01, -1.070999e-01, 1.070999e-01, -1.112365e-01, 1.112365e-01, -1.243916e-01, 1.243916e-01, -1.283152e-01, 1.283152e-01, -1.166925e-01, 1.166925e-01, -8.997633e-02, 8.997633e-02, -1.583840e-01, 1.583840e-01, -1.211178e-01, 1.211178e-01, -1.090830e-01, 1.090830e-01, -1.030818e-01, 1.030818e-01, -1.440600e-01, 1.440600e-01, -1.458713e-01, 1.458713e-01, -1.559082e-01, 1.559082e-01, -1.058868e-01, 1.058868e-01, -1.010130e-01, 1.010130e-01, -1.642301e-01, 1.642301e-01, -1.236850e-01, 1.236850e-01, -1.467589e-01, 1.467589e-01, -1.109359e-01, 1.109359e-01, -1.673655e-01, 1.673655e-01, -1.239984e-01, 1.239984e-01, -1.039509e-01, 1.039509e-01, -1.089378e-01, 1.089378e-01, -1.545085e-01, 1.545085e-01, -1.200862e-01, 1.200862e-01, -1.105608e-01, 1.105608e-01, -1.235262e-01, 1.235262e-01, -8.496153e-02, 8.496153e-02, -1.181372e-01, 1.181372e-01, -1.139467e-01, 1.139467e-01, -1.189317e-01, 1.189317e-01, -1.266519e-01, 1.266519e-01, -9.470736e-02, 9.470736e-02, -1.336735e-01, 1.336735e-01, -8.726601e-02, 8.726601e-02, -1.304782e-01, 1.304782e-01, -1.186529e-01, 1.186529e-01, -1.355944e-01, 1.355944e-01, -9.568801e-02, 9.568801e-02, -1.282618e-01, 1.282618e-01, -1.625632e-01, 1.625632e-01, -1.167652e-01, 1.167652e-01, -1.001301e-01, 1.001301e-01, -1.292419e-01, 1.292419e-01, -1.904213e-01, 1.904213e-01, -1.511542e-01, 1.511542e-01, -9.814394e-02, 9.814394e-02, -1.171564e-01, 1.171564e-01, -9.806486e-02, 9.806486e-02, -9.217615e-02, 9.217615e-02, -8.505645e-02, 8.505645e-02, -1.573637e-01, 1.573637e-01, -1.419174e-01, 1.419174e-01, -1.298601e-01, 1.298601e-01, -1.120613e-01, 1.120613e-01, -1.158363e-01, 1.158363e-01, -1.090957e-01, 1.090957e-01, -1.204516e-01, 1.204516e-01, -1.139852e-01, 1.139852e-01, -9.642479e-02, 9.642479e-02, -1.410872e-01, 1.410872e-01, -1.142779e-01, 1.142779e-01, -1.043991e-01, 1.043991e-01, -9.736463e-02, 9.736463e-02, -1.451046e-01, 1.451046e-01, -1.205668e-01, 1.205668e-01, -9.881445e-02, 9.881445e-02, -1.612822e-01, 1.612822e-01, -1.175681e-01, 1.175681e-01, -1.522528e-01, 1.522528e-01, -1.617520e-01, 1.617520e-01, -1.582938e-01, 1.582938e-01, -1.208202e-01, 1.208202e-01, -1.016003e-01, 1.016003e-01, -1.232059e-01, 1.232059e-01, -9.583025e-02, 9.583025e-02, -1.013990e-01, 1.013990e-01, -1.178752e-01, 1.178752e-01, -1.215972e-01, 1.215972e-01, -1.294932e-01, 1.294932e-01, -1.158270e-01, 1.158270e-01, -1.008645e-01, 1.008645e-01, -9.699190e-02, 9.699190e-02, -1.022144e-01, 1.022144e-01, -9.878768e-02, 9.878768e-02, -1.339052e-01, 1.339052e-01, -9.279961e-02, 9.279961e-02, -1.047606e-01, 1.047606e-01, -1.141163e-01, 1.141163e-01, -1.267600e-01, 1.267600e-01, -1.252763e-01, 1.252763e-01, -9.775003e-02, 9.775003e-02, -9.169116e-02, 9.169116e-02, -1.006496e-01, 1.006496e-01, -9.493293e-02, 9.493293e-02, -1.213694e-01, 1.213694e-01, -1.109243e-01, 1.109243e-01, -1.115973e-01, 1.115973e-01, -7.979327e-02, 7.979327e-02, -9.220953e-02, 9.220953e-02, -1.028913e-01, 1.028913e-01, -1.253510e-01, 1.253510e-01] }, { \\\"count\\\": 391, \\\"threshold\\\": -4.665692e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [14, 9, 11, 17, 12], \\\"py\\\": [2, 3, 9, 13, 3], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [21, 8, 7, 20, 13], \\\"ny\\\": [16, 10, 7, 7, 9], \\\"nz\\\": [0, 1, 1, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [12, 10, 6, 11, 13], \\\"py\\\": [9, 3, 13, 3, 4], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [10, 4, 5, 10, 2], \\\"ny\\\": [9, 10, 8, 8, 2], \\\"nz\\\": [0, 1, 1, 0, 2] }, { \\\"size\\\": 5, \\\"px\\\": [6, 9, 7, 8, 8], \\\"py\\\": [3, 3, 3, 3, 3], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [0, 0, 0, 4, 9], \\\"ny\\\": [4, 2, 3, 10, 8], \\\"nz\\\": [0, 0, 0, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [6, 2, 16, 6, 8], \\\"py\\\": [16, 2, 11, 4, 11], \\\"pz\\\": [0, 2, 0, 1, 0], \\\"nx\\\": [3, 8, 4, 1, 1], \\\"ny\\\": [4, 4, 4, 5, 13], \\\"nz\\\": [1, 1, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [16, 13, 9], \\\"py\\\": [23, 18, 10], \\\"pz\\\": [0, 0, 1], \\\"nx\\\": [14, 15, 8], \\\"ny\\\": [21, 22, 3], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 16, 19, 17, 17], \\\"py\\\": [1, 2, 3, 2, 2], \\\"pz\\\": [1, 0, 0, 0, -1], \\\"nx\\\": [23, 23, 23, 23, 23], \\\"ny\\\": [6, 2, 1, 3, 5], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 12, 12, 12], \\\"py\\\": [10, 11, 12, 13, 13], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [4, 8, 14, 4, 6], \\\"ny\\\": [2, 4, 7, 4, 8], \\\"nz\\\": [2, 1, 0, 1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [1, 2, 3, 6, 4], \\\"py\\\": [6, 10, 12, 23, 13], \\\"pz\\\": [1, 1, 0, 0, 0], \\\"nx\\\": [2, 0, 0, 1, 1], \\\"ny\\\": [23, 5, 10, 21, 21], \\\"nz\\\": [0, 2, 1, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 16, 12, 4, 12], \\\"py\\\": [6, 17, 7, 2, 8], \\\"pz\\\": [0, 0, 0, 2, 0], \\\"nx\\\": [8, 8, 12, 0, 6], \\\"ny\\\": [4, 4, 16, 0, 8], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 2], \\\"py\\\": [18, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 9], \\\"ny\\\": [10, 16], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [9, 9, 2, 0, 12], \\\"py\\\": [6, 6, 21, 4, 8], \\\"pz\\\": [1, -1, -1, -1, -1], \\\"nx\\\": [8, 4, 9, 7, 7], \\\"ny\\\": [10, 2, 4, 5, 8], \\\"nz\\\": [1, 2, 1, 1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 10, 10, 18, 19], \\\"py\\\": [10, 8, 7, 14, 14], \\\"pz\\\": [1, 1, 1, 0, 0], \\\"nx\\\": [21, 23, 22, 22, 11], \\\"ny\\\": [23, 19, 21, 22, 10], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 3, 15, 4, 19], \\\"py\\\": [14, 0, 5, 5, 14], \\\"pz\\\": [0, -1, -1, -1, -1], \\\"nx\\\": [12, 17, 15, 3, 8], \\\"ny\\\": [18, 18, 14, 2, 10], \\\"nz\\\": [0, 0, 0, 2, 0] }, { \\\"size\\\": 5, \\\"px\\\": [8, 11, 3, 11, 4], \\\"py\\\": [23, 7, 9, 8, 8], \\\"pz\\\": [0, 0, 1, 0, 1], \\\"nx\\\": [8, 0, 10, 0, 8], \\\"ny\\\": [8, 2, 8, 4, 10], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 11, 12, 8, 4], \\\"py\\\": [3, 0, 0, 1, 1], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [2, 3, 4, 3, 3], \\\"ny\\\": [14, 5, 0, 1, 2], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 11], \\\"py\\\": [7, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [5, 2], \\\"ny\\\": [9, 5], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [7, 1, 0, 10, 1], \\\"py\\\": [0, 0, 2, 12, 6], \\\"pz\\\": [0, 2, 2, 0, 1], \\\"nx\\\": [4, 6, 2, 8, 8], \\\"ny\\\": [4, 11, 2, 4, 4], \\\"nz\\\": [1, 1, 2, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 15], \\\"py\\\": [4, 12], \\\"pz\\\": [2, 0], \\\"nx\\\": [4, 6], \\\"ny\\\": [5, 11], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 4, 16, 14, 14], \\\"py\\\": [8, 4, 23, 18, 18], \\\"pz\\\": [1, 2, 0, 0, -1], \\\"nx\\\": [0, 2, 1, 1, 0], \\\"ny\\\": [2, 0, 3, 2, 3], \\\"nz\\\": [1, 0, 0, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [17, 7, 7, 18, 19], \\\"py\\\": [7, 11, 8, 7, 7], \\\"pz\\\": [0, 1, 1, 0, 0], \\\"nx\\\": [17, 5, 8, 2, 0], \\\"ny\\\": [8, 0, 7, 5, 3], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 14], \\\"py\\\": [12, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 3], \\\"ny\\\": [5, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 8, 16, 11, 11], \\\"py\\\": [5, 6, 12, 4, 4], \\\"pz\\\": [0, 1, 0, 0, -1], \\\"nx\\\": [14, 13, 5, 9, 5], \\\"ny\\\": [13, 10, 1, 4, 2], \\\"nz\\\": [0, 0, 2, 1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [15, 14, 16, 8, 8], \\\"py\\\": [2, 2, 2, 0, 0], \\\"pz\\\": [0, 0, 0, 1, -1], \\\"nx\\\": [9, 18, 19, 18, 17], \\\"ny\\\": [0, 0, 2, 1, 0], \\\"nz\\\": [1, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [17, 15], \\\"py\\\": [12, 11], \\\"pz\\\": [0, 0], \\\"nx\\\": [14, 4], \\\"ny\\\": [9, 15], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [5, 11, 11], \\\"py\\\": [3, 4, 5], \\\"pz\\\": [2, 1, 1], \\\"nx\\\": [14, 3, 18], \\\"ny\\\": [6, 5, 0], \\\"nz\\\": [0, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [16, 14, 17, 15, 9], \\\"py\\\": [2, 2, 2, 2, 1], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [21, 20, 11, 21, 21], \\\"ny\\\": [2, 0, 7, 3, 3], \\\"nz\\\": [0, 0, 1, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [2, 1, 1, 1, 5], \\\"py\\\": [12, 9, 7, 3, 6], \\\"pz\\\": [0, 0, 1, 1, 1], \\\"nx\\\": [4, 8, 3, 4, 17], \\\"ny\\\": [4, 4, 0, 8, 0], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 4], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [9, 2], \\\"ny\\\": [4, 17], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 5], \\\"py\\\": [16, 9], \\\"pz\\\": [0, 1], \\\"nx\\\": [10, 17], \\\"ny\\\": [16, 8], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 5, 9, 15], \\\"py\\\": [14, 9, 11, 5], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [10, 1, 9, 4], \\\"ny\\\": [9, 2, 13, 7], \\\"nz\\\": [0, 2, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [2, 5, 10, 7, 10], \\\"py\\\": [7, 12, 2, 13, 3], \\\"pz\\\": [1, -1, -1, -1, -1], \\\"nx\\\": [5, 2, 3, 3, 2], \\\"ny\\\": [23, 15, 17, 16, 14], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 7], \\\"py\\\": [8, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 14], \\\"ny\\\": [5, 8], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 16], \\\"py\\\": [7, 23], \\\"pz\\\": [1, 0], \\\"nx\\\": [4, 4], \\\"ny\\\": [2, 1], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 5, \\\"px\\\": [16, 14, 18, 4, 17], \\\"py\\\": [0, 0, 4, 0, 1], \\\"pz\\\": [0, 0, 0, 2, 0], \\\"nx\\\": [8, 8, 16, 9, 9], \\\"ny\\\": [5, 4, 11, 7, 7], \\\"nz\\\": [1, 1, 0, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 13, 7, 8, 4], \\\"py\\\": [9, 12, 6, 11, 5], \\\"pz\\\": [0, 0, 1, 1, 2], \\\"nx\\\": [23, 23, 16, 9, 9], \\\"ny\\\": [0, 1, 11, 7, 7], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [6, 7, 2], \\\"py\\\": [21, 23, 4], \\\"pz\\\": [0, 0, 2], \\\"nx\\\": [4, 1, 16], \\\"ny\\\": [10, 5, 11], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [3, 4], \\\"pz\\\": [2, 2], \\\"nx\\\": [3, 1], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [1, 2, 1, 0, 1], \\\"py\\\": [7, 13, 12, 4, 13], \\\"pz\\\": [0, 0, 0, 2, 0], \\\"nx\\\": [18, 9, 9, 19, 19], \\\"ny\\\": [23, 5, 11, 19, 19], \\\"nz\\\": [0, 1, 1, 0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [4, 10, 12], \\\"py\\\": [6, 2, 5], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [10, 0, 0], \\\"ny\\\": [12, 1, 3], \\\"nz\\\": [0, 2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [3, 0], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [19, 17, 10, 14, 18], \\\"py\\\": [2, 1, 7, 0, 1], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [3, 3, 3, 7, 5], \\\"ny\\\": [9, 10, 7, 23, 18], \\\"nz\\\": [1, 1, 1, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 10], \\\"py\\\": [8, 7], \\\"pz\\\": [1, 1], \\\"nx\\\": [14, 4], \\\"ny\\\": [15, 6], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 15], \\\"py\\\": [1, 3], \\\"pz\\\": [1, 0], \\\"nx\\\": [16, 19], \\\"ny\\\": [1, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 11, 1, 2, 11], \\\"py\\\": [11, 12, 1, 13, 12], \\\"pz\\\": [0, 0, -1, -1, -1], \\\"nx\\\": [12, 17, 8, 16, 8], \\\"ny\\\": [7, 12, 11, 16, 6], \\\"nz\\\": [0, 0, 0, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [13, 11, 10, 12, 5], \\\"py\\\": [0, 0, 0, 0, 0], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [8, 4, 3, 4, 4], \\\"ny\\\": [4, 5, 2, 4, 4], \\\"nz\\\": [1, 1, 2, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [6, 1, 3, 2, 3], \\\"py\\\": [13, 3, 3, 4, 10], \\\"pz\\\": [0, 2, 1, 1, 1], \\\"nx\\\": [0, 1, 0, 0, 0], \\\"ny\\\": [2, 0, 5, 4, 4], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 1], \\\"py\\\": [4, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [16, 15], \\\"ny\\\": [2, 2], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 7], \\\"py\\\": [7, 13], \\\"pz\\\": [1, 0], \\\"nx\\\": [3, 0], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 15], \\\"py\\\": [18, 14], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 14], \\\"ny\\\": [4, 16], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 6], \\\"py\\\": [3, 4], \\\"pz\\\": [2, 1], \\\"nx\\\": [9, 5], \\\"ny\\\": [14, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 6], \\\"py\\\": [1, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 9], \\\"ny\\\": [0, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 0], \\\"py\\\": [4, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 3], \\\"ny\\\": [1, 0], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [1, 1, 1, 0, 0], \\\"py\\\": [16, 15, 17, 6, 9], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [9, 5, 4, 9, 8], \\\"ny\\\": [7, 3, 3, 6, 7], \\\"nz\\\": [0, 1, 1, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 1], \\\"py\\\": [8, 15], \\\"pz\\\": [1, -1], \\\"nx\\\": [9, 8], \\\"ny\\\": [9, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [20, 19], \\\"py\\\": [19, 22], \\\"pz\\\": [0, 0], \\\"nx\\\": [7, 0], \\\"ny\\\": [3, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 4, 2, 5, 5], \\\"py\\\": [12, 6, 3, 5, 5], \\\"pz\\\": [0, 1, 2, 1, -1], \\\"nx\\\": [22, 21, 20, 21, 22], \\\"ny\\\": [17, 20, 22, 19, 16], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 12], \\\"py\\\": [2, 6], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 3], \\\"ny\\\": [3, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [9, 4], \\\"pz\\\": [1, 1], \\\"nx\\\": [12, 4], \\\"ny\\\": [17, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [0, 1, 0], \\\"py\\\": [5, 13, 3], \\\"pz\\\": [2, 0, 2], \\\"nx\\\": [0, 4, 11], \\\"ny\\\": [23, 5, 1], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 5], \\\"py\\\": [6, 3], \\\"pz\\\": [0, 1], \\\"nx\\\": [4, 4], \\\"ny\\\": [3, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 5], \\\"py\\\": [7, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 1], \\\"ny\\\": [4, 10], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 13, 12, 12, 12], \\\"py\\\": [12, 13, 11, 10, 10], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [10, 8, 8, 16, 15], \\\"ny\\\": [7, 4, 10, 11, 10], \\\"nz\\\": [0, 1, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 8], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [4, 2], \\\"ny\\\": [5, 5], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 17], \\\"py\\\": [17, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 2], \\\"ny\\\": [9, 4], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [4, 4], \\\"py\\\": [3, 5], \\\"pz\\\": [2, 2], \\\"nx\\\": [12, 8], \\\"ny\\\": [16, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 1], \\\"py\\\": [2, 0], \\\"pz\\\": [1, 1], \\\"nx\\\": [0, 4], \\\"ny\\\": [0, 1], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 1], \\\"py\\\": [5, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 3], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 4, \\\"px\\\": [0, 6, 4, 22], \\\"py\\\": [23, 2, 4, 12], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [7, 6, 8, 5], \\\"ny\\\": [1, 1, 2, 1], \\\"nz\\\": [1, 1, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 10], \\\"py\\\": [0, 9], \\\"pz\\\": [1, -1], \\\"nx\\\": [2, 4], \\\"ny\\\": [3, 10], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 8], \\\"py\\\": [15, 13], \\\"pz\\\": [0, -1], \\\"nx\\\": [23, 11], \\\"ny\\\": [13, 5], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 4], \\\"py\\\": [5, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [18, 20], \\\"ny\\\": [4, 7], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [21, 20, 20, 10, 20], \\\"py\\\": [17, 22, 19, 10, 21], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [5, 5, 3, 14, 7], \\\"ny\\\": [9, 9, 0, 8, 4], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 7, 13, 7, 3], \\\"py\\\": [6, 12, 3, 0, 3], \\\"pz\\\": [1, -1, -1, -1, -1], \\\"nx\\\": [1, 5, 0, 0, 2], \\\"ny\\\": [16, 6, 13, 5, 4], \\\"nz\\\": [0, 1, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [7, 4], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [9, 5], \\\"ny\\\": [4, 6], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [14, 9, 13], \\\"py\\\": [19, 22, 8], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [13, 4, 4], \\\"ny\\\": [17, 2, 5], \\\"nz\\\": [0, 2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [16, 4], \\\"py\\\": [9, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [7, 4], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [10, 2, 4, 2], \\\"py\\\": [23, 4, 8, 3], \\\"pz\\\": [0, 2, 1, 2], \\\"nx\\\": [14, 0, 4, 11], \\\"ny\\\": [19, 3, 5, 3], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 10, 8, 7, 11], \\\"py\\\": [2, 2, 2, 2, 2], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [6, 5, 3, 4, 4], \\\"ny\\\": [0, 1, 0, 2, 2], \\\"nz\\\": [0, 0, 1, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 4], \\\"py\\\": [13, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [15, 4], \\\"ny\\\": [8, 4], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 8], \\\"py\\\": [1, 2], \\\"pz\\\": [2, -1], \\\"nx\\\": [5, 4], \\\"ny\\\": [2, 2], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [16, 13, 14, 15, 15], \\\"py\\\": [1, 0, 0, 0, 0], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [4, 9, 4, 18, 8], \\\"ny\\\": [5, 9, 4, 18, 11], \\\"nz\\\": [2, 1, 2, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 6], \\\"py\\\": [2, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [22, 9], \\\"ny\\\": [23, 9], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [19, 19], \\\"py\\\": [5, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [21, 22], \\\"ny\\\": [2, 4], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 5], \\\"py\\\": [8, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [3, 4], \\\"ny\\\": [4, 9], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 14], \\\"py\\\": [13, 17], \\\"pz\\\": [0, 0], \\\"nx\\\": [14, 4], \\\"ny\\\": [16, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 6], \\\"py\\\": [6, 3], \\\"pz\\\": [1, -1], \\\"nx\\\": [1, 0], \\\"ny\\\": [2, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [23, 21], \\\"py\\\": [21, 14], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 5], \\\"ny\\\": [0, 0], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 10], \\\"py\\\": [23, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 4], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [4, 18], \\\"py\\\": [3, 8], \\\"pz\\\": [2, 0], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 7], \\\"py\\\": [2, 11], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [2, 3, 5, 6, 1], \\\"py\\\": [7, 14, 2, 2, 4], \\\"pz\\\": [1, 0, 0, 0, 2], \\\"nx\\\": [8, 4, 4, 7, 7], \\\"ny\\\": [7, 5, 4, 9, 9], \\\"nz\\\": [1, 2, 2, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 3], \\\"py\\\": [6, 3], \\\"pz\\\": [1, -1], \\\"nx\\\": [1, 2], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [7, 20, 4, 10, 10], \\\"py\\\": [9, 16, 4, 10, 8], \\\"pz\\\": [1, 0, 2, 1, 1], \\\"nx\\\": [4, 2, 3, 5, 3], \\\"ny\\\": [11, 5, 6, 12, 5], \\\"nz\\\": [0, 1, 1, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 11], \\\"py\\\": [4, 18], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 6], \\\"ny\\\": [4, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 8], \\\"py\\\": [5, 23], \\\"pz\\\": [2, 0], \\\"nx\\\": [9, 4], \\\"ny\\\": [0, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 1, 2, 2, 2], \\\"py\\\": [12, 6, 12, 11, 11], \\\"pz\\\": [0, 1, 0, 0, -1], \\\"nx\\\": [0, 0, 0, 0, 0], \\\"ny\\\": [13, 12, 11, 14, 7], \\\"nz\\\": [0, 0, 0, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [1, 2], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 14], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 23, 23, 22, 22], \\\"py\\\": [8, 12, 6, 13, 14], \\\"pz\\\": [1, 0, 0, 0, 0], \\\"nx\\\": [13, 8, 7, 6, 6], \\\"ny\\\": [6, 3, 3, 9, 9], \\\"nz\\\": [0, 1, 1, 0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [9, 23, 23, 22], \\\"py\\\": [7, 12, 6, 13], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [11, 23, 23, 23], \\\"ny\\\": [6, 13, 17, 10], \\\"nz\\\": [1, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 0, 0, 0], \\\"py\\\": [19, 5, 9, 16, 10], \\\"pz\\\": [0, 2, 1, 0, 1], \\\"nx\\\": [5, 2, 1, 2, 2], \\\"ny\\\": [18, 10, 5, 9, 9], \\\"nz\\\": [0, 1, 2, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 5], \\\"py\\\": [10, 4], \\\"pz\\\": [1, 2], \\\"nx\\\": [23, 14], \\\"ny\\\": [23, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [3, 1], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 10], \\\"py\\\": [4, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 8], \\\"ny\\\": [2, 3], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [7, 10, 11], \\\"py\\\": [1, 6, 13], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [4, 4, 2], \\\"ny\\\": [3, 8, 2], \\\"nz\\\": [1, 1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [8, 4], \\\"py\\\": [8, 2], \\\"pz\\\": [1, 2], \\\"nx\\\": [10, 5], \\\"ny\\\": [10, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 16], \\\"py\\\": [20, 21], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 4], \\\"ny\\\": [5, 10], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 10], \\\"py\\\": [7, 8], \\\"pz\\\": [1, -1], \\\"nx\\\": [7, 4], \\\"ny\\\": [20, 7], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 11, 11, 11, 11], \\\"py\\\": [10, 12, 13, 11, 11], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [11, 12, 16, 3, 8], \\\"ny\\\": [6, 6, 10, 1, 8], \\\"nz\\\": [0, 0, 0, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 6], \\\"py\\\": [4, 2], \\\"pz\\\": [0, 1], \\\"nx\\\": [7, 7], \\\"ny\\\": [8, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [23, 23, 23, 23, 23], \\\"py\\\": [22, 20, 21, 19, 19], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [4, 6, 3, 4, 3], \\\"ny\\\": [19, 23, 15, 20, 16], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [8, 4, 14], \\\"py\\\": [12, 3, 8], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [4, 2, 10], \\\"ny\\\": [10, 3, 13], \\\"nz\\\": [1, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 18], \\\"py\\\": [13, 23], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 5], \\\"ny\\\": [1, 2], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 3, \\\"px\\\": [11, 2, 10], \\\"py\\\": [17, 4, 17], \\\"pz\\\": [0, 2, 0], \\\"nx\\\": [11, 0, 22], \\\"ny\\\": [15, 2, 4], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [11, 3, 0], \\\"py\\\": [15, 4, 8], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [14, 11, 4], \\\"ny\\\": [9, 17, 7], \\\"nz\\\": [0, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 16], \\\"py\\\": [2, 1], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 11], \\\"ny\\\": [4, 6], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 4], \\\"py\\\": [21, 23], \\\"pz\\\": [0, 0], \\\"nx\\\": [4, 0], \\\"ny\\\": [3, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 2], \\\"py\\\": [20, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 9], \\\"ny\\\": [5, 10], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 1], \\\"py\\\": [19, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [9, 21], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [19, 19], \\\"py\\\": [21, 22], \\\"pz\\\": [0, 0], \\\"nx\\\": [19, 0], \\\"ny\\\": [23, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 2, 3, 2], \\\"py\\\": [6, 6, 9, 4], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [4, 9, 19, 19], \\\"ny\\\": [5, 10, 17, 18], \\\"nz\\\": [2, 1, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [4, 8], \\\"pz\\\": [2, 1], \\\"nx\\\": [4, 9], \\\"ny\\\": [10, 10], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [23, 22], \\\"py\\\": [8, 12], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 4], \\\"ny\\\": [11, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [12, 1], \\\"py\\\": [5, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 11], \\\"ny\\\": [2, 1], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 4], \\\"py\\\": [2, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 2], \\\"ny\\\": [1, 2], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [17, 9], \\\"py\\\": [13, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [9, 5], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [0, 0, 9, 13], \\\"py\\\": [3, 3, 7, 3], \\\"pz\\\": [2, -1, -1, -1], \\\"nx\\\": [2, 4, 4, 11], \\\"ny\\\": [1, 2, 8, 5], \\\"nz\\\": [2, 1, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [3, 6, 5, 6, 6], \\\"py\\\": [0, 0, 2, 1, 1], \\\"pz\\\": [1, 0, 0, 0, -1], \\\"nx\\\": [2, 2, 2, 1, 1], \\\"ny\\\": [21, 19, 20, 16, 17], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [13, 3], \\\"py\\\": [22, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 4], \\\"ny\\\": [10, 5], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [3, 2], \\\"py\\\": [7, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [17, 8, 15, 7, 15], \\\"py\\\": [13, 6, 16, 5, 12], \\\"pz\\\": [0, 1, 0, 1, 0], \\\"nx\\\": [5, 4, 6, 3, 4], \\\"ny\\\": [1, 2, 1, 0, 3], \\\"nz\\\": [0, 0, 0, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 9, 11, 12, 10], \\\"py\\\": [0, 1, 2, 2, 0], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [8, 16, 7, 4, 4], \\\"ny\\\": [9, 23, 9, 3, 2], \\\"nz\\\": [1, 0, 1, 2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 11], \\\"py\\\": [1, 4], \\\"pz\\\": [2, -1], \\\"nx\\\": [8, 7], \\\"ny\\\": [4, 4], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [7, 4, 5, 8], \\\"py\\\": [13, 2, 1, 3], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [9, 4, 9, 9], \\\"ny\\\": [9, 5, 10, 11], \\\"nz\\\": [0, 1, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 11], \\\"py\\\": [10, 11], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 6], \\\"ny\\\": [2, 2], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [21, 3], \\\"py\\\": [11, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [22, 22], \\\"ny\\\": [20, 18], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [7, 6], \\\"py\\\": [1, 2], \\\"pz\\\": [0, 0], \\\"nx\\\": [5, 10], \\\"ny\\\": [1, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [21, 3], \\\"py\\\": [18, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [16, 15], \\\"ny\\\": [4, 4], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 7], \\\"py\\\": [4, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 11], \\\"py\\\": [23, 17], \\\"pz\\\": [0, 0], \\\"nx\\\": [11, 21], \\\"ny\\\": [16, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 2], \\\"py\\\": [0, 6], \\\"pz\\\": [1, -1], \\\"nx\\\": [16, 16], \\\"ny\\\": [9, 11], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 13], \\\"py\\\": [20, 20], \\\"pz\\\": [0, 0], \\\"nx\\\": [11, 3], \\\"ny\\\": [21, 7], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [19, 20, 9], \\\"py\\\": [21, 18, 11], \\\"pz\\\": [0, 0, 1], \\\"nx\\\": [17, 4, 11], \\\"ny\\\": [19, 2, 0], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 5], \\\"py\\\": [5, 2], \\\"pz\\\": [0, 1], \\\"nx\\\": [7, 9], \\\"ny\\\": [7, 8], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 4, 4, 8, 4], \\\"py\\\": [4, 4, 5, 10, 3], \\\"pz\\\": [1, 1, 2, 0, 2], \\\"nx\\\": [11, 22, 11, 23, 23], \\\"ny\\\": [0, 0, 1, 3, 3], \\\"nz\\\": [1, 0, 1, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 14], \\\"py\\\": [10, 23], \\\"pz\\\": [1, 0], \\\"nx\\\": [7, 2], \\\"ny\\\": [10, 9], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 14], \\\"py\\\": [6, 23], \\\"pz\\\": [1, -1], \\\"nx\\\": [1, 2], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 2], \\\"py\\\": [19, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [10, 12], \\\"ny\\\": [18, 18], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 3], \\\"py\\\": [4, 1], \\\"pz\\\": [0, 2], \\\"nx\\\": [6, 6], \\\"ny\\\": [11, 11], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 0, 0, 0], \\\"py\\\": [18, 10, 20, 19, 19], \\\"pz\\\": [0, 1, 0, 0, -1], \\\"nx\\\": [11, 10, 14, 12, 13], \\\"ny\\\": [2, 2, 2, 2, 2], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [12, 2, 9], \\\"py\\\": [14, 5, 10], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [11, 10, 5], \\\"ny\\\": [10, 13, 5], \\\"nz\\\": [0, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 3], \\\"py\\\": [3, 7], \\\"pz\\\": [2, 1], \\\"nx\\\": [3, 10], \\\"ny\\\": [4, 13], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 3], \\\"py\\\": [21, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [10, 21], \\\"ny\\\": [7, 15], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [21, 10], \\\"py\\\": [16, 8], \\\"pz\\\": [0, 1], \\\"nx\\\": [8, 2], \\\"ny\\\": [10, 8], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 8], \\\"py\\\": [6, 7], \\\"pz\\\": [1, -1], \\\"nx\\\": [12, 11], \\\"ny\\\": [11, 7], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 11], \\\"py\\\": [4, 20], \\\"pz\\\": [2, 0], \\\"nx\\\": [11, 10], \\\"ny\\\": [19, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 5], \\\"py\\\": [13, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 1], \\\"py\\\": [23, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [14, 6], \\\"ny\\\": [12, 9], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 5], \\\"py\\\": [11, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 7], \\\"ny\\\": [3, 1], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 6], \\\"py\\\": [2, 17], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 6], \\\"ny\\\": [4, 12], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [14, 19], \\\"py\\\": [5, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 3], \\\"ny\\\": [9, 1], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 5, \\\"px\\\": [12, 13, 13, 13, 12], \\\"py\\\": [9, 11, 12, 13, 10], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [2, 4, 4, 4, 4], \\\"ny\\\": [7, 18, 17, 14, 14], \\\"nz\\\": [1, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 10], \\\"py\\\": [6, 6], \\\"pz\\\": [1, -1], \\\"nx\\\": [20, 18], \\\"ny\\\": [18, 23], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 6], \\\"py\\\": [4, 14], \\\"pz\\\": [1, -1], \\\"nx\\\": [9, 4], \\\"ny\\\": [2, 1], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 9], \\\"py\\\": [4, 18], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 0], \\\"py\\\": [18, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [5, 4], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 4, \\\"px\\\": [7, 3, 6, 6], \\\"py\\\": [8, 4, 6, 5], \\\"pz\\\": [1, 2, 1, 1], \\\"nx\\\": [10, 4, 13, 0], \\\"ny\\\": [10, 4, 9, 22], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 8], \\\"py\\\": [18, 11], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 4], \\\"ny\\\": [8, 10], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 4, \\\"px\\\": [17, 2, 10, 2], \\\"py\\\": [14, 1, 10, 3], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [8, 8, 17, 8], \\\"ny\\\": [4, 5, 12, 6], \\\"nz\\\": [1, 1, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 11, 9, 4, 10], \\\"py\\\": [1, 1, 0, 0, 1], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [8, 4, 7, 15, 15], \\\"ny\\\": [7, 2, 4, 17, 17], \\\"nz\\\": [1, 2, 1, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 3], \\\"py\\\": [11, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 2], \\\"ny\\\": [1, 2], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 3], \\\"py\\\": [13, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 1], \\\"ny\\\": [5, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [6, 2], \\\"py\\\": [8, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [3, 1], \\\"ny\\\": [5, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 5, 7, 8, 6], \\\"py\\\": [9, 7, 7, 7, 7], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [7, 3, 0, 2, 15], \\\"ny\\\": [8, 0, 1, 18, 17], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 8], \\\"py\\\": [12, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [8, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 11, 8, 10, 12], \\\"py\\\": [0, 2, 10, 2, 3], \\\"pz\\\": [2, 0, 0, 0, 0], \\\"nx\\\": [3, 2, 10, 2, 2], \\\"ny\\\": [6, 4, 11, 3, 3], \\\"nz\\\": [0, 1, 0, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [2, 4], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 19], \\\"ny\\\": [4, 16], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [1, 1], \\\"pz\\\": [2, -1], \\\"nx\\\": [7, 17], \\\"ny\\\": [1, 2], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [16, 15, 14, 13, 7], \\\"py\\\": [0, 0, 0, 0, 0], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [6, 4, 8, 3, 11], \\\"ny\\\": [3, 4, 4, 1, 6], \\\"nz\\\": [1, 1, 1, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 1], \\\"py\\\": [8, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [13, 4], \\\"ny\\\": [10, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [4, 9], \\\"py\\\": [0, 2], \\\"pz\\\": [2, 1], \\\"nx\\\": [4, 11], \\\"ny\\\": [0, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 15], \\\"py\\\": [2, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [8, 17], \\\"py\\\": [9, 22], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 20], \\\"ny\\\": [10, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 10], \\\"py\\\": [14, 22], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 11], \\\"ny\\\": [3, 3], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 2], \\\"py\\\": [1, 0], \\\"pz\\\": [1, 2], \\\"nx\\\": [5, 8], \\\"ny\\\": [3, 9], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 3], \\\"py\\\": [4, 8], \\\"pz\\\": [2, 1], \\\"nx\\\": [9, 5], \\\"ny\\\": [15, 19], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 2], \\\"py\\\": [1, 1], \\\"pz\\\": [0, 1], \\\"nx\\\": [10, 10], \\\"ny\\\": [6, 6], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 6], \\\"py\\\": [10, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 3, \\\"px\\\": [13, 7, 3], \\\"py\\\": [5, 2, 6], \\\"pz\\\": [0, 1, -1], \\\"nx\\\": [17, 16, 17], \\\"ny\\\": [1, 1, 2], \\\"nz\\\": [0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 10], \\\"py\\\": [3, 3], \\\"pz\\\": [0, 0], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 8], \\\"py\\\": [0, 8], \\\"pz\\\": [2, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [0, 0], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 2, 4, 1, 2], \\\"py\\\": [13, 3, 9, 2, 5], \\\"pz\\\": [0, 2, 1, 2, 2], \\\"nx\\\": [9, 5, 10, 4, 10], \\\"ny\\\": [5, 1, 3, 0, 0], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 12], \\\"py\\\": [5, 9], \\\"pz\\\": [1, 0], \\\"nx\\\": [0, 2], \\\"ny\\\": [23, 9], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [22, 11], \\\"py\\\": [21, 8], \\\"pz\\\": [0, 1], \\\"nx\\\": [10, 0], \\\"ny\\\": [17, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 1], \\\"py\\\": [22, 9], \\\"pz\\\": [0, 1], \\\"nx\\\": [22, 5], \\\"ny\\\": [11, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [4, 2], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [5, 6], \\\"ny\\\": [10, 9], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [7, 3, 17, 7], \\\"py\\\": [8, 2, 10, 11], \\\"pz\\\": [0, 2, 0, 1], \\\"nx\\\": [6, 10, 5, 23], \\\"ny\\\": [9, 21, 1, 23], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 3], \\\"py\\\": [7, 2], \\\"pz\\\": [1, 2], \\\"nx\\\": [8, 9], \\\"ny\\\": [4, 9], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 5], \\\"py\\\": [14, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [8, 8], \\\"ny\\\": [13, 13], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [11, 6, 8], \\\"py\\\": [20, 3, 20], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [5, 3, 12], \\\"ny\\\": [9, 5, 18], \\\"nz\\\": [1, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 9], \\\"py\\\": [1, 3], \\\"pz\\\": [1, 0], \\\"nx\\\": [2, 8], \\\"ny\\\": [5, 8], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 9], \\\"py\\\": [21, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [5, 5], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [2, 9], \\\"py\\\": [7, 11], \\\"pz\\\": [1, -1], \\\"nx\\\": [2, 2], \\\"ny\\\": [8, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 4, \\\"px\\\": [3, 4, 3, 1], \\\"py\\\": [14, 21, 19, 6], \\\"pz\\\": [0, 0, 0, 1], \\\"nx\\\": [10, 16, 4, 5], \\\"ny\\\": [8, 1, 7, 6], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [10, 4, 3, 1], \\\"py\\\": [5, 21, 19, 6], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [21, 10, 5, 11], \\\"ny\\\": [4, 2, 3, 4], \\\"nz\\\": [0, 1, 2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 17], \\\"py\\\": [3, 8], \\\"pz\\\": [2, 0], \\\"nx\\\": [17, 2], \\\"ny\\\": [9, 22], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 12], \\\"py\\\": [14, 20], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 12], \\\"py\\\": [9, 20], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 23], \\\"ny\\\": [8, 18], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 11], \\\"py\\\": [4, 7], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 15], \\\"ny\\\": [7, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 15], \\\"py\\\": [13, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 11], \\\"ny\\\": [6, 7], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 15], \\\"py\\\": [14, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 4], \\\"ny\\\": [12, 13], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 5], \\\"py\\\": [0, 1], \\\"pz\\\": [2, 2], \\\"nx\\\": [15, 4], \\\"ny\\\": [5, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 17], \\\"py\\\": [2, 2], \\\"pz\\\": [0, 0], \\\"nx\\\": [20, 8], \\\"ny\\\": [3, 7], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [6, 3, 2], \\\"py\\\": [10, 6, 1], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [4, 3, 2], \\\"ny\\\": [3, 4, 2], \\\"nz\\\": [1, 1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [10, 6], \\\"py\\\": [4, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [6, 13], \\\"ny\\\": [0, 1], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 10], \\\"py\\\": [8, 7], \\\"pz\\\": [1, 1], \\\"nx\\\": [8, 2], \\\"ny\\\": [7, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 1], \\\"py\\\": [12, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [5, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 15], \\\"py\\\": [15, 14], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 11], \\\"ny\\\": [4, 13], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [13, 9, 11, 14, 12], \\\"py\\\": [0, 2, 0, 0, 2], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [5, 4, 4, 3, 4], \\\"ny\\\": [4, 4, 18, 7, 17], \\\"nz\\\": [1, 1, 0, 1, 0] }, { \\\"size\\\": 3, \\\"px\\\": [13, 12, 11], \\\"py\\\": [22, 22, 22], \\\"pz\\\": [0, 0, 0], \\\"nx\\\": [11, 12, 13], \\\"ny\\\": [20, 20, 20], \\\"nz\\\": [0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 13], \\\"py\\\": [2, 4], \\\"pz\\\": [1, 0], \\\"nx\\\": [7, 6], \\\"ny\\\": [8, 9], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [23, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 9], \\\"ny\\\": [1, 1], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [14, 14], \\\"py\\\": [19, 19], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 11], \\\"ny\\\": [10, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [23, 23], \\\"py\\\": [11, 9], \\\"pz\\\": [0, 0], \\\"nx\\\": [23, 23], \\\"ny\\\": [0, 11], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [23, 3], \\\"py\\\": [23, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 1], \\\"ny\\\": [23, 10], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 1], \\\"py\\\": [7, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [19, 10], \\\"ny\\\": [20, 9], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 1], \\\"py\\\": [9, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 8], \\\"ny\\\": [3, 3], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 6], \\\"py\\\": [13, 13], \\\"pz\\\": [0, 0], \\\"nx\\\": [4, 5], \\\"ny\\\": [4, 11], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [19, 20, 20, 10, 10], \\\"py\\\": [0, 0, 2, 0, 1], \\\"pz\\\": [0, 0, 0, 1, 1], \\\"nx\\\": [7, 7, 15, 4, 4], \\\"ny\\\": [4, 13, 7, 4, 4], \\\"nz\\\": [1, 0, 0, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 23], \\\"py\\\": [6, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [18, 18], \\\"ny\\\": [17, 16], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [9, 2], \\\"pz\\\": [1, 2], \\\"nx\\\": [14, 18], \\\"ny\\\": [9, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 13], \\\"py\\\": [16, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 4], \\\"ny\\\": [7, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 10], \\\"py\\\": [8, 10], \\\"pz\\\": [1, 1], \\\"nx\\\": [4, 1], \\\"ny\\\": [5, 3], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 11], \\\"py\\\": [13, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [14, 15], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 1], \\\"py\\\": [20, 17], \\\"pz\\\": [0, 0], \\\"nx\\\": [12, 12], \\\"ny\\\": [22, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 3], \\\"py\\\": [6, 7], \\\"pz\\\": [1, -1], \\\"nx\\\": [21, 21], \\\"ny\\\": [13, 12], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 10], \\\"py\\\": [4, 23], \\\"pz\\\": [2, 0], \\\"nx\\\": [10, 2], \\\"ny\\\": [21, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 12], \\\"py\\\": [3, 6], \\\"pz\\\": [1, 0], \\\"nx\\\": [11, 0], \\\"ny\\\": [17, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 4], \\\"py\\\": [21, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 3], \\\"ny\\\": [18, 22], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [13, 5], \\\"py\\\": [18, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [6, 7], \\\"ny\\\": [8, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [21, 4], \\\"py\\\": [16, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [23, 23], \\\"ny\\\": [16, 15], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 0], \\\"py\\\": [7, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 8], \\\"ny\\\": [7, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 16], \\\"py\\\": [11, 12], \\\"pz\\\": [0, 0], \\\"nx\\\": [8, 5], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [7, 5], \\\"pz\\\": [0, 0], \\\"nx\\\": [17, 17], \\\"ny\\\": [11, 10], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 13, 12, 3, 3], \\\"py\\\": [6, 23, 23, 3, 3], \\\"pz\\\": [1, 0, 0, 2, -1], \\\"nx\\\": [0, 1, 0, 0, 0], \\\"ny\\\": [2, 13, 4, 5, 6], \\\"nz\\\": [2, 0, 1, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 1], \\\"py\\\": [7, 8], \\\"pz\\\": [1, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [1, 0], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [2, 12], \\\"py\\\": [1, 7], \\\"pz\\\": [1, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [12, 14], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 1], \\\"py\\\": [7, 4], \\\"pz\\\": [1, 2], \\\"nx\\\": [8, 0], \\\"ny\\\": [15, 14], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 4], \\\"py\\\": [14, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 4], \\\"ny\\\": [1, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 3], \\\"py\\\": [3, 1], \\\"pz\\\": [2, -1], \\\"nx\\\": [9, 9], \\\"ny\\\": [5, 6], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 5], \\\"py\\\": [2, 3], \\\"pz\\\": [1, -1], \\\"nx\\\": [11, 12], \\\"ny\\\": [23, 23], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 5], \\\"py\\\": [7, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [22, 22], \\\"ny\\\": [19, 18], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [10, 2, 9], \\\"py\\\": [20, 9, 4], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [1, 10, 11], \\\"ny\\\": [2, 11, 9], \\\"nz\\\": [2, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 8], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [9, 3], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 6], \\\"py\\\": [7, 16], \\\"pz\\\": [0, -1], \\\"nx\\\": [17, 17], \\\"ny\\\": [9, 6], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [8, 1, 9], \\\"py\\\": [6, 3, 4], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [2, 9, 2], \\\"ny\\\": [5, 13, 3], \\\"nz\\\": [2, 0, 2] }, { \\\"size\\\": 4, \\\"px\\\": [10, 10, 9, 2], \\\"py\\\": [12, 11, 2, 10], \\\"pz\\\": [0, 0, -1, -1], \\\"nx\\\": [6, 11, 3, 13], \\\"ny\\\": [2, 4, 1, 4], \\\"nz\\\": [1, 0, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [7, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 3], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [4, 8], \\\"pz\\\": [2, 1], \\\"nx\\\": [4, 4], \\\"ny\\\": [15, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 0], \\\"py\\\": [4, 8], \\\"pz\\\": [1, -1], \\\"nx\\\": [13, 13], \\\"ny\\\": [9, 10], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [2, 1], \\\"pz\\\": [1, 2], \\\"nx\\\": [8, 17], \\\"ny\\\": [4, 12], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 16], \\\"py\\\": [11, 6], \\\"pz\\\": [0, 0], \\\"nx\\\": [16, 17], \\\"ny\\\": [5, 12], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 11], \\\"py\\\": [9, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 1], \\\"ny\\\": [9, 20], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 3, \\\"px\\\": [16, 11, 20], \\\"py\\\": [4, 7, 23], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [8, 9, 4], \\\"ny\\\": [4, 6, 4], \\\"nz\\\": [1, 1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [1, 1], \\\"py\\\": [18, 17], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 6], \\\"ny\\\": [7, 11], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [4, 4, 19], \\\"py\\\": [3, 2, 9], \\\"pz\\\": [2, 2, 0], \\\"nx\\\": [2, 14, 11], \\\"ny\\\": [5, 3, 9], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 19], \\\"py\\\": [13, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 11], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 7], \\\"py\\\": [19, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 5], \\\"ny\\\": [6, 12], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 4, \\\"px\\\": [9, 4, 4, 2], \\\"py\\\": [13, 9, 8, 4], \\\"pz\\\": [0, 1, 1, 2], \\\"nx\\\": [13, 0, 0, 14], \\\"ny\\\": [18, 11, 6, 1], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 15], \\\"py\\\": [8, 10], \\\"pz\\\": [0, 0], \\\"nx\\\": [14, 11], \\\"ny\\\": [9, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 2], \\\"py\\\": [8, 5], \\\"pz\\\": [1, 2], \\\"nx\\\": [4, 4], \\\"ny\\\": [10, 10], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [4, 6, 16, 14], \\\"py\\\": [1, 1, 1, 7], \\\"pz\\\": [2, 1, 0, 0], \\\"nx\\\": [10, 1, 1, 2], \\\"ny\\\": [8, 5, 10, 3], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [2, 3, 1, 2], \\\"py\\\": [3, 1, 0, 2], \\\"pz\\\": [0, 0, 1, 0], \\\"nx\\\": [0, 0, 0, 0], \\\"ny\\\": [1, 1, 2, 0], \\\"nz\\\": [0, 1, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 8], \\\"py\\\": [6, 7], \\\"pz\\\": [1, 1], \\\"nx\\\": [8, 0], \\\"ny\\\": [4, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [3, 0], \\\"pz\\\": [0, 1], \\\"nx\\\": [2, 2], \\\"ny\\\": [1, 16], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 6], \\\"py\\\": [19, 18], \\\"pz\\\": [0, 0], \\\"nx\\\": [2, 10], \\\"ny\\\": [5, 8], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 5], \\\"py\\\": [21, 11], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 2], \\\"ny\\\": [11, 5], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [4, 9], \\\"py\\\": [4, 7], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 7], \\\"ny\\\": [10, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 18, 19, 16, 19], \\\"py\\\": [3, 12, 12, 23, 13], \\\"pz\\\": [2, 0, 0, 0, 0], \\\"nx\\\": [2, 8, 3, 2, 2], \\\"ny\\\": [4, 23, 10, 5, 5], \\\"nz\\\": [2, 0, 1, 2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 8], \\\"py\\\": [6, 11], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 3], \\\"ny\\\": [4, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 12], \\\"py\\\": [4, 13], \\\"pz\\\": [2, 0], \\\"nx\\\": [10, 5], \\\"ny\\\": [15, 21], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 9], \\\"py\\\": [4, 23], \\\"pz\\\": [2, 0], \\\"nx\\\": [19, 4], \\\"ny\\\": [9, 3], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [8, 15], \\\"pz\\\": [1, 0], \\\"nx\\\": [6, 1], \\\"ny\\\": [18, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 0], \\\"py\\\": [20, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 10], \\\"ny\\\": [5, 17], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 3, \\\"px\\\": [10, 6, 3], \\\"py\\\": [2, 7, 3], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [5, 4, 2], \\\"ny\\\": [9, 7, 2], \\\"nz\\\": [1, 1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [14, 6], \\\"py\\\": [12, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 10], \\\"ny\\\": [0, 1], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 3, \\\"px\\\": [10, 5, 1], \\\"py\\\": [15, 5, 4], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [9, 4, 18], \\\"ny\\\": [2, 0, 4], \\\"nz\\\": [1, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [17, 2], \\\"py\\\": [12, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 16], \\\"ny\\\": [4, 11], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 3, \\\"px\\\": [7, 13, 4], \\\"py\\\": [0, 0, 1], \\\"pz\\\": [1, 0, -1], \\\"nx\\\": [18, 4, 4], \\\"ny\\\": [13, 2, 3], \\\"nz\\\": [0, 2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [1, 11], \\\"py\\\": [10, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 1], \\\"ny\\\": [15, 17], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [9, 12, 8], \\\"py\\\": [8, 17, 11], \\\"pz\\\": [1, 0, 1], \\\"nx\\\": [12, 0, 20], \\\"ny\\\": [16, 9, 13], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 4], \\\"py\\\": [5, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [16, 3], \\\"py\\\": [9, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [11, 5], \\\"pz\\\": [1, 2], \\\"nx\\\": [11, 5], \\\"ny\\\": [21, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 13], \\\"py\\\": [1, 1], \\\"pz\\\": [0, 0], \\\"nx\\\": [4, 4], \\\"ny\\\": [5, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 4], \\\"py\\\": [4, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [12, 10], \\\"ny\\\": [2, 2], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [2, 4], \\\"pz\\\": [2, 1], \\\"nx\\\": [9, 7], \\\"ny\\\": [9, 7], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [5, 6, 6], \\\"py\\\": [4, 4, 4], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [13, 8, 7], \\\"ny\\\": [8, 3, 4], \\\"nz\\\": [0, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 5], \\\"py\\\": [2, 11], \\\"pz\\\": [1, 1], \\\"nx\\\": [10, 11], \\\"ny\\\": [22, 22], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [16, 9], \\\"py\\\": [13, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [8, 14], \\\"ny\\\": [4, 12], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 5], \\\"py\\\": [13, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [16, 22], \\\"ny\\\": [13, 6], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [4, 4, 3, 4], \\\"py\\\": [4, 3, 4, 5], \\\"pz\\\": [2, 2, 2, 2], \\\"nx\\\": [21, 5, 17, 7], \\\"ny\\\": [0, 2, 5, 23], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 16], \\\"py\\\": [0, 1], \\\"pz\\\": [2, 0], \\\"nx\\\": [15, 1], \\\"ny\\\": [23, 10], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 6], \\\"py\\\": [11, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [15, 6], \\\"ny\\\": [2, 1], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [2, 1], \\\"pz\\\": [1, 2], \\\"nx\\\": [8, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [13, 14, 5], \\\"py\\\": [9, 15, 2], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [11, 1, 11], \\\"ny\\\": [10, 3, 11], \\\"nz\\\": [0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 1], \\\"py\\\": [6, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [1, 1], \\\"ny\\\": [2, 5], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 5], \\\"py\\\": [1, 0], \\\"pz\\\": [1, 2], \\\"nx\\\": [10, 4], \\\"ny\\\": [2, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [8, 9], \\\"pz\\\": [1, 1], \\\"nx\\\": [23, 4], \\\"ny\\\": [23, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 2], \\\"py\\\": [10, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [18, 10], \\\"ny\\\": [0, 1], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [20, 4], \\\"py\\\": [7, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 4], \\\"py\\\": [5, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [11, 11], \\\"ny\\\": [5, 6], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 3, \\\"px\\\": [14, 15, 16], \\\"py\\\": [0, 0, 1], \\\"pz\\\": [0, 0, 0], \\\"nx\\\": [8, 5, 15], \\\"ny\\\": [7, 2, 10], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [1, 1], \\\"pz\\\": [2, -1], \\\"nx\\\": [17, 18], \\\"ny\\\": [2, 2], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [13, 8], \\\"py\\\": [15, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 4], \\\"ny\\\": [5, 2], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 0], \\\"py\\\": [6, 17], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 2], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [14, 8], \\\"py\\\": [17, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 6], \\\"ny\\\": [8, 8], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 4], \\\"py\\\": [7, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [15, 6], \\\"ny\\\": [14, 4], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 12], \\\"py\\\": [8, 19], \\\"pz\\\": [1, 0], \\\"nx\\\": [13, 10], \\\"ny\\\": [17, 9], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 12], \\\"py\\\": [2, 4], \\\"pz\\\": [1, 0], \\\"nx\\\": [6, 11], \\\"ny\\\": [3, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [2, 1, 6, 1], \\\"py\\\": [10, 3, 23, 8], \\\"pz\\\": [1, 2, 0, 1], \\\"nx\\\": [17, 10, 23, 0], \\\"ny\\\": [9, 2, 20, 3], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 9], \\\"py\\\": [2, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 2], \\\"ny\\\": [4, 2], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [3, 16], \\\"py\\\": [1, 6], \\\"pz\\\": [2, 0], \\\"nx\\\": [8, 4], \\\"ny\\\": [2, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [1, 2], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 6], \\\"py\\\": [3, 0], \\\"pz\\\": [2, -1], \\\"nx\\\": [9, 5], \\\"ny\\\": [2, 1], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 16], \\\"py\\\": [5, 23], \\\"pz\\\": [1, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [6, 3], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 4, \\\"px\\\": [0, 0, 0, 0], \\\"py\\\": [3, 2, 12, 5], \\\"pz\\\": [2, 2, 0, 1], \\\"nx\\\": [2, 3, 2, 13], \\\"ny\\\": [5, 5, 2, 19], \\\"nz\\\": [1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [10, 11], \\\"pz\\\": [0, 0], \\\"nx\\\": [5, 5], \\\"ny\\\": [1, 1], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 2], \\\"py\\\": [0, 4], \\\"pz\\\": [2, -1], \\\"nx\\\": [2, 2], \\\"ny\\\": [10, 8], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 4, \\\"px\\\": [16, 2, 8, 4], \\\"py\\\": [14, 0, 11, 5], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [18, 14, 7, 7], \\\"ny\\\": [13, 14, 8, 6], \\\"nz\\\": [0, 0, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 9], \\\"py\\\": [2, 2], \\\"pz\\\": [0, 0], \\\"nx\\\": [5, 14], \\\"ny\\\": [4, 14], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 5], \\\"py\\\": [11, 20], \\\"pz\\\": [1, 0], \\\"nx\\\": [11, 4], \\\"ny\\\": [0, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [3, 4], \\\"pz\\\": [2, 2], \\\"nx\\\": [3, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [10, 4, 3], \\\"py\\\": [5, 5, 3], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [11, 3, 10], \\\"ny\\\": [2, 0, 2], \\\"nz\\\": [0, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [15, 15], \\\"py\\\": [1, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 4], \\\"ny\\\": [5, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 4, \\\"px\\\": [9, 5, 2, 6], \\\"py\\\": [22, 8, 4, 19], \\\"pz\\\": [0, 1, 2, 0], \\\"nx\\\": [9, 5, 0, 3], \\\"ny\\\": [20, 5, 22, 4], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [1, 4, 10], \\\"py\\\": [3, 9, 12], \\\"pz\\\": [2, 1, 0], \\\"nx\\\": [0, 10, 0], \\\"ny\\\": [0, 5, 0], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 6], \\\"py\\\": [0, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [20, 19], \\\"ny\\\": [14, 14], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [13, 4], \\\"py\\\": [14, 15], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 1], \\\"ny\\\": [5, 7], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [17, 7], \\\"py\\\": [9, 11], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [17, 9], \\\"py\\\": [12, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [15, 10], \\\"ny\\\": [9, 8], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [0, 1], \\\"pz\\\": [2, 2], \\\"nx\\\": [9, 7], \\\"ny\\\": [6, 17], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [3, 3, 15], \\\"py\\\": [3, 4, 6], \\\"pz\\\": [2, 1, 0], \\\"nx\\\": [0, 2, 22], \\\"ny\\\": [5, 8, 9], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [15, 15, 15, 1], \\\"py\\\": [12, 6, 6, 1], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [4, 7, 13, 4], \\\"ny\\\": [4, 7, 12, 2], \\\"nz\\\": [2, 1, 0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [3, 15], \\\"py\\\": [12, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 1], \\\"ny\\\": [14, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [12, 12], \\\"py\\\": [11, 12], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 5], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [23, 6, 7], \\\"py\\\": [23, 3, 4], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [19, 16, 17], \\\"ny\\\": [17, 14, 15], \\\"nz\\\": [0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 5], \\\"py\\\": [2, 7], \\\"pz\\\": [1, -1], \\\"nx\\\": [11, 23], \\\"ny\\\": [10, 18], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 3, \\\"px\\\": [0, 0, 0], \\\"py\\\": [4, 9, 2], \\\"pz\\\": [1, 0, 2], \\\"nx\\\": [2, 0, 0], \\\"ny\\\": [9, 2, 1], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 0], \\\"py\\\": [11, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 0], \\\"ny\\\": [18, 5], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [5, 4], \\\"py\\\": [10, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [10, 6], \\\"ny\\\": [10, 18], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 12], \\\"py\\\": [13, 13], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 11], \\\"ny\\\": [1, 3], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 19], \\\"py\\\": [5, 22], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 12], \\\"ny\\\": [1, 5], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 6], \\\"py\\\": [0, 0], \\\"pz\\\": [0, 0], \\\"nx\\\": [3, 12], \\\"ny\\\": [0, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 6], \\\"py\\\": [7, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [12, 12], \\\"ny\\\": [10, 11], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [3, 1, 3, 2], \\\"py\\\": [20, 9, 21, 19], \\\"pz\\\": [0, 1, 0, 0], \\\"nx\\\": [20, 20, 5, 12], \\\"ny\\\": [10, 15, 2, 10], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [3, 1], \\\"ny\\\": [4, 6], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [5, 11, 11], \\\"py\\\": [1, 3, 4], \\\"pz\\\": [2, 1, 1], \\\"nx\\\": [3, 3, 7], \\\"ny\\\": [5, 5, 0], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [8, 6, 7], \\\"py\\\": [10, 5, 6], \\\"pz\\\": [1, 1, 1], \\\"nx\\\": [23, 3, 7], \\\"ny\\\": [0, 5, 0], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 7], \\\"py\\\": [2, 14], \\\"pz\\\": [1, -1], \\\"nx\\\": [7, 3], \\\"ny\\\": [12, 4], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 3], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [13, 3], \\\"ny\\\": [12, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 18], \\\"py\\\": [11, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [23, 11], \\\"ny\\\": [19, 10], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 2], \\\"py\\\": [12, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [11, 5], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [0, 11], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 3], \\\"ny\\\": [19, 18], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 1], \\\"py\\\": [11, 11], \\\"pz\\\": [1, -1], \\\"nx\\\": [13, 15], \\\"ny\\\": [6, 5], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 8], \\\"py\\\": [9, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 11], \\\"ny\\\": [1, 3], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 4, \\\"px\\\": [6, 4, 8, 3], \\\"py\\\": [6, 2, 4, 3], \\\"pz\\\": [0, 2, 1, 2], \\\"nx\\\": [7, 0, 15, 8], \\\"ny\\\": [8, 8, 16, 7], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 3], \\\"py\\\": [22, 20], \\\"pz\\\": [0, 0], \\\"nx\\\": [2, 8], \\\"ny\\\": [5, 4], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 6], \\\"py\\\": [11, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [3, 1], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [12, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [3, 1], \\\"ny\\\": [23, 9], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 0], \\\"py\\\": [11, 5], \\\"pz\\\": [1, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [2, 3], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [8, 8], \\\"py\\\": [10, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 3], \\\"ny\\\": [5, 4], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [13, 3], \\\"py\\\": [2, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 3], \\\"ny\\\": [3, 5], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [1, 1], \\\"py\\\": [23, 22], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 0], \\\"ny\\\": [7, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 0], \\\"py\\\": [16, 15], \\\"pz\\\": [0, 0], \\\"nx\\\": [0, 14], \\\"ny\\\": [23, 12], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 8], \\\"py\\\": [22, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 3], \\\"ny\\\": [0, 1], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 13], \\\"py\\\": [7, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 2], \\\"ny\\\": [17, 10], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [20, 20], \\\"py\\\": [15, 16], \\\"pz\\\": [0, 0], \\\"nx\\\": [7, 3], \\\"ny\\\": [9, 17], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 12, 11, 13, 11], \\\"py\\\": [2, 2, 1, 2, 2], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [10, 18, 21, 21, 19], \\\"ny\\\": [3, 1, 13, 11, 2], \\\"nz\\\": [1, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [16, 3], \\\"py\\\": [6, 1], \\\"pz\\\": [0, 2], \\\"nx\\\": [15, 18], \\\"ny\\\": [8, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [19, 3], \\\"py\\\": [8, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 3], \\\"py\\\": [15, 18], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 3], \\\"ny\\\": [0, 1], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [2, 3], \\\"pz\\\": [2, 2], \\\"nx\\\": [7, 3], \\\"ny\\\": [11, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 10], \\\"py\\\": [17, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 10], \\\"ny\\\": [15, 15], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 10], \\\"py\\\": [2, 4], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 10], \\\"py\\\": [3, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 10], \\\"ny\\\": [2, 1], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [23, 11], \\\"py\\\": [13, 10], \\\"pz\\\": [0, 1], \\\"nx\\\": [14, 7], \\\"ny\\\": [5, 14], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 4], \\\"py\\\": [5, 4], \\\"pz\\\": [2, 2], \\\"nx\\\": [9, 8], \\\"ny\\\": [3, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [12, 4, 15], \\\"py\\\": [5, 4, 7], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [3, 4, 2], \\\"ny\\\": [7, 11, 5], \\\"nz\\\": [1, 1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 4], \\\"py\\\": [15, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 9], \\\"ny\\\": [7, 15], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 7], \\\"py\\\": [0, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [11, 11], \\\"ny\\\": [8, 7], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [1, 1, 1, 1, 1], \\\"py\\\": [11, 12, 10, 9, 9], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [4, 5, 8, 16, 11], \\\"ny\\\": [4, 3, 8, 8, 6], \\\"nz\\\": [1, 1, 0, 0, 0] }], \\\"alpha\\\": [-1.059083e+00, 1.059083e+00, -7.846122e-01, 7.846122e-01, -4.451160e-01, 4.451160e-01, -4.483277e-01, 4.483277e-01, -3.905999e-01, 3.905999e-01, -3.789250e-01, 3.789250e-01, -3.874610e-01, 3.874610e-01, -3.110541e-01, 3.110541e-01, -3.565056e-01, 3.565056e-01, -3.812617e-01, 3.812617e-01, -3.325142e-01, 3.325142e-01, -2.787282e-01, 2.787282e-01, -3.238869e-01, 3.238869e-01, -2.993499e-01, 2.993499e-01, -2.807737e-01, 2.807737e-01, -2.855285e-01, 2.855285e-01, -2.277550e-01, 2.277550e-01, -2.031261e-01, 2.031261e-01, -2.071574e-01, 2.071574e-01, -2.534142e-01, 2.534142e-01, -2.266871e-01, 2.266871e-01, -2.229078e-01, 2.229078e-01, -2.716325e-01, 2.716325e-01, -3.046938e-01, 3.046938e-01, -2.271601e-01, 2.271601e-01, -1.987651e-01, 1.987651e-01, -1.953664e-01, 1.953664e-01, -2.178737e-01, 2.178737e-01, -2.285148e-01, 2.285148e-01, -1.891073e-01, 1.891073e-01, -2.926469e-01, 2.926469e-01, -2.094783e-01, 2.094783e-01, -1.478037e-01, 1.478037e-01, -1.707579e-01, 1.707579e-01, -1.464390e-01, 1.464390e-01, -2.462321e-01, 2.462321e-01, -2.319978e-01, 2.319978e-01, -1.781651e-01, 1.781651e-01, -1.471349e-01, 1.471349e-01, -1.953006e-01, 1.953006e-01, -2.145108e-01, 2.145108e-01, -1.567881e-01, 1.567881e-01, -2.024617e-01, 2.024617e-01, -1.883198e-01, 1.883198e-01, -1.996976e-01, 1.996976e-01, -1.292330e-01, 1.292330e-01, -2.142242e-01, 2.142242e-01, -2.473748e-01, 2.473748e-01, -1.880902e-01, 1.880902e-01, -1.874572e-01, 1.874572e-01, -1.495984e-01, 1.495984e-01, -1.608525e-01, 1.608525e-01, -1.698402e-01, 1.698402e-01, -1.898871e-01, 1.898871e-01, -1.350238e-01, 1.350238e-01, -1.727032e-01, 1.727032e-01, -1.593352e-01, 1.593352e-01, -1.476968e-01, 1.476968e-01, -1.428431e-01, 1.428431e-01, -1.766261e-01, 1.766261e-01, -1.453226e-01, 1.453226e-01, -1.929885e-01, 1.929885e-01, -1.337582e-01, 1.337582e-01, -1.629078e-01, 1.629078e-01, -9.973085e-02, 9.973085e-02, -1.172760e-01, 1.172760e-01, -1.399242e-01, 1.399242e-01, -1.613189e-01, 1.613189e-01, -1.145695e-01, 1.145695e-01, -1.191093e-01, 1.191093e-01, -1.225900e-01, 1.225900e-01, -1.641114e-01, 1.641114e-01, -1.419878e-01, 1.419878e-01, -2.183465e-01, 2.183465e-01, -1.566968e-01, 1.566968e-01, -1.288216e-01, 1.288216e-01, -1.422831e-01, 1.422831e-01, -2.000107e-01, 2.000107e-01, -1.817265e-01, 1.817265e-01, -1.793796e-01, 1.793796e-01, -1.428926e-01, 1.428926e-01, -1.182032e-01, 1.182032e-01, -1.150421e-01, 1.150421e-01, -1.336584e-01, 1.336584e-01, -1.656178e-01, 1.656178e-01, -1.386549e-01, 1.386549e-01, -1.387461e-01, 1.387461e-01, -1.313023e-01, 1.313023e-01, -1.360391e-01, 1.360391e-01, -1.305505e-01, 1.305505e-01, -1.323399e-01, 1.323399e-01, -1.502891e-01, 1.502891e-01, -1.488859e-01, 1.488859e-01, -1.126628e-01, 1.126628e-01, -1.233623e-01, 1.233623e-01, -1.702106e-01, 1.702106e-01, -1.629639e-01, 1.629639e-01, -1.337706e-01, 1.337706e-01, -1.290384e-01, 1.290384e-01, -1.165519e-01, 1.165519e-01, -1.412778e-01, 1.412778e-01, -1.470204e-01, 1.470204e-01, -2.213780e-01, 2.213780e-01, -1.472619e-01, 1.472619e-01, -1.357071e-01, 1.357071e-01, -1.416513e-01, 1.416513e-01, -1.050208e-01, 1.050208e-01, -1.480033e-01, 1.480033e-01, -1.899871e-01, 1.899871e-01, -1.466249e-01, 1.466249e-01, -1.076952e-01, 1.076952e-01, -1.035096e-01, 1.035096e-01, -1.566970e-01, 1.566970e-01, -1.364115e-01, 1.364115e-01, -1.512889e-01, 1.512889e-01, -1.252851e-01, 1.252851e-01, -1.206300e-01, 1.206300e-01, -1.059134e-01, 1.059134e-01, -1.140398e-01, 1.140398e-01, -1.359912e-01, 1.359912e-01, -1.231201e-01, 1.231201e-01, -1.231867e-01, 1.231867e-01, -9.789923e-02, 9.789923e-02, -1.590213e-01, 1.590213e-01, -1.002206e-01, 1.002206e-01, -1.518339e-01, 1.518339e-01, -1.055203e-01, 1.055203e-01, -1.012579e-01, 1.012579e-01, -1.094956e-01, 1.094956e-01, -1.429592e-01, 1.429592e-01, -1.108838e-01, 1.108838e-01, -1.116475e-01, 1.116475e-01, -1.735371e-01, 1.735371e-01, -1.067758e-01, 1.067758e-01, -1.290406e-01, 1.290406e-01, -1.156822e-01, 1.156822e-01, -9.668217e-02, 9.668217e-02, -1.170053e-01, 1.170053e-01, -1.252092e-01, 1.252092e-01, -1.135158e-01, 1.135158e-01, -1.105896e-01, 1.105896e-01, -1.038175e-01, 1.038175e-01, -1.210459e-01, 1.210459e-01, -1.078878e-01, 1.078878e-01, -1.050808e-01, 1.050808e-01, -1.428227e-01, 1.428227e-01, -1.664600e-01, 1.664600e-01, -1.013508e-01, 1.013508e-01, -1.206930e-01, 1.206930e-01, -1.088972e-01, 1.088972e-01, -1.381026e-01, 1.381026e-01, -1.109115e-01, 1.109115e-01, -7.921549e-02, 7.921549e-02, -1.057832e-01, 1.057832e-01, -9.385827e-02, 9.385827e-02, -1.486035e-01, 1.486035e-01, -1.247401e-01, 1.247401e-01, -9.451327e-02, 9.451327e-02, -1.272805e-01, 1.272805e-01, -9.616206e-02, 9.616206e-02, -9.051084e-02, 9.051084e-02, -1.138458e-01, 1.138458e-01, -1.047581e-01, 1.047581e-01, -1.382394e-01, 1.382394e-01, -1.122203e-01, 1.122203e-01, -1.052936e-01, 1.052936e-01, -1.239318e-01, 1.239318e-01, -1.241439e-01, 1.241439e-01, -1.259012e-01, 1.259012e-01, -1.211701e-01, 1.211701e-01, -1.344131e-01, 1.344131e-01, -1.127778e-01, 1.127778e-01, -1.609745e-01, 1.609745e-01, -1.901382e-01, 1.901382e-01, -1.618962e-01, 1.618962e-01, -1.230398e-01, 1.230398e-01, -1.319311e-01, 1.319311e-01, -1.431410e-01, 1.431410e-01, -1.143306e-01, 1.143306e-01, -9.390938e-02, 9.390938e-02, -1.154161e-01, 1.154161e-01, -1.141205e-01, 1.141205e-01, -1.098048e-01, 1.098048e-01, -8.870072e-02, 8.870072e-02, -1.122444e-01, 1.122444e-01, -1.114147e-01, 1.114147e-01, -1.185710e-01, 1.185710e-01, -1.107775e-01, 1.107775e-01, -1.259167e-01, 1.259167e-01, -1.105176e-01, 1.105176e-01, -1.020691e-01, 1.020691e-01, -9.607863e-02, 9.607863e-02, -9.573700e-02, 9.573700e-02, -1.054349e-01, 1.054349e-01, -1.137856e-01, 1.137856e-01, -1.192043e-01, 1.192043e-01, -1.113264e-01, 1.113264e-01, -1.093137e-01, 1.093137e-01, -1.010919e-01, 1.010919e-01, -9.625901e-02, 9.625901e-02, -9.338459e-02, 9.338459e-02, -1.142944e-01, 1.142944e-01, -1.038877e-01, 1.038877e-01, -9.772862e-02, 9.772862e-02, -1.375298e-01, 1.375298e-01, -1.394776e-01, 1.394776e-01, -9.454765e-02, 9.454765e-02, -1.203246e-01, 1.203246e-01, -8.684943e-02, 8.684943e-02, -1.135622e-01, 1.135622e-01, -1.058181e-01, 1.058181e-01, -1.082152e-01, 1.082152e-01, -1.411355e-01, 1.411355e-01, -9.978846e-02, 9.978846e-02, -1.057874e-01, 1.057874e-01, -1.415366e-01, 1.415366e-01, -9.981014e-02, 9.981014e-02, -9.261151e-02, 9.261151e-02, -1.737173e-01, 1.737173e-01, -1.580335e-01, 1.580335e-01, -9.594668e-02, 9.594668e-02, -9.336013e-02, 9.336013e-02, -1.102373e-01, 1.102373e-01, -8.546557e-02, 8.546557e-02, -9.945057e-02, 9.945057e-02, -1.146358e-01, 1.146358e-01, -1.324734e-01, 1.324734e-01, -1.422296e-01, 1.422296e-01, -9.937990e-02, 9.937990e-02, -8.381049e-02, 8.381049e-02, -1.270714e-01, 1.270714e-01, -1.091738e-01, 1.091738e-01, -1.314881e-01, 1.314881e-01, -1.085159e-01, 1.085159e-01, -9.247554e-02, 9.247554e-02, -8.121645e-02, 8.121645e-02, -1.059589e-01, 1.059589e-01, -8.307793e-02, 8.307793e-02, -1.033103e-01, 1.033103e-01, -1.056706e-01, 1.056706e-01, -1.032803e-01, 1.032803e-01, -1.266840e-01, 1.266840e-01, -9.341601e-02, 9.341601e-02, -7.683570e-02, 7.683570e-02, -1.030530e-01, 1.030530e-01, -1.051872e-01, 1.051872e-01, -9.114946e-02, 9.114946e-02, -1.329341e-01, 1.329341e-01, -9.270830e-02, 9.270830e-02, -1.141750e-01, 1.141750e-01, -9.889318e-02, 9.889318e-02, -8.856485e-02, 8.856485e-02, -1.054210e-01, 1.054210e-01, -1.092704e-01, 1.092704e-01, -8.729085e-02, 8.729085e-02, -1.141057e-01, 1.141057e-01, -1.530774e-01, 1.530774e-01, -8.129720e-02, 8.129720e-02, -1.143335e-01, 1.143335e-01, -1.175777e-01, 1.175777e-01, -1.371729e-01, 1.371729e-01, -1.394356e-01, 1.394356e-01, -1.016308e-01, 1.016308e-01, -1.125547e-01, 1.125547e-01, -9.672600e-02, 9.672600e-02, -1.036631e-01, 1.036631e-01, -8.702514e-02, 8.702514e-02, -1.264807e-01, 1.264807e-01, -1.465688e-01, 1.465688e-01, -8.781464e-02, 8.781464e-02, -8.552605e-02, 8.552605e-02, -1.145072e-01, 1.145072e-01, -1.378489e-01, 1.378489e-01, -1.013312e-01, 1.013312e-01, -1.020083e-01, 1.020083e-01, -1.015816e-01, 1.015816e-01, -8.407101e-02, 8.407101e-02, -8.296485e-02, 8.296485e-02, -8.033655e-02, 8.033655e-02, -9.003615e-02, 9.003615e-02, -7.504954e-02, 7.504954e-02, -1.224941e-01, 1.224941e-01, -9.347814e-02, 9.347814e-02, -9.555575e-02, 9.555575e-02, -9.810025e-02, 9.810025e-02, -1.237068e-01, 1.237068e-01, -1.283586e-01, 1.283586e-01, -1.082763e-01, 1.082763e-01, -1.018145e-01, 1.018145e-01, -1.175161e-01, 1.175161e-01, -1.252279e-01, 1.252279e-01, -1.370559e-01, 1.370559e-01, -9.941339e-02, 9.941339e-02, -8.506938e-02, 8.506938e-02, -1.260902e-01, 1.260902e-01, -1.014152e-01, 1.014152e-01, -9.728694e-02, 9.728694e-02, -9.374910e-02, 9.374910e-02, -9.587429e-02, 9.587429e-02, -9.516036e-02, 9.516036e-02, -7.375173e-02, 7.375173e-02, -9.332487e-02, 9.332487e-02, -9.020733e-02, 9.020733e-02, -1.133381e-01, 1.133381e-01, -1.542180e-01, 1.542180e-01, -9.692168e-02, 9.692168e-02, -7.960904e-02, 7.960904e-02, -8.947089e-02, 8.947089e-02, -7.830286e-02, 7.830286e-02, -9.900050e-02, 9.900050e-02, -1.041293e-01, 1.041293e-01, -9.572501e-02, 9.572501e-02, -8.230575e-02, 8.230575e-02, -9.194901e-02, 9.194901e-02, -1.076971e-01, 1.076971e-01, -1.027782e-01, 1.027782e-01, -1.028538e-01, 1.028538e-01, -1.013992e-01, 1.013992e-01, -9.087585e-02, 9.087585e-02, -1.100706e-01, 1.100706e-01, -1.094934e-01, 1.094934e-01, -1.107879e-01, 1.107879e-01, -1.026915e-01, 1.026915e-01, -1.017572e-01, 1.017572e-01, -7.984776e-02, 7.984776e-02, -9.015413e-02, 9.015413e-02, -1.299870e-01, 1.299870e-01, -9.164982e-02, 9.164982e-02, -1.062788e-01, 1.062788e-01, -1.160203e-01, 1.160203e-01, -8.858603e-02, 8.858603e-02, -9.762964e-02, 9.762964e-02, -1.070694e-01, 1.070694e-01, -9.549046e-02, 9.549046e-02, -1.533034e-01, 1.533034e-01, -8.663316e-02, 8.663316e-02, -9.303018e-02, 9.303018e-02, -9.853582e-02, 9.853582e-02, -9.733371e-02, 9.733371e-02, -1.048555e-01, 1.048555e-01, -9.056041e-02, 9.056041e-02, -7.552283e-02, 7.552283e-02, -8.780631e-02, 8.780631e-02, -1.123953e-01, 1.123953e-01, -1.452948e-01, 1.452948e-01, -1.156423e-01, 1.156423e-01, -8.701142e-02, 8.701142e-02, -9.713334e-02, 9.713334e-02, -9.970888e-02, 9.970888e-02, -8.614129e-02, 8.614129e-02, -7.459861e-02, 7.459861e-02, -9.253517e-02, 9.253517e-02, -9.570092e-02, 9.570092e-02, -9.485535e-02, 9.485535e-02, -1.148365e-01, 1.148365e-01, -1.063193e-01, 1.063193e-01, -9.986686e-02, 9.986686e-02, -7.523412e-02, 7.523412e-02, -1.005881e-01, 1.005881e-01, -8.249716e-02, 8.249716e-02, -1.055866e-01, 1.055866e-01, -1.343050e-01, 1.343050e-01, -1.371056e-01, 1.371056e-01, -9.604689e-02, 9.604689e-02, -1.224268e-01, 1.224268e-01, -9.211478e-02, 9.211478e-02, -1.108371e-01, 1.108371e-01, -1.100547e-01, 1.100547e-01, -8.938970e-02, 8.938970e-02, -8.655951e-02, 8.655951e-02, -7.085816e-02, 7.085816e-02, -8.101028e-02, 8.101028e-02, -8.338046e-02, 8.338046e-02, -8.309588e-02, 8.309588e-02, -9.090584e-02, 9.090584e-02, -8.124564e-02, 8.124564e-02, -9.367843e-02, 9.367843e-02, -1.011747e-01, 1.011747e-01, -9.885045e-02, 9.885045e-02, -8.944266e-02, 8.944266e-02, -8.453859e-02, 8.453859e-02, -8.308847e-02, 8.308847e-02, -1.367280e-01, 1.367280e-01, -1.295144e-01, 1.295144e-01, -1.063965e-01, 1.063965e-01, -7.752328e-02, 7.752328e-02, -9.681524e-02, 9.681524e-02, -7.862345e-02, 7.862345e-02, -8.767746e-02, 8.767746e-02, -9.198041e-02, 9.198041e-02, -9.686489e-02, 9.686489e-02] }, { \\\"count\\\": 564, \\\"threshold\\\": -4.517456e+00, \\\"feature\\\": [{ \\\"size\\\": 5, \\\"px\\\": [15, 9, 8, 12, 11], \\\"py\\\": [3, 6, 3, 0, 8], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [6, 14, 9, 22, 23], \\\"ny\\\": [8, 7, 8, 17, 3], \\\"nz\\\": [1, 0, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [12, 13, 11, 14, 12], \\\"py\\\": [9, 4, 4, 4, 5], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [4, 6, 10, 4, 15], \\\"ny\\\": [3, 8, 7, 10, 9], \\\"nz\\\": [1, 1, 0, 1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [7, 5, 6, 8, 8], \\\"py\\\": [2, 13, 2, 1, 1], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [3, 0, 4, 1, 0], \\\"ny\\\": [4, 3, 10, 3, 13], \\\"nz\\\": [1, 1, 1, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [11, 2, 2, 11, 16], \\\"py\\\": [9, 4, 2, 7, 11], \\\"pz\\\": [0, 2, 2, 0, 0], \\\"nx\\\": [8, 4, 1, 14, 0], \\\"ny\\\": [4, 4, 16, 5, 13], \\\"nz\\\": [1, 1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 14], \\\"py\\\": [18, 18], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 13], \\\"ny\\\": [10, 16], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [15, 17, 16, 8, 18], \\\"py\\\": [1, 2, 1, 0, 2], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [21, 22, 22, 22, 22], \\\"ny\\\": [1, 5, 3, 4, 2], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 4], \\\"py\\\": [23, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [7, 3], \\\"ny\\\": [10, 6], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 6, 4, 3, 11], \\\"py\\\": [10, 11, 8, 3, 8], \\\"pz\\\": [1, 0, 1, 1, 0], \\\"nx\\\": [3, 5, 6, 3, 0], \\\"ny\\\": [4, 9, 9, 9, 0], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [11, 11, 2], \\\"py\\\": [11, 13, 16], \\\"pz\\\": [0, 0, -1], \\\"nx\\\": [10, 10, 9], \\\"ny\\\": [10, 11, 14], \\\"nz\\\": [0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 4], \\\"py\\\": [12, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [4, 5], \\\"ny\\\": [11, 11], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 11, 13, 3, 12], \\\"py\\\": [3, 4, 3, 0, 1], \\\"pz\\\": [0, 0, 0, 2, 0], \\\"nx\\\": [14, 18, 20, 19, 15], \\\"ny\\\": [13, 1, 15, 2, 18], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [20, 14, 10, 12, 12], \\\"py\\\": [12, 12, 4, 10, 11], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [9, 2, 9, 9, 9], \\\"ny\\\": [4, 12, 5, 9, 14], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 3, 3, 4, 2], \\\"py\\\": [15, 16, 14, 21, 12], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [0, 0, 0, 0, 0], \\\"ny\\\": [20, 10, 5, 21, 21], \\\"nz\\\": [0, 1, 2, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 8], \\\"py\\\": [16, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [14, 0], \\\"ny\\\": [8, 10], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [12, 4, 16, 1], \\\"py\\\": [14, 3, 8, 3], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [14, 10, 20, 13], \\\"ny\\\": [13, 5, 16, 9], \\\"nz\\\": [0, 1, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [3, 8, 2, 3, 3], \\\"py\\\": [7, 2, 1, 2, 4], \\\"pz\\\": [1, -1, -1, -1, -1], \\\"nx\\\": [1, 9, 2, 1, 1], \\\"ny\\\": [3, 14, 9, 7, 2], \\\"nz\\\": [1, 0, 1, 1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 1, 3, 2, 3], \\\"py\\\": [2, 1, 2, 4, 3], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [0, 0, 0, 0, 0], \\\"ny\\\": [3, 1, 2, 0, 0], \\\"nz\\\": [0, 1, 0, 2, -1] }, { \\\"size\\\": 4, \\\"px\\\": [4, 8, 7, 9], \\\"py\\\": [6, 11, 11, 10], \\\"pz\\\": [1, 0, 0, 0], \\\"nx\\\": [3, 10, 2, 20], \\\"ny\\\": [4, 4, 4, 8], \\\"nz\\\": [1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 8], \\\"py\\\": [3, 11], \\\"pz\\\": [2, -1], \\\"nx\\\": [8, 2], \\\"ny\\\": [15, 5], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [17, 0], \\\"py\\\": [13, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [14, 14], \\\"ny\\\": [11, 10], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [22, 22, 22, 5, 22], \\\"py\\\": [16, 18, 17, 2, 15], \\\"pz\\\": [0, 0, 0, 2, 0], \\\"nx\\\": [8, 4, 15, 6, 6], \\\"ny\\\": [4, 2, 7, 11, 11], \\\"nz\\\": [1, 2, 0, 1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [16, 9, 8, 17, 15], \\\"py\\\": [12, 6, 6, 22, 12], \\\"pz\\\": [0, 1, 1, 0, 0], \\\"nx\\\": [11, 23, 23, 23, 22], \\\"ny\\\": [11, 23, 22, 21, 23], \\\"nz\\\": [1, 0, 0, 0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [5, 2, 4, 4, 9], \\\"py\\\": [22, 3, 15, 20, 18], \\\"pz\\\": [0, 2, 0, 0, 0], \\\"nx\\\": [9, 4, 23, 7, 22], \\\"ny\\\": [8, 4, 22, 19, 23], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 6, 9, 7, 3], \\\"py\\\": [3, 3, 3, 3, 1], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [5, 5, 4, 4, 4], \\\"ny\\\": [0, 1, 1, 2, 0], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 3], \\\"py\\\": [3, 3], \\\"pz\\\": [2, 2], \\\"nx\\\": [3, 6], \\\"ny\\\": [4, 6], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [1, 1, 0, 1, 0], \\\"py\\\": [17, 15, 6, 16, 10], \\\"pz\\\": [0, 0, 1, 0, 0], \\\"nx\\\": [4, 4, 7, 4, 8], \\\"ny\\\": [2, 5, 9, 4, 4], \\\"nz\\\": [2, 2, 1, 2, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 12, 13, 13], \\\"py\\\": [10, 9, 11, 13, 13], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [4, 3, 3, 5, 3], \\\"ny\\\": [21, 18, 17, 23, 16], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 4, \\\"px\\\": [5, 6, 5, 9], \\\"py\\\": [13, 7, 9, 23], \\\"pz\\\": [0, 0, 1, 0], \\\"nx\\\": [6, 15, 7, 5], \\\"ny\\\": [9, 20, 7, 23], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [4, 2], \\\"pz\\\": [1, 2], \\\"nx\\\": [8, 23], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 7], \\\"py\\\": [18, 0], \\\"pz\\\": [0, 0], \\\"nx\\\": [5, 7], \\\"ny\\\": [8, 10], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 6], \\\"py\\\": [11, 16], \\\"pz\\\": [1, 0], \\\"nx\\\": [10, 9], \\\"ny\\\": [16, 7], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 11, 11, 11], \\\"py\\\": [11, 10, 12, 13], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [13, 13, 13, 9], \\\"ny\\\": [11, 9, 10, 4], \\\"nz\\\": [0, 0, 0, 1] }, { \\\"size\\\": 4, \\\"px\\\": [12, 6, 7, 6], \\\"py\\\": [7, 11, 8, 4], \\\"pz\\\": [0, 1, 1, 1], \\\"nx\\\": [10, 0, 19, 7], \\\"ny\\\": [21, 3, 12, 11], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 4], \\\"py\\\": [3, 4], \\\"pz\\\": [2, 2], \\\"nx\\\": [9, 1], \\\"ny\\\": [4, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [19, 19], \\\"py\\\": [21, 20], \\\"pz\\\": [0, 0], \\\"nx\\\": [7, 7], \\\"ny\\\": [3, 13], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 9, 13, 11, 5], \\\"py\\\": [0, 2, 2, 0, 0], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [6, 4, 5, 5, 5], \\\"ny\\\": [1, 3, 5, 2, 6], \\\"nz\\\": [0, 0, 1, 0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 3, 2, 5, 7], \\\"py\\\": [11, 3, 3, 7, 17], \\\"pz\\\": [1, 2, 2, 0, 0], \\\"nx\\\": [23, 5, 11, 5, 5], \\\"ny\\\": [0, 4, 10, 2, 6], \\\"nz\\\": [0, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [20, 17], \\\"py\\\": [12, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [20, 19], \\\"ny\\\": [21, 23], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 1], \\\"py\\\": [12, 8], \\\"pz\\\": [0, 0], \\\"nx\\\": [2, 8], \\\"ny\\\": [2, 16], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 5], \\\"py\\\": [4, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 8], \\\"ny\\\": [9, 1], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [0, 1], \\\"pz\\\": [1, 1], \\\"nx\\\": [1, 8], \\\"ny\\\": [5, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 1], \\\"py\\\": [12, 10], \\\"pz\\\": [0, 1], \\\"nx\\\": [2, 20], \\\"ny\\\": [23, 9], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 0, 0, 2], \\\"py\\\": [14, 3, 9, 22], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [13, 14, 7, 3], \\\"ny\\\": [6, 7, 11, 1], \\\"nz\\\": [0, 0, 0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [14, 0], \\\"py\\\": [2, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 4], \\\"ny\\\": [4, 3], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [23, 11], \\\"py\\\": [18, 11], \\\"pz\\\": [0, 1], \\\"nx\\\": [3, 2], \\\"ny\\\": [1, 21], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 9], \\\"py\\\": [17, 14], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 5], \\\"ny\\\": [10, 8], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 18], \\\"py\\\": [7, 14], \\\"pz\\\": [1, 0], \\\"nx\\\": [18, 9], \\\"ny\\\": [17, 8], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 8], \\\"py\\\": [4, 22], \\\"pz\\\": [2, 0], \\\"nx\\\": [4, 3], \\\"ny\\\": [10, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 22], \\\"py\\\": [4, 9], \\\"pz\\\": [2, -1], \\\"nx\\\": [11, 23], \\\"ny\\\": [8, 14], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 3, \\\"px\\\": [23, 5, 5], \\\"py\\\": [8, 2, 1], \\\"pz\\\": [0, 2, 2], \\\"nx\\\": [10, 10, 2], \\\"ny\\\": [4, 4, 2], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [14, 23], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 11], \\\"ny\\\": [4, 13], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 2], \\\"py\\\": [7, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 3], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 1], \\\"py\\\": [19, 13], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 12], \\\"ny\\\": [10, 18], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 10], \\\"py\\\": [11, 10], \\\"pz\\\": [1, 1], \\\"nx\\\": [4, 1], \\\"ny\\\": [5, 11], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 5, \\\"px\\\": [9, 12, 4, 8, 8], \\\"py\\\": [3, 5, 2, 9, 8], \\\"pz\\\": [1, 0, 2, 1, 1], \\\"nx\\\": [23, 23, 23, 23, 23], \\\"ny\\\": [3, 4, 6, 5, 5], \\\"nz\\\": [0, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [3, 9], \\\"ny\\\": [4, 6], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [13, 13, 13, 7, 7], \\\"py\\\": [11, 10, 9, 6, 6], \\\"pz\\\": [0, 0, 0, 1, -1], \\\"nx\\\": [5, 5, 15, 5, 2], \\\"ny\\\": [5, 15, 9, 9, 1], \\\"nz\\\": [0, 0, 0, 1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [19, 7], \\\"py\\\": [21, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [14, 10], \\\"ny\\\": [15, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 5], \\\"py\\\": [3, 4], \\\"pz\\\": [2, 2], \\\"nx\\\": [21, 0], \\\"ny\\\": [23, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 0], \\\"py\\\": [0, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 2], \\\"ny\\\": [1, 2], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 0], \\\"py\\\": [4, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 12], \\\"ny\\\": [0, 1], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 5, \\\"px\\\": [14, 16, 12, 15, 13], \\\"py\\\": [0, 1, 0, 0, 0], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [4, 8, 8, 4, 9], \\\"ny\\\": [2, 3, 4, 1, 3], \\\"nz\\\": [2, 1, 1, 2, -1] }, { \\\"size\\\": 3, \\\"px\\\": [4, 17, 2], \\\"py\\\": [11, 14, 1], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [9, 8, 17], \\\"ny\\\": [1, 4, 0], \\\"nz\\\": [1, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [18, 9], \\\"py\\\": [17, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [3, 0], \\\"pz\\\": [1, 2], \\\"nx\\\": [10, 11], \\\"ny\\\": [6, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [21, 21, 21, 21, 20], \\\"py\\\": [17, 16, 19, 18, 21], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [0, 0, 0, 0, 0], \\\"ny\\\": [4, 9, 11, 6, 6], \\\"nz\\\": [1, 0, 0, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 0], \\\"py\\\": [7, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 11], \\\"ny\\\": [4, 17], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 4, \\\"px\\\": [13, 0, 0, 0], \\\"py\\\": [15, 0, 0, 0], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [3, 7, 4, 6], \\\"ny\\\": [2, 7, 5, 9], \\\"nz\\\": [2, 1, 2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 9], \\\"py\\\": [3, 12], \\\"pz\\\": [2, 0], \\\"nx\\\": [2, 0], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 3], \\\"py\\\": [6, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [20, 21], \\\"ny\\\": [19, 14], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [5, 22, 22, 11, 22], \\\"py\\\": [1, 4, 3, 3, 2], \\\"pz\\\": [2, 0, 0, 1, -1], \\\"nx\\\": [7, 13, 14, 8, 15], \\\"ny\\\": [3, 6, 6, 3, 7], \\\"nz\\\": [1, 0, 0, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 19], \\\"py\\\": [5, 15], \\\"pz\\\": [0, -1], \\\"nx\\\": [16, 4], \\\"ny\\\": [8, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [1, 0], \\\"py\\\": [11, 9], \\\"pz\\\": [1, 1], \\\"nx\\\": [5, 0], \\\"ny\\\": [3, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [8, 3, 4, 2], \\\"py\\\": [6, 7, 5, 3], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [13, 14, 11, 11], \\\"ny\\\": [11, 13, 3, 5], \\\"nz\\\": [0, 0, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [5, 6], \\\"pz\\\": [0, 0], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 9], \\\"py\\\": [6, 17], \\\"pz\\\": [1, 0], \\\"nx\\\": [9, 4], \\\"ny\\\": [15, 11], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [6, 3, 6], \\\"py\\\": [6, 3, 5], \\\"pz\\\": [1, 2, 1], \\\"nx\\\": [11, 10, 4], \\\"ny\\\": [8, 11, 5], \\\"nz\\\": [0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 16], \\\"py\\\": [0, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [19, 17], \\\"ny\\\": [1, 0], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [21, 20], \\\"py\\\": [4, 1], \\\"pz\\\": [0, 0], \\\"nx\\\": [11, 5], \\\"ny\\\": [0, 0], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [8, 4], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [8, 9], \\\"ny\\\": [4, 10], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 1], \\\"py\\\": [0, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [13, 12], \\\"ny\\\": [6, 5], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 4], \\\"py\\\": [3, 11], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 17], \\\"ny\\\": [1, 3], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 13], \\\"py\\\": [4, 4], \\\"pz\\\": [0, 0], \\\"nx\\\": [3, 3], \\\"ny\\\": [1, 1], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 18], \\\"py\\\": [2, 7], \\\"pz\\\": [2, 0], \\\"nx\\\": [8, 1], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 6], \\\"py\\\": [8, 2], \\\"pz\\\": [0, 1], \\\"nx\\\": [8, 9], \\\"ny\\\": [4, 19], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [12, 3, 14], \\\"py\\\": [13, 3, 15], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [0, 1, 0], \\\"ny\\\": [16, 18, 15], \\\"nz\\\": [0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 1], \\\"py\\\": [3, 4], \\\"pz\\\": [2, -1], \\\"nx\\\": [7, 14], \\\"ny\\\": [10, 14], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 16], \\\"py\\\": [6, 10], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 11], \\\"py\\\": [4, 4], \\\"pz\\\": [0, 0], \\\"nx\\\": [7, 23], \\\"ny\\\": [3, 11], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [2, 4, 3, 4, 4], \\\"py\\\": [1, 2, 0, 1, 1], \\\"pz\\\": [1, 0, 1, 0, -1], \\\"nx\\\": [11, 9, 4, 9, 5], \\\"ny\\\": [6, 5, 3, 6, 3], \\\"nz\\\": [0, 0, 1, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 0], \\\"py\\\": [14, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 5], \\\"ny\\\": [2, 9], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 7], \\\"py\\\": [7, 12], \\\"pz\\\": [0, 0], \\\"nx\\\": [3, 22], \\\"ny\\\": [3, 16], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 4], \\\"py\\\": [1, 1], \\\"pz\\\": [0, 1], \\\"nx\\\": [2, 6], \\\"ny\\\": [2, 21], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 1], \\\"py\\\": [11, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [12, 6], \\\"ny\\\": [5, 2], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 5, \\\"px\\\": [10, 5, 11, 10, 10], \\\"py\\\": [4, 3, 4, 6, 5], \\\"pz\\\": [0, 1, 0, 0, 0], \\\"nx\\\": [4, 7, 13, 8, 4], \\\"ny\\\": [2, 8, 9, 4, 4], \\\"nz\\\": [2, 1, 0, 1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [7, 8, 7, 8], \\\"py\\\": [11, 3, 4, 7], \\\"pz\\\": [1, 1, 1, 1], \\\"nx\\\": [0, 7, 3, 8], \\\"ny\\\": [0, 12, 2, 4], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [4, 7], \\\"pz\\\": [2, 1], \\\"nx\\\": [10, 1], \\\"ny\\\": [7, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 5], \\\"py\\\": [19, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 5], \\\"ny\\\": [17, 10], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 12], \\\"py\\\": [4, 4], \\\"pz\\\": [0, 0], \\\"nx\\\": [7, 5], \\\"ny\\\": [8, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [4, 8, 4], \\\"py\\\": [2, 9, 4], \\\"pz\\\": [2, 1, 2], \\\"nx\\\": [3, 19, 3], \\\"ny\\\": [1, 16, 5], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 7], \\\"py\\\": [0, 1], \\\"pz\\\": [1, 0], \\\"nx\\\": [2, 3], \\\"ny\\\": [15, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 4], \\\"py\\\": [2, 0], \\\"pz\\\": [2, -1], \\\"nx\\\": [9, 16], \\\"ny\\\": [5, 11], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [14, 15], \\\"py\\\": [23, 16], \\\"pz\\\": [0, 0], \\\"nx\\\": [13, 3], \\\"ny\\\": [15, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 3], \\\"py\\\": [0, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 7], \\\"ny\\\": [0, 0], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [7, 6], \\\"py\\\": [12, 12], \\\"pz\\\": [0, 0], \\\"nx\\\": [4, 8], \\\"ny\\\": [5, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 1, 2, 4, 5], \\\"py\\\": [1, 0, 0, 0, 6], \\\"pz\\\": [0, 2, 1, 0, 1], \\\"nx\\\": [4, 8, 7, 8, 6], \\\"ny\\\": [4, 10, 11, 4, 4], \\\"nz\\\": [1, 0, 0, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 12], \\\"py\\\": [15, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 15], \\\"ny\\\": [16, 14], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 8], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [4, 6], \\\"ny\\\": [2, 8], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 4], \\\"py\\\": [19, 23], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 14], \\\"ny\\\": [11, 18], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 2], \\\"py\\\": [7, 4], \\\"pz\\\": [1, 2], \\\"nx\\\": [2, 22], \\\"ny\\\": [5, 19], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 15], \\\"py\\\": [7, 17], \\\"pz\\\": [1, 0], \\\"nx\\\": [14, 4], \\\"ny\\\": [15, 5], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [10, 11], \\\"py\\\": [9, 8], \\\"pz\\\": [1, -1], \\\"nx\\\": [23, 5], \\\"ny\\\": [19, 4], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 1], \\\"py\\\": [7, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 4], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 7], \\\"py\\\": [6, 9], \\\"pz\\\": [0, 0], \\\"nx\\\": [4, 11], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 4], \\\"py\\\": [0, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 2], \\\"ny\\\": [0, 4], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 22], \\\"py\\\": [5, 20], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [1, 2], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 3, \\\"px\\\": [23, 11, 11], \\\"py\\\": [17, 9, 8], \\\"pz\\\": [0, 1, 1], \\\"nx\\\": [13, 8, 8], \\\"ny\\\": [5, 3, 3], \\\"nz\\\": [0, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 9], \\\"py\\\": [0, 21], \\\"pz\\\": [0, -1], \\\"nx\\\": [10, 10], \\\"ny\\\": [2, 1], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 10, 11, 11, 11], \\\"py\\\": [11, 13, 10, 12, 12], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [11, 13, 12, 3, 8], \\\"ny\\\": [5, 5, 5, 1, 10], \\\"nz\\\": [0, 0, 0, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [7, 8], \\\"py\\\": [11, 11], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 16], \\\"ny\\\": [9, 19], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 18], \\\"py\\\": [23, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [21, 21], \\\"ny\\\": [7, 13], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 8], \\\"py\\\": [7, 8], \\\"pz\\\": [1, 1], \\\"nx\\\": [5, 21], \\\"ny\\\": [9, 13], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 8], \\\"py\\\": [22, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [5, 10], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [2, 5, 8, 8, 4], \\\"py\\\": [3, 9, 13, 23, 7], \\\"pz\\\": [2, 1, 0, 0, 1], \\\"nx\\\": [9, 17, 18, 19, 20], \\\"ny\\\": [0, 0, 0, 2, 3], \\\"nz\\\": [1, 0, 0, 0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [16, 15, 2], \\\"py\\\": [3, 3, 13], \\\"pz\\\": [0, 0, -1], \\\"nx\\\": [4, 8, 4], \\\"ny\\\": [3, 6, 2], \\\"nz\\\": [2, 1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [4, 7], \\\"py\\\": [3, 7], \\\"pz\\\": [2, 1], \\\"nx\\\": [15, 1], \\\"ny\\\": [15, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [2, 3], \\\"pz\\\": [2, 1], \\\"nx\\\": [3, 18], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [2, 4], \\\"pz\\\": [2, 1], \\\"nx\\\": [3, 0], \\\"ny\\\": [5, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 0], \\\"py\\\": [10, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 4], \\\"ny\\\": [2, 0], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [2, 0], \\\"py\\\": [8, 3], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [4, 14], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [13, 18], \\\"py\\\": [14, 14], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 1], \\\"ny\\\": [15, 13], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [3, 2, 2], \\\"py\\\": [17, 10, 15], \\\"pz\\\": [0, 1, 0], \\\"nx\\\": [13, 2, 7], \\\"ny\\\": [19, 11, 0], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 17], \\\"py\\\": [0, 2], \\\"pz\\\": [2, 0], \\\"nx\\\": [8, 5], \\\"ny\\\": [11, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 21], \\\"py\\\": [5, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [15, 10], \\\"ny\\\": [3, 0], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 3], \\\"py\\\": [13, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 22], \\\"py\\\": [3, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 2], \\\"ny\\\": [2, 3], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 4, \\\"px\\\": [6, 2, 6, 5], \\\"py\\\": [21, 10, 22, 20], \\\"pz\\\": [0, 1, 0, 0], \\\"nx\\\": [2, 3, 4, 4], \\\"ny\\\": [11, 21, 23, 23], \\\"nz\\\": [1, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 2], \\\"py\\\": [6, 8], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 4, \\\"px\\\": [11, 11, 5, 11], \\\"py\\\": [6, 5, 2, 4], \\\"pz\\\": [1, 1, 2, 1], \\\"nx\\\": [13, 7, 8, 3], \\\"ny\\\": [7, 3, 5, 2], \\\"nz\\\": [0, 1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [7, 8], \\\"pz\\\": [1, 0], \\\"nx\\\": [3, 11], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [16, 1, 5], \\\"py\\\": [3, 3, 11], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [16, 4, 8], \\\"ny\\\": [2, 0, 1], \\\"nz\\\": [0, 2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 0], \\\"py\\\": [8, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [19, 18], \\\"ny\\\": [20, 23], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [17, 4], \\\"py\\\": [10, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 14], \\\"ny\\\": [2, 9], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 5, \\\"px\\\": [11, 12, 9, 10, 11], \\\"py\\\": [2, 3, 2, 2, 3], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [6, 4, 2, 2, 2], \\\"ny\\\": [18, 9, 3, 2, 2], \\\"nz\\\": [0, 1, 2, 2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 1], \\\"py\\\": [6, 16], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 16], \\\"ny\\\": [5, 16], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [2, 3], \\\"pz\\\": [2, 2], \\\"nx\\\": [8, 17], \\\"ny\\\": [4, 9], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [2, 5, 2], \\\"py\\\": [5, 6, 4], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [0, 0, 0], \\\"ny\\\": [3, 5, 6], \\\"nz\\\": [2, 1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [0, 0, 0, 0, 0], \\\"py\\\": [6, 15, 16, 13, 14], \\\"pz\\\": [1, 0, 0, 0, 0], \\\"nx\\\": [4, 5, 8, 6, 8], \\\"ny\\\": [4, 16, 8, 15, 4], \\\"nz\\\": [1, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 2], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [3, 5], \\\"ny\\\": [4, 16], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [21, 19, 21, 21, 21], \\\"py\\\": [17, 23, 18, 19, 20], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [5, 2, 3, 6, 6], \\\"ny\\\": [12, 5, 5, 12, 12], \\\"nz\\\": [0, 1, 1, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 2], \\\"py\\\": [11, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [5, 11], \\\"ny\\\": [3, 5], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 5], \\\"py\\\": [5, 3], \\\"pz\\\": [0, 1], \\\"nx\\\": [6, 15], \\\"ny\\\": [11, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 2], \\\"py\\\": [4, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 3], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [10, 6], \\\"py\\\": [20, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 10], \\\"ny\\\": [11, 17], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 4, \\\"px\\\": [8, 4, 7, 11], \\\"py\\\": [7, 4, 5, 8], \\\"pz\\\": [1, 2, 1, 0], \\\"nx\\\": [13, 10, 5, 21], \\\"ny\\\": [9, 3, 5, 4], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 13], \\\"py\\\": [10, 7], \\\"pz\\\": [0, 0], \\\"nx\\\": [10, 8], \\\"ny\\\": [9, 18], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [1, 0], \\\"pz\\\": [2, 2], \\\"nx\\\": [8, 5], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [5, 2, 5, 8, 4], \\\"py\\\": [8, 4, 14, 23, 7], \\\"pz\\\": [1, 2, 0, 0, 1], \\\"nx\\\": [18, 4, 16, 17, 17], \\\"ny\\\": [1, 0, 0, 1, 1], \\\"nz\\\": [0, 2, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 2], \\\"py\\\": [2, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 8], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 1], \\\"py\\\": [8, 15], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 3], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 1], \\\"py\\\": [7, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [6, 6], \\\"ny\\\": [9, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 1], \\\"py\\\": [6, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [1, 10], \\\"ny\\\": [16, 12], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 4], \\\"py\\\": [7, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 9], \\\"ny\\\": [8, 10], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 8, 7, 6, 6], \\\"py\\\": [0, 0, 0, 1, 1], \\\"pz\\\": [1, 0, 0, 0, -1], \\\"nx\\\": [11, 5, 8, 4, 10], \\\"ny\\\": [5, 3, 4, 4, 5], \\\"nz\\\": [0, 1, 1, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 6], \\\"py\\\": [8, 5], \\\"pz\\\": [0, 0], \\\"nx\\\": [6, 6], \\\"ny\\\": [8, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 5], \\\"py\\\": [19, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 21], \\\"ny\\\": [5, 19], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 5], \\\"py\\\": [13, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [2, 2], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 4], \\\"py\\\": [17, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [10, 2], \\\"ny\\\": [15, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [13, 13, 19], \\\"py\\\": [11, 12, 8], \\\"pz\\\": [0, 0, -1], \\\"nx\\\": [12, 3, 8], \\\"ny\\\": [4, 1, 4], \\\"nz\\\": [0, 2, 1] }, { \\\"size\\\": 3, \\\"px\\\": [11, 7, 4], \\\"py\\\": [5, 2, 1], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [9, 2, 4], \\\"ny\\\": [11, 3, 6], \\\"nz\\\": [0, 2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 7], \\\"py\\\": [15, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 4], \\\"ny\\\": [0, 1], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 5, \\\"px\\\": [8, 9, 16, 18, 18], \\\"py\\\": [0, 1, 1, 1, 1], \\\"pz\\\": [1, 1, 0, 0, -1], \\\"nx\\\": [5, 5, 6, 4, 4], \\\"ny\\\": [21, 20, 23, 17, 18], \\\"nz\\\": [0, 0, 0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 7], \\\"py\\\": [1, 1], \\\"pz\\\": [1, 1], \\\"nx\\\": [20, 19], \\\"ny\\\": [2, 1], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [10, 11], \\\"pz\\\": [1, 1], \\\"nx\\\": [3, 3], \\\"ny\\\": [10, 10], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 5], \\\"py\\\": [23, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 3], \\\"ny\\\": [10, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 10], \\\"py\\\": [4, 7], \\\"pz\\\": [2, -1], \\\"nx\\\": [4, 3], \\\"ny\\\": [23, 21], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 21], \\\"py\\\": [11, 18], \\\"pz\\\": [1, 0], \\\"nx\\\": [10, 4], \\\"ny\\\": [18, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 23], \\\"py\\\": [11, 15], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 11], \\\"ny\\\": [7, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 1], \\\"py\\\": [7, 7], \\\"pz\\\": [1, -1], \\\"nx\\\": [15, 4], \\\"ny\\\": [14, 4], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [1, 2], \\\"py\\\": [9, 20], \\\"pz\\\": [1, 0], \\\"nx\\\": [21, 3], \\\"ny\\\": [12, 20], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 4], \\\"py\\\": [0, 0], \\\"pz\\\": [1, 2], \\\"nx\\\": [4, 2], \\\"ny\\\": [0, 19], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [3, 0], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 1], \\\"py\\\": [5, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [12, 10], \\\"ny\\\": [11, 4], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 12], \\\"py\\\": [11, 14], \\\"pz\\\": [1, -1], \\\"nx\\\": [18, 16], \\\"ny\\\": [21, 15], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 18], \\\"py\\\": [1, 5], \\\"pz\\\": [2, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 10], \\\"py\\\": [18, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 6], \\\"ny\\\": [0, 0], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [19, 2], \\\"py\\\": [1, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [22, 22], \\\"ny\\\": [13, 15], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [13, 15, 20], \\\"py\\\": [14, 21, 10], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [15, 7, 7], \\\"ny\\\": [13, 6, 8], \\\"nz\\\": [0, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 9], \\\"py\\\": [6, 7], \\\"pz\\\": [1, 1], \\\"nx\\\": [8, 7], \\\"ny\\\": [4, 8], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [5, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [5, 10], \\\"ny\\\": [2, 9], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 11], \\\"py\\\": [7, 16], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 0], \\\"ny\\\": [17, 4], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [14, 18], \\\"py\\\": [17, 18], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 14], \\\"ny\\\": [10, 16], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 11], \\\"py\\\": [13, 11], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 9], \\\"ny\\\": [12, 9], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 9], \\\"py\\\": [2, 2], \\\"pz\\\": [0, 0], \\\"nx\\\": [3, 3], \\\"ny\\\": [2, 2], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 3, \\\"px\\\": [21, 21, 21], \\\"py\\\": [14, 16, 15], \\\"pz\\\": [0, 0, 0], \\\"nx\\\": [14, 12, 0], \\\"ny\\\": [5, 12, 6], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 21], \\\"py\\\": [6, 15], \\\"pz\\\": [1, -1], \\\"nx\\\": [5, 1], \\\"ny\\\": [6, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [2, 1], \\\"pz\\\": [1, 2], \\\"nx\\\": [8, 0], \\\"ny\\\": [4, 20], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 2], \\\"py\\\": [9, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 5], \\\"ny\\\": [1, 2], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 1], \\\"py\\\": [5, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [17, 8], \\\"ny\\\": [3, 2], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 2], \\\"py\\\": [7, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [20, 20], \\\"ny\\\": [17, 16], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 7], \\\"py\\\": [3, 6], \\\"pz\\\": [2, -1], \\\"nx\\\": [9, 9], \\\"ny\\\": [6, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 17], \\\"py\\\": [4, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [15, 2], \\\"py\\\": [11, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 14], \\\"ny\\\": [1, 12], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [22, 19], \\\"py\\\": [3, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 4], \\\"ny\\\": [6, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 22], \\\"py\\\": [3, 21], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [1, 0], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [11, 12], \\\"pz\\\": [0, 0], \\\"nx\\\": [1, 2], \\\"ny\\\": [1, 4], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 3], \\\"py\\\": [8, 1], \\\"pz\\\": [0, 2], \\\"nx\\\": [13, 1], \\\"ny\\\": [8, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 6], \\\"py\\\": [21, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 11], \\\"ny\\\": [6, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 14], \\\"py\\\": [4, 4], \\\"pz\\\": [0, 0], \\\"nx\\\": [17, 1], \\\"ny\\\": [12, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 3], \\\"py\\\": [12, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 2], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 2], \\\"py\\\": [7, 3], \\\"pz\\\": [0, 1], \\\"nx\\\": [16, 2], \\\"ny\\\": [3, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 5], \\\"py\\\": [7, 20], \\\"pz\\\": [1, -1], \\\"nx\\\": [9, 8], \\\"ny\\\": [4, 6], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [19, 2], \\\"py\\\": [10, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 4], \\\"ny\\\": [3, 1], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [14, 9], \\\"py\\\": [0, 23], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 4], \\\"ny\\\": [3, 2], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [6, 9], \\\"py\\\": [4, 10], \\\"pz\\\": [1, 0], \\\"nx\\\": [10, 9], \\\"ny\\\": [9, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [6, 9, 10, 8], \\\"py\\\": [20, 23, 18, 23], \\\"pz\\\": [0, 0, 0, 0], \\\"nx\\\": [9, 22, 1, 2], \\\"ny\\\": [21, 14, 2, 5], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 18], \\\"py\\\": [13, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [6, 7], \\\"ny\\\": [9, 11], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 5, \\\"px\\\": [18, 19, 20, 19, 20], \\\"py\\\": [15, 19, 16, 20, 17], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [11, 22, 23, 23, 23], \\\"ny\\\": [10, 22, 20, 19, 19], \\\"nz\\\": [1, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 10], \\\"py\\\": [1, 0], \\\"pz\\\": [1, 1], \\\"nx\\\": [21, 11], \\\"ny\\\": [0, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 0], \\\"py\\\": [9, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 4], \\\"ny\\\": [2, 1], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [14, 23], \\\"py\\\": [2, 18], \\\"pz\\\": [0, -1], \\\"nx\\\": [15, 18], \\\"ny\\\": [1, 2], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 3], \\\"py\\\": [0, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 12], \\\"ny\\\": [1, 5], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 8], \\\"py\\\": [7, 8], \\\"pz\\\": [1, 1], \\\"nx\\\": [8, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 0], \\\"py\\\": [1, 3], \\\"pz\\\": [2, -1], \\\"nx\\\": [7, 19], \\\"ny\\\": [9, 15], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 3, \\\"px\\\": [16, 6, 4], \\\"py\\\": [21, 5, 4], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [4, 19, 8], \\\"ny\\\": [5, 21, 11], \\\"nz\\\": [2, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 5], \\\"py\\\": [6, 6], \\\"pz\\\": [1, -1], \\\"nx\\\": [10, 10], \\\"ny\\\": [10, 12], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 11], \\\"py\\\": [2, 5], \\\"pz\\\": [1, 0], \\\"nx\\\": [3, 4], \\\"ny\\\": [4, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [8, 6, 2], \\\"py\\\": [4, 10, 2], \\\"pz\\\": [1, 1, 2], \\\"nx\\\": [2, 18, 5], \\\"ny\\\": [0, 11, 5], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 7], \\\"py\\\": [9, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [12, 3], \\\"ny\\\": [9, 5], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 13], \\\"py\\\": [20, 20], \\\"pz\\\": [0, 0], \\\"nx\\\": [13, 3], \\\"ny\\\": [21, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 7], \\\"py\\\": [5, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [1, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 2], \\\"py\\\": [21, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 3], \\\"ny\\\": [5, 10], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [23, 5], \\\"py\\\": [6, 0], \\\"pz\\\": [0, 2], \\\"nx\\\": [21, 4], \\\"ny\\\": [6, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 9], \\\"py\\\": [7, 6], \\\"pz\\\": [1, 1], \\\"nx\\\": [8, 2], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [22, 11], \\\"py\\\": [20, 9], \\\"pz\\\": [0, 1], \\\"nx\\\": [8, 8], \\\"ny\\\": [10, 10], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 16], \\\"py\\\": [21, 12], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 7], \\\"ny\\\": [5, 23], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 5, \\\"px\\\": [0, 1, 1, 1, 1], \\\"py\\\": [3, 1, 9, 4, 7], \\\"pz\\\": [2, 2, 1, 1, 1], \\\"nx\\\": [11, 22, 22, 23, 23], \\\"ny\\\": [10, 21, 22, 19, 20], \\\"nz\\\": [1, 0, 0, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 5], \\\"py\\\": [12, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 8], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 4], \\\"py\\\": [7, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 15], \\\"ny\\\": [4, 6], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [3, 5], \\\"pz\\\": [2, 1], \\\"nx\\\": [11, 12], \\\"ny\\\": [11, 23], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 2], \\\"py\\\": [14, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [4, 17], \\\"ny\\\": [18, 16], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [10, 1, 1], \\\"py\\\": [12, 5, 4], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [7, 11, 5], \\\"ny\\\": [1, 2, 1], \\\"nz\\\": [1, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 6], \\\"py\\\": [3, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 2], \\\"ny\\\": [2, 3], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [13, 6], \\\"py\\\": [22, 9], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 5, \\\"px\\\": [12, 9, 10, 11, 11], \\\"py\\\": [0, 0, 0, 0, 0], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [16, 5, 10, 4, 8], \\\"ny\\\": [10, 3, 6, 4, 4], \\\"nz\\\": [0, 1, 0, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 19], \\\"py\\\": [23, 20], \\\"pz\\\": [0, 0], \\\"nx\\\": [8, 5], \\\"ny\\\": [11, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 3], \\\"py\\\": [7, 2], \\\"pz\\\": [1, 2], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [8, 14, 8, 7, 4], \\\"py\\\": [6, 12, 8, 6, 3], \\\"pz\\\": [1, 0, 1, 1, 2], \\\"nx\\\": [2, 6, 6, 7, 7], \\\"ny\\\": [0, 1, 2, 0, 0], \\\"nz\\\": [2, 0, 0, 0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [1, 2, 3], \\\"py\\\": [15, 18, 21], \\\"pz\\\": [0, 0, 0], \\\"nx\\\": [19, 5, 18], \\\"ny\\\": [23, 5, 8], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 2], \\\"py\\\": [6, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [12, 4], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 5], \\\"py\\\": [5, 11], \\\"pz\\\": [2, 1], \\\"nx\\\": [14, 5], \\\"ny\\\": [19, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 4], \\\"py\\\": [4, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [11, 5], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [18, 4], \\\"py\\\": [6, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [5, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 12], \\\"py\\\": [2, 4], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 8], \\\"ny\\\": [3, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 0], \\\"py\\\": [1, 1], \\\"pz\\\": [1, 2], \\\"nx\\\": [7, 2], \\\"ny\\\": [4, 7], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 0], \\\"py\\\": [20, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 5], \\\"ny\\\": [10, 11], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 14], \\\"py\\\": [5, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [0, 2], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 15], \\\"py\\\": [4, 7], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 7], \\\"ny\\\": [1, 2], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 5], \\\"py\\\": [2, 1], \\\"pz\\\": [0, 1], \\\"nx\\\": [3, 1], \\\"ny\\\": [4, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 9], \\\"py\\\": [4, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 9], \\\"ny\\\": [1, 3], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [2, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 7], \\\"py\\\": [3, 7], \\\"pz\\\": [2, 1], \\\"nx\\\": [6, 8], \\\"ny\\\": [14, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 0], \\\"py\\\": [21, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [20, 8], \\\"ny\\\": [10, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [5, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 3], \\\"ny\\\": [4, 2], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [7, 13], \\\"pz\\\": [1, 0], \\\"nx\\\": [3, 2], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 10], \\\"py\\\": [9, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [7, 9], \\\"ny\\\": [3, 10], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 10], \\\"py\\\": [6, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 17], \\\"ny\\\": [4, 12], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 10], \\\"py\\\": [4, 10], \\\"pz\\\": [2, 1], \\\"nx\\\": [5, 4], \\\"ny\\\": [9, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [15, 3, 5, 0], \\\"py\\\": [12, 4, 2, 3], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [13, 7, 5, 7], \\\"ny\\\": [12, 6, 0, 7], \\\"nz\\\": [0, 1, 2, 1] }, { \\\"size\\\": 4, \\\"px\\\": [2, 3, 16, 17], \\\"py\\\": [3, 4, 6, 6], \\\"pz\\\": [2, 1, 0, 0], \\\"nx\\\": [16, 16, 8, 16], \\\"ny\\\": [8, 3, 10, 13], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 8], \\\"py\\\": [1, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [9, 14], \\\"py\\\": [6, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 8], \\\"ny\\\": [6, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 4], \\\"py\\\": [10, 4], \\\"pz\\\": [1, 2], \\\"nx\\\": [10, 0], \\\"ny\\\": [5, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 10], \\\"py\\\": [4, 4], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 7], \\\"ny\\\": [3, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [11, 10, 13, 6, 12], \\\"py\\\": [2, 2, 2, 1, 2], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [4, 18, 18, 13, 13], \\\"ny\\\": [2, 18, 19, 7, 7], \\\"nz\\\": [2, 0, 0, 0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [13, 13, 13, 2], \\\"py\\\": [13, 12, 11, 3], \\\"pz\\\": [0, 0, 0, -1], \\\"nx\\\": [4, 6, 8, 11], \\\"ny\\\": [2, 2, 4, 4], \\\"nz\\\": [2, 1, 1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 7], \\\"py\\\": [6, 13], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 10], \\\"ny\\\": [4, 22], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 7], \\\"py\\\": [4, 17], \\\"pz\\\": [1, -1], \\\"nx\\\": [0, 1], \\\"ny\\\": [5, 21], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 13], \\\"py\\\": [22, 22], \\\"pz\\\": [0, 0], \\\"nx\\\": [2, 2], \\\"ny\\\": [13, 13], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [4, 4, 3], \\\"py\\\": [22, 23, 19], \\\"pz\\\": [0, 0, 0], \\\"nx\\\": [8, 12, 3], \\\"ny\\\": [22, 15, 2], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 12], \\\"py\\\": [3, 13], \\\"pz\\\": [0, -1], \\\"nx\\\": [15, 2], \\\"ny\\\": [10, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [1, 1], \\\"py\\\": [3, 3], \\\"pz\\\": [2, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [0, 0], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [6, 12], \\\"py\\\": [6, 18], \\\"pz\\\": [1, 0], \\\"nx\\\": [12, 19], \\\"ny\\\": [17, 16], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 5], \\\"py\\\": [2, 1], \\\"pz\\\": [0, 1], \\\"nx\\\": [5, 4], \\\"ny\\\": [4, 17], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [3, 12, 11], \\\"py\\\": [5, 23, 23], \\\"pz\\\": [2, 0, 0], \\\"nx\\\": [12, 4, 4], \\\"ny\\\": [21, 17, 1], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 0], \\\"py\\\": [21, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [7, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 17], \\\"py\\\": [12, 11], \\\"pz\\\": [0, 0], \\\"nx\\\": [8, 11], \\\"ny\\\": [4, 11], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 0], \\\"py\\\": [22, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 6], \\\"ny\\\": [1, 0], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [9, 5], \\\"pz\\\": [1, 1], \\\"nx\\\": [23, 11], \\\"ny\\\": [23, 20], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [4, 12, 11, 9, 8], \\\"py\\\": [0, 1, 1, 0, 1], \\\"pz\\\": [1, 0, 0, 0, 0], \\\"nx\\\": [4, 17, 8, 7, 7], \\\"ny\\\": [2, 13, 4, 4, 4], \\\"nz\\\": [2, 0, 1, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 13], \\\"py\\\": [12, 12], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 1], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [23, 4], \\\"py\\\": [23, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 2], \\\"ny\\\": [23, 6], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 3, \\\"px\\\": [8, 16, 0], \\\"py\\\": [5, 15, 6], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [23, 23, 11], \\\"ny\\\": [18, 17, 8], \\\"nz\\\": [0, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 16], \\\"py\\\": [4, 15], \\\"pz\\\": [2, -1], \\\"nx\\\": [2, 2], \\\"ny\\\": [3, 2], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [3, 8], \\\"py\\\": [7, 9], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 2], \\\"ny\\\": [10, 5], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 3, \\\"px\\\": [22, 1, 9], \\\"py\\\": [23, 2, 3], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [2, 2, 5], \\\"ny\\\": [5, 4, 19], \\\"nz\\\": [2, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 20], \\\"py\\\": [5, 15], \\\"pz\\\": [1, -1], \\\"nx\\\": [2, 1], \\\"ny\\\": [1, 2], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [4, 8], \\\"py\\\": [1, 19], \\\"pz\\\": [1, -1], \\\"nx\\\": [2, 2], \\\"ny\\\": [5, 4], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [9, 10], \\\"py\\\": [21, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [6, 5], \\\"ny\\\": [1, 1], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 8], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [9, 2], \\\"ny\\\": [4, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [17, 3, 10], \\\"py\\\": [8, 0, 2], \\\"pz\\\": [0, 2, 0], \\\"nx\\\": [13, 2, 6], \\\"ny\\\": [15, 5, 1], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 6], \\\"py\\\": [20, 21], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 2], \\\"ny\\\": [10, 5], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [3, 7], \\\"py\\\": [0, 1], \\\"pz\\\": [2, 1], \\\"nx\\\": [7, 20], \\\"ny\\\": [1, 19], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 5], \\\"py\\\": [0, 1], \\\"pz\\\": [1, 0], \\\"nx\\\": [3, 2], \\\"ny\\\": [4, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 7], \\\"py\\\": [4, 19], \\\"pz\\\": [2, 0], \\\"nx\\\": [5, 2], \\\"ny\\\": [10, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 5, \\\"px\\\": [3, 3, 4, 7, 7], \\\"py\\\": [1, 0, 0, 0, 1], \\\"pz\\\": [1, 1, 1, 0, 0], \\\"nx\\\": [5, 4, 10, 8, 8], \\\"ny\\\": [3, 3, 5, 4, 4], \\\"nz\\\": [1, 1, 0, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 5], \\\"py\\\": [0, 3], \\\"pz\\\": [1, -1], \\\"nx\\\": [1, 0], \\\"ny\\\": [0, 1], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 0], \\\"py\\\": [5, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [0, 9], \\\"py\\\": [0, 4], \\\"pz\\\": [2, -1], \\\"nx\\\": [13, 10], \\\"ny\\\": [0, 0], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [13, 4], \\\"py\\\": [14, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 2], \\\"ny\\\": [0, 0], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 4], \\\"py\\\": [13, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 2], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [1, 0], \\\"py\\\": [6, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [1, 6], \\\"ny\\\": [2, 12], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 4], \\\"py\\\": [6, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 3], \\\"ny\\\": [8, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 5], \\\"py\\\": [1, 5], \\\"pz\\\": [1, -1], \\\"nx\\\": [17, 17], \\\"ny\\\": [13, 7], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [7, 3], \\\"py\\\": [12, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [3, 4], \\\"ny\\\": [4, 11], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 17], \\\"py\\\": [2, 8], \\\"pz\\\": [1, 0], \\\"nx\\\": [3, 3], \\\"ny\\\": [1, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [13, 6, 6], \\\"py\\\": [22, 11, 10], \\\"pz\\\": [0, 1, 1], \\\"nx\\\": [13, 12, 11], \\\"ny\\\": [20, 20, 20], \\\"nz\\\": [0, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 2], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [3, 12], \\\"ny\\\": [4, 20], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 2], \\\"py\\\": [1, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [13, 6], \\\"ny\\\": [0, 0], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 8], \\\"py\\\": [3, 9], \\\"pz\\\": [2, 0], \\\"nx\\\": [8, 16], \\\"ny\\\": [5, 17], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 15], \\\"py\\\": [1, 1], \\\"pz\\\": [0, 0], \\\"nx\\\": [7, 11], \\\"ny\\\": [8, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 18], \\\"py\\\": [21, 23], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 1], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [1, 5], \\\"py\\\": [0, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [15, 11], \\\"ny\\\": [8, 7], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 4], \\\"py\\\": [7, 8], \\\"pz\\\": [1, -1], \\\"nx\\\": [9, 10], \\\"ny\\\": [13, 11], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [7, 4], \\\"py\\\": [10, 4], \\\"pz\\\": [1, 2], \\\"nx\\\": [22, 4], \\\"ny\\\": [0, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 3], \\\"py\\\": [3, 1], \\\"pz\\\": [0, 2], \\\"nx\\\": [8, 0], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 21], \\\"py\\\": [11, 22], \\\"pz\\\": [0, -1], \\\"nx\\\": [10, 11], \\\"ny\\\": [11, 9], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 5], \\\"py\\\": [0, 1], \\\"pz\\\": [2, 2], \\\"nx\\\": [2, 21], \\\"ny\\\": [6, 14], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [10, 10, 1], \\\"py\\\": [11, 0, 5], \\\"pz\\\": [0, -1, -1], \\\"nx\\\": [6, 12, 5], \\\"ny\\\": [2, 5, 2], \\\"nz\\\": [1, 0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 10], \\\"py\\\": [5, 6], \\\"pz\\\": [0, 0], \\\"nx\\\": [12, 19], \\\"ny\\\": [23, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 5], \\\"py\\\": [9, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [21, 0], \\\"ny\\\": [23, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 12], \\\"py\\\": [19, 15], \\\"pz\\\": [0, 0], \\\"nx\\\": [13, 0], \\\"ny\\\": [17, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 0], \\\"py\\\": [17, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 16], \\\"ny\\\": [8, 19], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [2, 4], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 1], \\\"ny\\\": [4, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 10], \\\"py\\\": [23, 20], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 7], \\\"ny\\\": [5, 10], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 9], \\\"py\\\": [22, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 2], \\\"ny\\\": [10, 3], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 4, \\\"px\\\": [3, 1, 1, 5], \\\"py\\\": [4, 2, 1, 2], \\\"pz\\\": [0, 2, 2, 1], \\\"nx\\\": [13, 5, 8, 0], \\\"ny\\\": [22, 2, 9, 2], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 9], \\\"py\\\": [0, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [19, 20], \\\"ny\\\": [1, 2], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [7, 22], \\\"py\\\": [6, 8], \\\"pz\\\": [1, 0], \\\"nx\\\": [4, 4], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [4, 4], \\\"pz\\\": [2, 1], \\\"nx\\\": [10, 20], \\\"ny\\\": [10, 6], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 12], \\\"py\\\": [6, 15], \\\"pz\\\": [1, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [2, 5], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 7], \\\"py\\\": [4, 10], \\\"pz\\\": [2, -1], \\\"nx\\\": [3, 6], \\\"ny\\\": [4, 8], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 3, \\\"px\\\": [11, 11, 4], \\\"py\\\": [0, 5, 7], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [6, 12, 12], \\\"ny\\\": [1, 1, 2], \\\"nz\\\": [1, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 17], \\\"py\\\": [4, 18], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 2], \\\"ny\\\": [10, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [17, 17], \\\"py\\\": [10, 18], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 8], \\\"ny\\\": [2, 3], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 9], \\\"py\\\": [7, 7], \\\"pz\\\": [1, -1], \\\"nx\\\": [7, 4], \\\"ny\\\": [6, 3], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [18, 21], \\\"py\\\": [0, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 6], \\\"ny\\\": [5, 3], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 2], \\\"py\\\": [8, 4], \\\"pz\\\": [0, 2], \\\"nx\\\": [5, 8], \\\"ny\\\": [9, 16], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 2], \\\"py\\\": [5, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 15], \\\"ny\\\": [4, 8], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [1, 1], \\\"py\\\": [4, 6], \\\"pz\\\": [1, 1], \\\"nx\\\": [11, 3], \\\"ny\\\": [7, 9], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 1], \\\"py\\\": [3, 3], \\\"pz\\\": [2, 2], \\\"nx\\\": [2, 2], \\\"ny\\\": [15, 16], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [17, 18], \\\"py\\\": [5, 5], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 21], \\\"ny\\\": [2, 10], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [14, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [3, 4], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 3], \\\"py\\\": [3, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [19, 10], \\\"ny\\\": [12, 4], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 16], \\\"py\\\": [3, 8], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 10], \\\"ny\\\": [20, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [5, 5, 2], \\\"py\\\": [21, 8, 4], \\\"pz\\\": [0, 1, 2], \\\"nx\\\": [10, 6, 3], \\\"ny\\\": [15, 2, 1], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 10], \\\"py\\\": [10, 12], \\\"pz\\\": [0, 0], \\\"nx\\\": [11, 11], \\\"ny\\\": [2, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 10], \\\"py\\\": [3, 2], \\\"pz\\\": [1, 1], \\\"nx\\\": [8, 11], \\\"ny\\\": [3, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 3], \\\"py\\\": [5, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [12, 3], \\\"ny\\\": [3, 1], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [13, 7], \\\"py\\\": [2, 1], \\\"pz\\\": [0, 1], \\\"nx\\\": [5, 5], \\\"ny\\\": [1, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 10], \\\"py\\\": [10, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [14, 16], \\\"ny\\\": [10, 15], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 10], \\\"py\\\": [7, 8], \\\"pz\\\": [1, -1], \\\"nx\\\": [2, 6], \\\"ny\\\": [5, 6], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 10], \\\"py\\\": [1, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 2], \\\"ny\\\": [3, 2], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [4, 0], \\\"py\\\": [5, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [1, 2], \\\"ny\\\": [2, 3], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 12], \\\"py\\\": [1, 9], \\\"pz\\\": [2, -1], \\\"nx\\\": [16, 17], \\\"ny\\\": [3, 3], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 6], \\\"py\\\": [5, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [7, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 3], \\\"py\\\": [11, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 4], \\\"ny\\\": [0, 0], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 10], \\\"py\\\": [6, 6], \\\"pz\\\": [1, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [1, 0], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [3, 7], \\\"py\\\": [0, 7], \\\"pz\\\": [1, -1], \\\"nx\\\": [15, 13], \\\"ny\\\": [8, 4], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [18, 1], \\\"py\\\": [15, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [18, 18], \\\"ny\\\": [18, 17], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [5, 2], \\\"py\\\": [4, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 18], \\\"ny\\\": [4, 15], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 3, \\\"px\\\": [3, 14, 13], \\\"py\\\": [2, 7, 8], \\\"pz\\\": [2, 0, 0], \\\"nx\\\": [10, 0, 2], \\\"ny\\\": [8, 3, 2], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 0], \\\"py\\\": [14, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [18, 3], \\\"ny\\\": [12, 5], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [5, 3], \\\"py\\\": [8, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [13, 4], \\\"ny\\\": [10, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [1, 2], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 1], \\\"ny\\\": [4, 20], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 10], \\\"py\\\": [8, 3], \\\"pz\\\": [1, -1], \\\"nx\\\": [12, 7], \\\"ny\\\": [2, 1], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 3], \\\"py\\\": [9, 2], \\\"pz\\\": [0, 2], \\\"nx\\\": [7, 6], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 1], \\\"py\\\": [2, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 4], \\\"ny\\\": [2, 3], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [22, 5], \\\"py\\\": [15, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [16, 17], \\\"ny\\\": [14, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 11], \\\"py\\\": [19, 13], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 11], \\\"py\\\": [8, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [3, 3], \\\"ny\\\": [2, 5], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 3, \\\"px\\\": [3, 8, 0], \\\"py\\\": [7, 7, 5], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [11, 5, 1], \\\"ny\\\": [11, 7, 5], \\\"nz\\\": [0, 1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 6], \\\"py\\\": [12, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [9, 0], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 12], \\\"py\\\": [7, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [16, 7], \\\"ny\\\": [6, 4], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 5], \\\"py\\\": [14, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [13, 10], \\\"ny\\\": [0, 0], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [11, 12, 13, 12, 7], \\\"py\\\": [0, 1, 0, 0, 0], \\\"pz\\\": [0, 0, 0, 0, 1], \\\"nx\\\": [13, 16, 14, 4, 4], \\\"ny\\\": [18, 23, 18, 5, 5], \\\"nz\\\": [0, 0, 0, 2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 5], \\\"py\\\": [12, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 7], \\\"ny\\\": [8, 2], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [19, 3], \\\"py\\\": [2, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 23], \\\"ny\\\": [7, 13], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [19, 20], \\\"pz\\\": [0, 0], \\\"nx\\\": [9, 4], \\\"ny\\\": [5, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 4], \\\"py\\\": [12, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [9, 5], \\\"ny\\\": [4, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [8, 0, 1, 21], \\\"py\\\": [6, 0, 7, 16], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [11, 6, 11, 5], \\\"ny\\\": [8, 6, 4, 3], \\\"nz\\\": [1, 1, 1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [7, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 10], \\\"ny\\\": [6, 7], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [1, 2], \\\"pz\\\": [2, 1], \\\"nx\\\": [16, 6], \\\"ny\\\": [0, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [5, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [1, 21], \\\"ny\\\": [23, 8], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 0], \\\"py\\\": [7, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 13], \\\"ny\\\": [4, 10], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 4], \\\"py\\\": [0, 4], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 2], \\\"ny\\\": [16, 8], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 3], \\\"py\\\": [12, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [3, 3], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 0], \\\"py\\\": [19, 11], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 5], \\\"ny\\\": [21, 9], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [17, 9], \\\"pz\\\": [0, 1], \\\"nx\\\": [0, 5], \\\"ny\\\": [0, 9], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 5], \\\"py\\\": [2, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 4], \\\"ny\\\": [5, 6], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 4], \\\"py\\\": [1, 0], \\\"pz\\\": [1, 2], \\\"nx\\\": [4, 3], \\\"ny\\\": [3, 6], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 0], \\\"py\\\": [7, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [5, 5], \\\"ny\\\": [1, 0], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [13, 0], \\\"py\\\": [17, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 6], \\\"ny\\\": [5, 8], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 1], \\\"py\\\": [0, 5], \\\"pz\\\": [2, -1], \\\"nx\\\": [4, 9], \\\"ny\\\": [2, 7], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 5], \\\"py\\\": [13, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [23, 11], \\\"ny\\\": [13, 7], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [0, 2], \\\"pz\\\": [1, 0], \\\"nx\\\": [3, 6], \\\"ny\\\": [11, 18], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 3], \\\"py\\\": [6, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 1], \\\"ny\\\": [1, 3], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 4, \\\"px\\\": [3, 6, 3, 6], \\\"py\\\": [3, 6, 2, 5], \\\"pz\\\": [2, 1, 2, 1], \\\"nx\\\": [0, 4, 1, 1], \\\"ny\\\": [0, 22, 17, 0], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 4], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [9, 15], \\\"ny\\\": [4, 8], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 18], \\\"py\\\": [7, 8], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 5], \\\"ny\\\": [4, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [4, 5], \\\"pz\\\": [1, -1], \\\"nx\\\": [5, 6], \\\"ny\\\": [0, 0], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 18], \\\"py\\\": [23, 19], \\\"pz\\\": [0, 0], \\\"nx\\\": [7, 13], \\\"ny\\\": [10, 20], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 6], \\\"py\\\": [2, 0], \\\"pz\\\": [0, 1], \\\"nx\\\": [4, 1], \\\"ny\\\": [5, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 1], \\\"py\\\": [5, 4], \\\"pz\\\": [2, 2], \\\"nx\\\": [0, 20], \\\"ny\\\": [4, 4], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 5], \\\"py\\\": [1, 0], \\\"pz\\\": [2, 2], \\\"nx\\\": [12, 6], \\\"ny\\\": [18, 11], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 5, \\\"px\\\": [2, 1, 3, 1, 5], \\\"py\\\": [3, 3, 7, 4, 9], \\\"pz\\\": [2, 2, 1, 2, 1], \\\"nx\\\": [9, 3, 8, 16, 10], \\\"ny\\\": [5, 3, 10, 6, 7], \\\"nz\\\": [1, -1, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 1], \\\"py\\\": [12, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [10, 1], \\\"ny\\\": [11, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [19, 0], \\\"py\\\": [10, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [14, 7], \\\"ny\\\": [6, 3], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 4], \\\"py\\\": [2, 1], \\\"pz\\\": [1, 2], \\\"nx\\\": [6, 0], \\\"ny\\\": [2, 18], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 8], \\\"py\\\": [3, 0], \\\"pz\\\": [0, 1], \\\"nx\\\": [17, 1], \\\"ny\\\": [1, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [18, 19], \\\"py\\\": [1, 17], \\\"pz\\\": [0, -1], \\\"nx\\\": [5, 11], \\\"ny\\\": [2, 5], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [12, 12, 12, 6, 12], \\\"py\\\": [10, 11, 12, 6, 9], \\\"pz\\\": [0, 0, 0, 1, 0], \\\"nx\\\": [13, 3, 12, 6, 6], \\\"ny\\\": [4, 1, 4, 2, 2], \\\"nz\\\": [0, 2, 0, 1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 10], \\\"py\\\": [3, 3], \\\"pz\\\": [0, 0], \\\"nx\\\": [4, 9], \\\"ny\\\": [4, 17], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 0], \\\"py\\\": [13, 5], \\\"pz\\\": [0, 2], \\\"nx\\\": [8, 18], \\\"ny\\\": [15, 15], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 4], \\\"py\\\": [6, 5], \\\"pz\\\": [1, 1], \\\"nx\\\": [0, 0], \\\"ny\\\": [9, 4], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [1, 0], \\\"pz\\\": [2, 2], \\\"nx\\\": [2, 15], \\\"ny\\\": [2, 1], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 3, \\\"px\\\": [2, 4, 2], \\\"py\\\": [4, 9, 5], \\\"pz\\\": [2, 1, 2], \\\"nx\\\": [2, 5, 14], \\\"ny\\\": [0, 1, 4], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 12], \\\"py\\\": [20, 20], \\\"pz\\\": [0, 0], \\\"nx\\\": [6, 10], \\\"ny\\\": [9, 19], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 0], \\\"py\\\": [16, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 3], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 5, \\\"px\\\": [16, 17, 15, 16, 15], \\\"py\\\": [1, 1, 1, 0, 0], \\\"pz\\\": [0, 0, 0, 0, 0], \\\"nx\\\": [8, 8, 4, 12, 12], \\\"ny\\\": [8, 7, 2, 23, 23], \\\"nz\\\": [1, 1, 2, 0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 4], \\\"py\\\": [6, 12], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 13], \\\"ny\\\": [1, 1], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 2], \\\"py\\\": [3, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [6, 5], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 8], \\\"py\\\": [6, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [11, 8], \\\"ny\\\": [2, 2], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [9, 3], \\\"py\\\": [7, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [19, 19], \\\"ny\\\": [18, 16], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 2], \\\"py\\\": [1, 1], \\\"pz\\\": [2, 2], \\\"nx\\\": [22, 11], \\\"ny\\\": [4, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 10], \\\"py\\\": [9, 8], \\\"pz\\\": [1, 1], \\\"nx\\\": [4, 4], \\\"ny\\\": [10, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 1], \\\"py\\\": [0, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [10, 8], \\\"ny\\\": [2, 2], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [8, 7], \\\"pz\\\": [1, 1], \\\"nx\\\": [8, 2], \\\"ny\\\": [8, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 5], \\\"py\\\": [21, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [13, 3], \\\"ny\\\": [20, 5], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [12, 5], \\\"py\\\": [11, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 0], \\\"ny\\\": [19, 9], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 10], \\\"py\\\": [9, 10], \\\"pz\\\": [1, 1], \\\"nx\\\": [8, 4], \\\"ny\\\": [10, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [5, 9], \\\"pz\\\": [2, 1], \\\"nx\\\": [2, 11], \\\"ny\\\": [9, 19], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 5], \\\"py\\\": [1, 2], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 23], \\\"ny\\\": [4, 9], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 4], \\\"py\\\": [2, 4], \\\"pz\\\": [2, 1], \\\"nx\\\": [5, 9], \\\"ny\\\": [2, 5], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [2, 3], \\\"pz\\\": [1, 1], \\\"nx\\\": [19, 9], \\\"ny\\\": [6, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 4], \\\"py\\\": [5, 10], \\\"pz\\\": [1, -1], \\\"nx\\\": [10, 22], \\\"ny\\\": [0, 16], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 3, \\\"px\\\": [19, 9, 19], \\\"py\\\": [3, 1, 2], \\\"pz\\\": [0, 1, 0], \\\"nx\\\": [6, 3, 6], \\\"ny\\\": [10, 3, 0], \\\"nz\\\": [1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 3], \\\"py\\\": [10, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [23, 14], \\\"ny\\\": [3, 18], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [19, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 16], \\\"ny\\\": [4, 11], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [22, 23], \\\"py\\\": [3, 22], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 3], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [7, 2], \\\"py\\\": [12, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [10, 5], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 13], \\\"py\\\": [5, 13], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 3], \\\"ny\\\": [2, 0], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [3, 17], \\\"py\\\": [0, 16], \\\"pz\\\": [1, -1], \\\"nx\\\": [12, 12], \\\"ny\\\": [5, 6], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [4, 3], \\\"py\\\": [1, 0], \\\"pz\\\": [2, 2], \\\"nx\\\": [4, 3], \\\"ny\\\": [0, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 3], \\\"py\\\": [12, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [12, 12], \\\"ny\\\": [13, 12], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [13, 4], \\\"py\\\": [11, 14], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [4, 6], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 7], \\\"py\\\": [7, 8], \\\"pz\\\": [1, 1], \\\"nx\\\": [3, 0], \\\"ny\\\": [5, 21], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [1, 3], \\\"py\\\": [4, 14], \\\"pz\\\": [2, 0], \\\"nx\\\": [8, 8], \\\"ny\\\": [7, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 11], \\\"py\\\": [20, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [21, 21], \\\"ny\\\": [20, 18], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 1], \\\"py\\\": [11, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 2], \\\"ny\\\": [15, 14], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [10, 1], \\\"py\\\": [8, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [7, 4], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [17, 6], \\\"py\\\": [13, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 15], \\\"py\\\": [1, 3], \\\"pz\\\": [1, 0], \\\"nx\\\": [15, 5], \\\"ny\\\": [1, 8], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 1], \\\"py\\\": [20, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [6, 8], \\\"ny\\\": [11, 10], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 14], \\\"py\\\": [0, 0], \\\"pz\\\": [1, 0], \\\"nx\\\": [7, 8], \\\"ny\\\": [7, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 5], \\\"py\\\": [17, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [12, 5], \\\"ny\\\": [16, 10], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 3], \\\"py\\\": [15, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [12, 7], \\\"ny\\\": [17, 8], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 1], \\\"py\\\": [14, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 6], \\\"ny\\\": [6, 12], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 7], \\\"py\\\": [0, 0], \\\"pz\\\": [0, 0], \\\"nx\\\": [6, 20], \\\"ny\\\": [5, 5], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 2], \\\"py\\\": [22, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [4, 9], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 4, \\\"px\\\": [8, 2, 2, 9], \\\"py\\\": [6, 5, 3, 11], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [2, 7, 4, 3], \\\"ny\\\": [2, 1, 0, 2], \\\"nz\\\": [2, 0, 1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [12, 6], \\\"py\\\": [12, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [8, 2], \\\"ny\\\": [4, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 11], \\\"py\\\": [19, 8], \\\"pz\\\": [0, -1], \\\"nx\\\": [13, 13], \\\"ny\\\": [20, 17], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 19], \\\"py\\\": [5, 14], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [8, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 0], \\\"py\\\": [8, 6], \\\"pz\\\": [1, -1], \\\"nx\\\": [21, 21], \\\"ny\\\": [16, 15], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [1, 12], \\\"py\\\": [7, 6], \\\"pz\\\": [1, -1], \\\"nx\\\": [2, 7], \\\"ny\\\": [5, 14], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 9], \\\"py\\\": [7, 5], \\\"pz\\\": [1, -1], \\\"nx\\\": [2, 5], \\\"ny\\\": [5, 9], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 5], \\\"py\\\": [15, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 12], \\\"ny\\\": [0, 2], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [23, 22], \\\"py\\\": [23, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 0], \\\"ny\\\": [2, 3], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [1, 2], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 0], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 1], \\\"py\\\": [9, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 2], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [0, 1], \\\"py\\\": [0, 0], \\\"pz\\\": [2, 0], \\\"nx\\\": [2, 3], \\\"ny\\\": [9, 10], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 0], \\\"py\\\": [16, 14], \\\"pz\\\": [0, -1], \\\"nx\\\": [6, 3], \\\"ny\\\": [23, 14], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 3], \\\"py\\\": [2, 3], \\\"pz\\\": [2, 1], \\\"nx\\\": [13, 3], \\\"ny\\\": [19, 14], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 5], \\\"py\\\": [8, 18], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 7], \\\"ny\\\": [1, 2], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 4], \\\"py\\\": [5, 6], \\\"pz\\\": [1, 1], \\\"nx\\\": [2, 2], \\\"ny\\\": [5, 3], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 3], \\\"py\\\": [13, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [4, 3], \\\"ny\\\": [4, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [5, 6], \\\"pz\\\": [1, 0], \\\"nx\\\": [2, 1], \\\"ny\\\": [5, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 14], \\\"py\\\": [3, 5], \\\"pz\\\": [1, 0], \\\"nx\\\": [5, 0], \\\"ny\\\": [16, 7], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 2], \\\"py\\\": [18, 5], \\\"pz\\\": [0, 2], \\\"nx\\\": [11, 4], \\\"ny\\\": [16, 4], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 16], \\\"py\\\": [19, 20], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 2], \\\"ny\\\": [10, 5], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [5, 3], \\\"py\\\": [3, 1], \\\"pz\\\": [0, 1], \\\"nx\\\": [1, 3], \\\"ny\\\": [4, 8], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 6], \\\"py\\\": [13, 6], \\\"pz\\\": [0, 1], \\\"nx\\\": [10, 1], \\\"ny\\\": [12, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 3], \\\"py\\\": [6, 2], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 8], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [9, 3], \\\"py\\\": [21, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [1, 0], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [8, 4], \\\"py\\\": [1, 0], \\\"pz\\\": [1, -1], \\\"nx\\\": [8, 6], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 7], \\\"py\\\": [1, 6], \\\"pz\\\": [2, -1], \\\"nx\\\": [7, 9], \\\"ny\\\": [6, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [8, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [10, 5], \\\"ny\\\": [19, 11], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [3, 4], \\\"pz\\\": [2, 2], \\\"nx\\\": [3, 6], \\\"ny\\\": [4, 6], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 11], \\\"py\\\": [5, 20], \\\"pz\\\": [2, 0], \\\"nx\\\": [11, 5], \\\"ny\\\": [21, 8], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 3, \\\"px\\\": [5, 9, 5], \\\"py\\\": [4, 7, 5], \\\"pz\\\": [2, 0, 2], \\\"nx\\\": [23, 10, 4], \\\"ny\\\": [23, 3, 22], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [11, 9, 7, 1], \\\"py\\\": [13, 8, 11, 10], \\\"pz\\\": [0, -1, -1, -1], \\\"nx\\\": [8, 2, 11, 12], \\\"ny\\\": [4, 2, 4, 4], \\\"nz\\\": [1, 2, 0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [7, 6], \\\"pz\\\": [1, 1], \\\"nx\\\": [0, 4], \\\"ny\\\": [1, 0], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [19, 20], \\\"py\\\": [0, 1], \\\"pz\\\": [0, 0], \\\"nx\\\": [21, 1], \\\"ny\\\": [0, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 5], \\\"py\\\": [11, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 0], \\\"ny\\\": [12, 1], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [1, 1], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 7], \\\"ny\\\": [5, 4], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 12], \\\"py\\\": [4, 23], \\\"pz\\\": [2, -1], \\\"nx\\\": [13, 15], \\\"ny\\\": [5, 4], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 20], \\\"py\\\": [4, 16], \\\"pz\\\": [0, -1], \\\"nx\\\": [9, 4], \\\"ny\\\": [2, 1], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [12, 13], \\\"py\\\": [2, 2], \\\"pz\\\": [0, 0], \\\"nx\\\": [4, 16], \\\"ny\\\": [2, 11], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [19, 14], \\\"py\\\": [10, 17], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 8], \\\"ny\\\": [0, 2], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 12], \\\"py\\\": [1, 2], \\\"pz\\\": [1, 0], \\\"nx\\\": [19, 10], \\\"ny\\\": [3, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 4, \\\"px\\\": [17, 2, 3, 10], \\\"py\\\": [8, 6, 2, 12], \\\"pz\\\": [0, 1, 2, 0], \\\"nx\\\": [17, 9, 12, 2], \\\"ny\\\": [9, 22, 13, 5], \\\"nz\\\": [0, -1, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [20, 10], \\\"py\\\": [15, 7], \\\"pz\\\": [0, 1], \\\"nx\\\": [13, 9], \\\"ny\\\": [7, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [0, 0], \\\"py\\\": [1, 0], \\\"pz\\\": [2, 2], \\\"nx\\\": [10, 3], \\\"ny\\\": [9, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 3], \\\"py\\\": [1, 0], \\\"pz\\\": [2, 2], \\\"nx\\\": [0, 22], \\\"ny\\\": [14, 6], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 3], \\\"py\\\": [4, 0], \\\"pz\\\": [0, 2], \\\"nx\\\": [16, 3], \\\"ny\\\": [2, 0], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [8, 16], \\\"py\\\": [6, 12], \\\"pz\\\": [1, 0], \\\"nx\\\": [8, 12], \\\"ny\\\": [4, 7], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [5, 11], \\\"py\\\": [0, 5], \\\"pz\\\": [2, 1], \\\"nx\\\": [10, 1], \\\"ny\\\": [5, 5], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 4], \\\"py\\\": [5, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 6], \\\"ny\\\": [2, 3], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [11, 11], \\\"py\\\": [11, 12], \\\"pz\\\": [0, 0], \\\"nx\\\": [23, 7], \\\"ny\\\": [20, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 8], \\\"py\\\": [12, 5], \\\"pz\\\": [0, 1], \\\"nx\\\": [8, 2], \\\"ny\\\": [2, 1], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 3, \\\"px\\\": [6, 11, 11], \\\"py\\\": [11, 23, 20], \\\"pz\\\": [1, 0, 0], \\\"nx\\\": [11, 3, 22], \\\"ny\\\": [21, 3, 16], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [17, 15], \\\"py\\\": [3, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 4], \\\"ny\\\": [3, 2], \\\"nz\\\": [2, 2] }, { \\\"size\\\": 2, \\\"px\\\": [21, 21], \\\"py\\\": [11, 10], \\\"pz\\\": [0, 0], \\\"nx\\\": [11, 3], \\\"ny\\\": [6, 2], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [23, 21], \\\"py\\\": [22, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [20, 10], \\\"ny\\\": [18, 10], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [4, 2], \\\"py\\\": [6, 3], \\\"pz\\\": [1, 2], \\\"nx\\\": [3, 2], \\\"ny\\\": [4, 3], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [16, 0], \\\"py\\\": [18, 11], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 7], \\\"ny\\\": [4, 4], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [6, 21], \\\"py\\\": [3, 16], \\\"pz\\\": [0, -1], \\\"nx\\\": [1, 8], \\\"ny\\\": [2, 14], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [8, 1], \\\"py\\\": [3, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [11, 11], \\\"ny\\\": [2, 1], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 3, \\\"px\\\": [11, 11, 11], \\\"py\\\": [9, 10, 8], \\\"pz\\\": [1, 1, 1], \\\"nx\\\": [23, 1, 0], \\\"ny\\\": [23, 9, 11], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [6, 3], \\\"py\\\": [2, 1], \\\"pz\\\": [1, 2], \\\"nx\\\": [7, 1], \\\"ny\\\": [8, 2], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 17], \\\"py\\\": [17, 19], \\\"pz\\\": [0, -1], \\\"nx\\\": [10, 4], \\\"ny\\\": [16, 9], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [7, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [11, 0], \\\"ny\\\": [11, 8], \\\"nz\\\": [0, 1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 5], \\\"py\\\": [11, 4], \\\"pz\\\": [1, 2], \\\"nx\\\": [5, 5], \\\"ny\\\": [0, 0], \\\"nz\\\": [2, -1] }, { \\\"size\\\": 2, \\\"px\\\": [3, 6], \\\"py\\\": [3, 6], \\\"pz\\\": [2, 1], \\\"nx\\\": [8, 0], \\\"ny\\\": [4, 16], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [14, 1], \\\"py\\\": [20, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 7], \\\"ny\\\": [11, 9], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 3, \\\"px\\\": [11, 13, 4], \\\"py\\\": [16, 21, 3], \\\"pz\\\": [0, 0, 2], \\\"nx\\\": [14, 16, 5], \\\"ny\\\": [20, 14, 9], \\\"nz\\\": [0, -1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [7, 0], \\\"py\\\": [1, 1], \\\"pz\\\": [1, -1], \\\"nx\\\": [4, 7], \\\"ny\\\": [2, 4], \\\"nz\\\": [2, 1] }, { \\\"size\\\": 2, \\\"px\\\": [23, 11], \\\"py\\\": [9, 4], \\\"pz\\\": [0, 1], \\\"nx\\\": [11, 3], \\\"ny\\\": [1, 3], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 13], \\\"py\\\": [23, 23], \\\"pz\\\": [0, 0], \\\"nx\\\": [13, 13], \\\"ny\\\": [20, 20], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 8], \\\"py\\\": [5, 11], \\\"pz\\\": [0, -1], \\\"nx\\\": [20, 19], \\\"ny\\\": [18, 20], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [19, 5], \\\"py\\\": [22, 4], \\\"pz\\\": [0, -1], \\\"nx\\\": [2, 9], \\\"ny\\\": [3, 17], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [15, 2], \\\"py\\\": [13, 7], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 2, \\\"px\\\": [14, 13], \\\"py\\\": [17, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [15, 13], \\\"ny\\\": [19, 15], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [12, 23], \\\"py\\\": [8, 22], \\\"pz\\\": [0, -1], \\\"nx\\\": [7, 10], \\\"ny\\\": [5, 9], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 6], \\\"py\\\": [21, 10], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [3, 3], \\\"nz\\\": [1, 1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 11], \\\"py\\\": [5, 0], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 4], \\\"ny\\\": [17, 16], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [3, 1], \\\"py\\\": [18, 8], \\\"pz\\\": [0, 1], \\\"nx\\\": [14, 4], \\\"ny\\\": [17, 7], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [15, 3], \\\"py\\\": [18, 3], \\\"pz\\\": [0, 2], \\\"nx\\\": [1, 22], \\\"ny\\\": [0, 1], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [13, 3], \\\"py\\\": [9, 3], \\\"pz\\\": [0, -1], \\\"nx\\\": [0, 1], \\\"ny\\\": [9, 20], \\\"nz\\\": [1, 0] }, { \\\"size\\\": 2, \\\"px\\\": [1, 1], \\\"py\\\": [1, 0], \\\"pz\\\": [2, 2], \\\"nx\\\": [9, 23], \\\"ny\\\": [10, 12], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 4, \\\"px\\\": [9, 0, 9, 1], \\\"py\\\": [8, 0, 0, 10], \\\"pz\\\": [1, -1, -1, -1], \\\"nx\\\": [23, 7, 5, 23], \\\"ny\\\": [20, 7, 5, 19], \\\"nz\\\": [0, 1, 2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [18, 18], \\\"py\\\": [12, 12], \\\"pz\\\": [0, -1], \\\"nx\\\": [8, 4], \\\"ny\\\": [4, 2], \\\"nz\\\": [1, 2] }, { \\\"size\\\": 3, \\\"px\\\": [0, 4, 1], \\\"py\\\": [3, 5, 3], \\\"pz\\\": [1, -1, -1], \\\"nx\\\": [16, 11, 8], \\\"ny\\\": [8, 5, 6], \\\"nz\\\": [0, 0, 0] }, { \\\"size\\\": 5, \\\"px\\\": [9, 10, 14, 11, 11], \\\"py\\\": [0, 0, 0, 0, 0], \\\"pz\\\": [0, 0, 0, 0, -1], \\\"nx\\\": [8, 3, 4, 6, 2], \\\"ny\\\": [22, 9, 5, 4, 0], \\\"nz\\\": [0, 1, 0, 0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [6, 5], \\\"py\\\": [2, 2], \\\"pz\\\": [1, 1], \\\"nx\\\": [7, 3], \\\"ny\\\": [8, 7], \\\"nz\\\": [0, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 5], \\\"py\\\": [15, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [3, 10], \\\"ny\\\": [0, 1], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [0, 11], \\\"py\\\": [11, 12], \\\"pz\\\": [1, -1], \\\"nx\\\": [22, 22], \\\"ny\\\": [14, 13], \\\"nz\\\": [0, 0] }, { \\\"size\\\": 2, \\\"px\\\": [2, 2], \\\"py\\\": [15, 14], \\\"pz\\\": [0, 0], \\\"nx\\\": [1, 2], \\\"ny\\\": [11, 8], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [11, 6], \\\"py\\\": [0, 7], \\\"pz\\\": [1, -1], \\\"nx\\\": [19, 5], \\\"ny\\\": [3, 0], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [2, 3], \\\"py\\\": [3, 7], \\\"pz\\\": [2, 1], \\\"nx\\\": [1, 5], \\\"ny\\\": [5, 0], \\\"nz\\\": [1, -1] }, { \\\"size\\\": 2, \\\"px\\\": [10, 14], \\\"py\\\": [4, 5], \\\"pz\\\": [0, -1], \\\"nx\\\": [4, 18], \\\"ny\\\": [2, 12], \\\"nz\\\": [2, 0] }, { \\\"size\\\": 2, \\\"px\\\": [19, 10], \\\"py\\\": [12, 2], \\\"pz\\\": [0, -1], \\\"nx\\\": [13, 4], \\\"ny\\\": [10, 2], \\\"nz\\\": [0, 2] }, { \\\"size\\\": 2, \\\"px\\\": [6, 1], \\\"py\\\": [21, 6], \\\"pz\\\": [0, -1], \\\"nx\\\": [6, 5], \\\"ny\\\": [0, 0], \\\"nz\\\": [1, 1] }], \\\"alpha\\\": [-1.044179e+00, 1.044179e+00, -6.003138e-01, 6.003138e-01, -4.091282e-01, 4.091282e-01, -4.590148e-01, 4.590148e-01, -4.294004e-01, 4.294004e-01, -3.360846e-01, 3.360846e-01, -3.054186e-01, 3.054186e-01, -2.901743e-01, 2.901743e-01, -3.522417e-01, 3.522417e-01, -3.195838e-01, 3.195838e-01, -2.957309e-01, 2.957309e-01, -2.876727e-01, 2.876727e-01, -2.637460e-01, 2.637460e-01, -2.607900e-01, 2.607900e-01, -2.455714e-01, 2.455714e-01, -2.749847e-01, 2.749847e-01, -2.314217e-01, 2.314217e-01, -2.540871e-01, 2.540871e-01, -2.143416e-01, 2.143416e-01, -2.565697e-01, 2.565697e-01, -1.901272e-01, 1.901272e-01, -2.259981e-01, 2.259981e-01, -2.012333e-01, 2.012333e-01, -2.448460e-01, 2.448460e-01, -2.192845e-01, 2.192845e-01, -2.005951e-01, 2.005951e-01, -2.259000e-01, 2.259000e-01, -1.955758e-01, 1.955758e-01, -2.235332e-01, 2.235332e-01, -1.704490e-01, 1.704490e-01, -1.584628e-01, 1.584628e-01, -2.167710e-01, 2.167710e-01, -1.592909e-01, 1.592909e-01, -1.967292e-01, 1.967292e-01, -1.432268e-01, 1.432268e-01, -2.039949e-01, 2.039949e-01, -1.404068e-01, 1.404068e-01, -1.788201e-01, 1.788201e-01, -1.498714e-01, 1.498714e-01, -1.282541e-01, 1.282541e-01, -1.630182e-01, 1.630182e-01, -1.398111e-01, 1.398111e-01, -1.464143e-01, 1.464143e-01, -1.281712e-01, 1.281712e-01, -1.417014e-01, 1.417014e-01, -1.779164e-01, 1.779164e-01, -2.067174e-01, 2.067174e-01, -1.344947e-01, 1.344947e-01, -1.357351e-01, 1.357351e-01, -1.683191e-01, 1.683191e-01, -1.821768e-01, 1.821768e-01, -2.158307e-01, 2.158307e-01, -1.812857e-01, 1.812857e-01, -1.635445e-01, 1.635445e-01, -1.474934e-01, 1.474934e-01, -1.771993e-01, 1.771993e-01, -1.517620e-01, 1.517620e-01, -1.283184e-01, 1.283184e-01, -1.862675e-01, 1.862675e-01, -1.420491e-01, 1.420491e-01, -1.232165e-01, 1.232165e-01, -1.472696e-01, 1.472696e-01, -1.192156e-01, 1.192156e-01, -1.602034e-01, 1.602034e-01, -1.321473e-01, 1.321473e-01, -1.358101e-01, 1.358101e-01, -1.295821e-01, 1.295821e-01, -1.289102e-01, 1.289102e-01, -1.232520e-01, 1.232520e-01, -1.332227e-01, 1.332227e-01, -1.358887e-01, 1.358887e-01, -1.179559e-01, 1.179559e-01, -1.263694e-01, 1.263694e-01, -1.444876e-01, 1.444876e-01, -1.933141e-01, 1.933141e-01, -1.917886e-01, 1.917886e-01, -1.199760e-01, 1.199760e-01, -1.359937e-01, 1.359937e-01, -1.690073e-01, 1.690073e-01, -1.894222e-01, 1.894222e-01, -1.699422e-01, 1.699422e-01, -1.340361e-01, 1.340361e-01, -1.840622e-01, 1.840622e-01, -1.277397e-01, 1.277397e-01, -1.381610e-01, 1.381610e-01, -1.282241e-01, 1.282241e-01, -1.211334e-01, 1.211334e-01, -1.264628e-01, 1.264628e-01, -1.373010e-01, 1.373010e-01, -1.363356e-01, 1.363356e-01, -1.562568e-01, 1.562568e-01, -1.268735e-01, 1.268735e-01, -1.037859e-01, 1.037859e-01, -1.394322e-01, 1.394322e-01, -1.449225e-01, 1.449225e-01, -1.109657e-01, 1.109657e-01, -1.086931e-01, 1.086931e-01, -1.379135e-01, 1.379135e-01, -1.881974e-01, 1.881974e-01, -1.304956e-01, 1.304956e-01, -9.921777e-02, 9.921777e-02, -1.398624e-01, 1.398624e-01, -1.216469e-01, 1.216469e-01, -1.272741e-01, 1.272741e-01, -1.878236e-01, 1.878236e-01, -1.336894e-01, 1.336894e-01, -1.256289e-01, 1.256289e-01, -1.247231e-01, 1.247231e-01, -1.853400e-01, 1.853400e-01, -1.087805e-01, 1.087805e-01, -1.205676e-01, 1.205676e-01, -1.023182e-01, 1.023182e-01, -1.268422e-01, 1.268422e-01, -1.422900e-01, 1.422900e-01, -1.098174e-01, 1.098174e-01, -1.317018e-01, 1.317018e-01, -1.378142e-01, 1.378142e-01, -1.274550e-01, 1.274550e-01, -1.142944e-01, 1.142944e-01, -1.713488e-01, 1.713488e-01, -1.103035e-01, 1.103035e-01, -1.045221e-01, 1.045221e-01, -1.293015e-01, 1.293015e-01, -9.763183e-02, 9.763183e-02, -1.387213e-01, 1.387213e-01, -9.031167e-02, 9.031167e-02, -1.283052e-01, 1.283052e-01, -1.133462e-01, 1.133462e-01, -9.370681e-02, 9.370681e-02, -1.079269e-01, 1.079269e-01, -1.331913e-01, 1.331913e-01, -8.969902e-02, 8.969902e-02, -1.044560e-01, 1.044560e-01, -9.387466e-02, 9.387466e-02, -1.208988e-01, 1.208988e-01, -1.252011e-01, 1.252011e-01, -1.401277e-01, 1.401277e-01, -1.461381e-01, 1.461381e-01, -1.323763e-01, 1.323763e-01, -9.923889e-02, 9.923889e-02, -1.142899e-01, 1.142899e-01, -9.110853e-02, 9.110853e-02, -1.106607e-01, 1.106607e-01, -1.253140e-01, 1.253140e-01, -9.657895e-02, 9.657895e-02, -1.030010e-01, 1.030010e-01, -1.348857e-01, 1.348857e-01, -1.237793e-01, 1.237793e-01, -1.296943e-01, 1.296943e-01, -1.323385e-01, 1.323385e-01, -8.331554e-02, 8.331554e-02, -8.417589e-02, 8.417589e-02, -1.104431e-01, 1.104431e-01, -1.170710e-01, 1.170710e-01, -1.391725e-01, 1.391725e-01, -1.485189e-01, 1.485189e-01, -1.840393e-01, 1.840393e-01, -1.238250e-01, 1.238250e-01, -1.095287e-01, 1.095287e-01, -1.177869e-01, 1.177869e-01, -1.036409e-01, 1.036409e-01, -9.802581e-02, 9.802581e-02, -9.364054e-02, 9.364054e-02, -9.936022e-02, 9.936022e-02, -1.117201e-01, 1.117201e-01, -1.081300e-01, 1.081300e-01, -1.331861e-01, 1.331861e-01, -1.192122e-01, 1.192122e-01, -9.889761e-02, 9.889761e-02, -1.173456e-01, 1.173456e-01, -1.032917e-01, 1.032917e-01, -9.268551e-02, 9.268551e-02, -1.178563e-01, 1.178563e-01, -1.215065e-01, 1.215065e-01, -1.060437e-01, 1.060437e-01, -1.010044e-01, 1.010044e-01, -1.021683e-01, 1.021683e-01, -9.974968e-02, 9.974968e-02, -1.161528e-01, 1.161528e-01, -8.686721e-02, 8.686721e-02, -8.145259e-02, 8.145259e-02, -9.937060e-02, 9.937060e-02, -1.170885e-01, 1.170885e-01, -7.693779e-02, 7.693779e-02, -9.047233e-02, 9.047233e-02, -9.168442e-02, 9.168442e-02, -1.054105e-01, 1.054105e-01, -9.036177e-02, 9.036177e-02, -1.251949e-01, 1.251949e-01, -9.523847e-02, 9.523847e-02, -1.038930e-01, 1.038930e-01, -1.433660e-01, 1.433660e-01, -1.489830e-01, 1.489830e-01, -8.393174e-02, 8.393174e-02, -8.888026e-02, 8.888026e-02, -9.347861e-02, 9.347861e-02, -1.044838e-01, 1.044838e-01, -1.102144e-01, 1.102144e-01, -1.383415e-01, 1.383415e-01, -1.466476e-01, 1.466476e-01, -1.129741e-01, 1.129741e-01, -1.310915e-01, 1.310915e-01, -1.070648e-01, 1.070648e-01, -7.559007e-02, 7.559007e-02, -8.812082e-02, 8.812082e-02, -1.234272e-01, 1.234272e-01, -1.088022e-01, 1.088022e-01, -8.388703e-02, 8.388703e-02, -7.179593e-02, 7.179593e-02, -1.008961e-01, 1.008961e-01, -9.030070e-02, 9.030070e-02, -8.581345e-02, 8.581345e-02, -9.023431e-02, 9.023431e-02, -9.807321e-02, 9.807321e-02, -9.621402e-02, 9.621402e-02, -1.730195e-01, 1.730195e-01, -8.984631e-02, 8.984631e-02, -9.556661e-02, 9.556661e-02, -1.047576e-01, 1.047576e-01, -7.854313e-02, 7.854313e-02, -8.682118e-02, 8.682118e-02, -1.159761e-01, 1.159761e-01, -1.339540e-01, 1.339540e-01, -1.003048e-01, 1.003048e-01, -9.747544e-02, 9.747544e-02, -9.501058e-02, 9.501058e-02, -1.321566e-01, 1.321566e-01, -9.194706e-02, 9.194706e-02, -9.359276e-02, 9.359276e-02, -1.015916e-01, 1.015916e-01, -1.174192e-01, 1.174192e-01, -1.039931e-01, 1.039931e-01, -9.746733e-02, 9.746733e-02, -1.286120e-01, 1.286120e-01, -1.044899e-01, 1.044899e-01, -1.066385e-01, 1.066385e-01, -8.368626e-02, 8.368626e-02, -1.271919e-01, 1.271919e-01, -1.055946e-01, 1.055946e-01, -8.272876e-02, 8.272876e-02, -1.370564e-01, 1.370564e-01, -8.539379e-02, 8.539379e-02, -1.100343e-01, 1.100343e-01, -8.102170e-02, 8.102170e-02, -1.028728e-01, 1.028728e-01, -1.305065e-01, 1.305065e-01, -1.059506e-01, 1.059506e-01, -1.264646e-01, 1.264646e-01, -8.383843e-02, 8.383843e-02, -9.357698e-02, 9.357698e-02, -7.474400e-02, 7.474400e-02, -7.814045e-02, 7.814045e-02, -8.600970e-02, 8.600970e-02, -1.206090e-01, 1.206090e-01, -9.986512e-02, 9.986512e-02, -8.516476e-02, 8.516476e-02, -7.198783e-02, 7.198783e-02, -7.838409e-02, 7.838409e-02, -1.005142e-01, 1.005142e-01, -9.951857e-02, 9.951857e-02, -7.253998e-02, 7.253998e-02, -9.913739e-02, 9.913739e-02, -7.500360e-02, 7.500360e-02, -9.258090e-02, 9.258090e-02, -1.400287e-01, 1.400287e-01, -1.044404e-01, 1.044404e-01, -7.404339e-02, 7.404339e-02, -7.256833e-02, 7.256833e-02, -1.006995e-01, 1.006995e-01, -1.426043e-01, 1.426043e-01, -1.036529e-01, 1.036529e-01, -1.208443e-01, 1.208443e-01, -1.074245e-01, 1.074245e-01, -1.141448e-01, 1.141448e-01, -1.015809e-01, 1.015809e-01, -1.028822e-01, 1.028822e-01, -1.055682e-01, 1.055682e-01, -9.468699e-02, 9.468699e-02, -1.010098e-01, 1.010098e-01, -1.205054e-01, 1.205054e-01, -8.392956e-02, 8.392956e-02, -8.052297e-02, 8.052297e-02, -9.576507e-02, 9.576507e-02, -9.515692e-02, 9.515692e-02, -1.564745e-01, 1.564745e-01, -7.357238e-02, 7.357238e-02, -1.129262e-01, 1.129262e-01, -1.013265e-01, 1.013265e-01, -8.760761e-02, 8.760761e-02, -8.714771e-02, 8.714771e-02, -9.605039e-02, 9.605039e-02, -9.064677e-02, 9.064677e-02, -8.243857e-02, 8.243857e-02, -8.495858e-02, 8.495858e-02, -8.350249e-02, 8.350249e-02, -7.423234e-02, 7.423234e-02, -7.930799e-02, 7.930799e-02, -6.620023e-02, 6.620023e-02, -7.311919e-02, 7.311919e-02, -1.237938e-01, 1.237938e-01, -1.086814e-01, 1.086814e-01, -6.379798e-02, 6.379798e-02, -7.526021e-02, 7.526021e-02, -8.297097e-02, 8.297097e-02, -8.186337e-02, 8.186337e-02, -7.627362e-02, 7.627362e-02, -1.061638e-01, 1.061638e-01, -8.328494e-02, 8.328494e-02, -1.040895e-01, 1.040895e-01, -7.649056e-02, 7.649056e-02, -7.299058e-02, 7.299058e-02, -9.195198e-02, 9.195198e-02, -7.990880e-02, 7.990880e-02, -7.429346e-02, 7.429346e-02, -9.991702e-02, 9.991702e-02, -9.755385e-02, 9.755385e-02, -1.344138e-01, 1.344138e-01, -1.707917e-01, 1.707917e-01, -8.325450e-02, 8.325450e-02, -8.137793e-02, 8.137793e-02, -8.308659e-02, 8.308659e-02, -7.440414e-02, 7.440414e-02, -7.012744e-02, 7.012744e-02, -8.122943e-02, 8.122943e-02, -8.845462e-02, 8.845462e-02, -8.803450e-02, 8.803450e-02, -9.653392e-02, 9.653392e-02, -8.795691e-02, 8.795691e-02, -1.119045e-01, 1.119045e-01, -1.068308e-01, 1.068308e-01, -8.406359e-02, 8.406359e-02, -1.220414e-01, 1.220414e-01, -1.024235e-01, 1.024235e-01, -1.252897e-01, 1.252897e-01, -1.121234e-01, 1.121234e-01, -9.054150e-02, 9.054150e-02, -8.974435e-02, 8.974435e-02, -1.351578e-01, 1.351578e-01, -1.106442e-01, 1.106442e-01, -8.093913e-02, 8.093913e-02, -9.800762e-02, 9.800762e-02, -7.012823e-02, 7.012823e-02, -7.434949e-02, 7.434949e-02, -8.684816e-02, 8.684816e-02, -8.916388e-02, 8.916388e-02, -8.773159e-02, 8.773159e-02, -7.709608e-02, 7.709608e-02, -7.230518e-02, 7.230518e-02, -9.662156e-02, 9.662156e-02, -7.957632e-02, 7.957632e-02, -7.628441e-02, 7.628441e-02, -8.050202e-02, 8.050202e-02, -1.290593e-01, 1.290593e-01, -9.246182e-02, 9.246182e-02, -9.703662e-02, 9.703662e-02, -7.866445e-02, 7.866445e-02, -1.064783e-01, 1.064783e-01, -1.012339e-01, 1.012339e-01, -6.828389e-02, 6.828389e-02, -1.005039e-01, 1.005039e-01, -7.559687e-02, 7.559687e-02, -6.359878e-02, 6.359878e-02, -8.387002e-02, 8.387002e-02, -7.851323e-02, 7.851323e-02, -8.878569e-02, 8.878569e-02, -7.767654e-02, 7.767654e-02, -8.033338e-02, 8.033338e-02, -9.142797e-02, 9.142797e-02, -8.590585e-02, 8.590585e-02, -1.052318e-01, 1.052318e-01, -8.760062e-02, 8.760062e-02, -9.222192e-02, 9.222192e-02, -7.548828e-02, 7.548828e-02, -8.003344e-02, 8.003344e-02, -1.177076e-01, 1.177076e-01, -1.064964e-01, 1.064964e-01, -8.655553e-02, 8.655553e-02, -9.418112e-02, 9.418112e-02, -7.248163e-02, 7.248163e-02, -7.120974e-02, 7.120974e-02, -6.393114e-02, 6.393114e-02, -7.997487e-02, 7.997487e-02, -1.220941e-01, 1.220941e-01, -9.892518e-02, 9.892518e-02, -8.270271e-02, 8.270271e-02, -1.069400e-01, 1.069400e-01, -5.860771e-02, 5.860771e-02, -9.126600e-02, 9.126600e-02, -6.212559e-02, 6.212559e-02, -9.397538e-02, 9.397538e-02, -8.070447e-02, 8.070447e-02, -8.415587e-02, 8.415587e-02, -8.564455e-02, 8.564455e-02, -7.791811e-02, 7.791811e-02, -6.642259e-02, 6.642259e-02, -8.266167e-02, 8.266167e-02, -1.134986e-01, 1.134986e-01, -1.045267e-01, 1.045267e-01, -7.122085e-02, 7.122085e-02, -7.979415e-02, 7.979415e-02, -7.922347e-02, 7.922347e-02, -9.003421e-02, 9.003421e-02, -8.796449e-02, 8.796449e-02, -7.933279e-02, 7.933279e-02, -8.307947e-02, 8.307947e-02, -8.946349e-02, 8.946349e-02, -7.643384e-02, 7.643384e-02, -7.818534e-02, 7.818534e-02, -7.990991e-02, 7.990991e-02, -9.885664e-02, 9.885664e-02, -8.071329e-02, 8.071329e-02, -6.952112e-02, 6.952112e-02, -6.429706e-02, 6.429706e-02, -6.307229e-02, 6.307229e-02, -8.100137e-02, 8.100137e-02, -7.693623e-02, 7.693623e-02, -6.906625e-02, 6.906625e-02, -7.390462e-02, 7.390462e-02, -6.487217e-02, 6.487217e-02, -1.233681e-01, 1.233681e-01, -6.979273e-02, 6.979273e-02, -8.358669e-02, 8.358669e-02, -1.095420e-01, 1.095420e-01, -8.519717e-02, 8.519717e-02, -7.599857e-02, 7.599857e-02, -6.042816e-02, 6.042816e-02, -6.546304e-02, 6.546304e-02, -1.016245e-01, 1.016245e-01, -8.308787e-02, 8.308787e-02, -7.385708e-02, 7.385708e-02, -6.751630e-02, 6.751630e-02, -9.036695e-02, 9.036695e-02, -9.371335e-02, 9.371335e-02, -1.116088e-01, 1.116088e-01, -5.693741e-02, 5.693741e-02, -6.383983e-02, 6.383983e-02, -5.389843e-02, 5.389843e-02, -8.383191e-02, 8.383191e-02, -7.820822e-02, 7.820822e-02, -7.067557e-02, 7.067557e-02, -7.971948e-02, 7.971948e-02, -7.360668e-02, 7.360668e-02, -7.008027e-02, 7.008027e-02, -8.013378e-02, 8.013378e-02, -8.331605e-02, 8.331605e-02, -7.145702e-02, 7.145702e-02, -7.863940e-02, 7.863940e-02, -6.992679e-02, 6.992679e-02, -5.716495e-02, 5.716495e-02, -5.306006e-02, 5.306006e-02, -8.855639e-02, 8.855639e-02, -7.656397e-02, 7.656397e-02, -6.939272e-02, 6.939272e-02, -7.523742e-02, 7.523742e-02, -8.472299e-02, 8.472299e-02, -8.114341e-02, 8.114341e-02, -6.795517e-02, 6.795517e-02, -7.890130e-02, 7.890130e-02, -7.488741e-02, 7.488741e-02, -9.281972e-02, 9.281972e-02, -9.325498e-02, 9.325498e-02, -1.401587e-01, 1.401587e-01, -1.176284e-01, 1.176284e-01, -8.867597e-02, 8.867597e-02, -8.124232e-02, 8.124232e-02, -9.441235e-02, 9.441235e-02, -8.029452e-02, 8.029452e-02, -8.581848e-02, 8.581848e-02, -1.029819e-01, 1.029819e-01, -9.569118e-02, 9.569118e-02, -7.690893e-02, 7.690893e-02, -9.018228e-02, 9.018228e-02, -1.049209e-01, 1.049209e-01, -8.969413e-02, 8.969413e-02, -8.651891e-02, 8.651891e-02, -8.613331e-02, 8.613331e-02, -7.120468e-02, 7.120468e-02, -8.743959e-02, 8.743959e-02, -7.607158e-02, 7.607158e-02, -1.015547e-01, 1.015547e-01, -8.090879e-02, 8.090879e-02, -7.114079e-02, 7.114079e-02, -8.744835e-02, 8.744835e-02, -6.074904e-02, 6.074904e-02, -6.919871e-02, 6.919871e-02, -7.607774e-02, 7.607774e-02, -9.444600e-02, 9.444600e-02, -7.833429e-02, 7.833429e-02, -6.817555e-02, 6.817555e-02, -8.997390e-02, 8.997390e-02, -9.845223e-02, 9.845223e-02, -7.894180e-02, 7.894180e-02, -7.921373e-02, 7.921373e-02, -7.448032e-02, 7.448032e-02, -1.178165e-01, 1.178165e-01, -8.216686e-02, 8.216686e-02, -8.103286e-02, 8.103286e-02, -6.981470e-02, 6.981470e-02, -8.709008e-02, 8.709008e-02, -8.336259e-02, 8.336259e-02, -6.213589e-02, 6.213589e-02, -7.068045e-02, 7.068045e-02, -6.915676e-02, 6.915676e-02, -7.103416e-02, 7.103416e-02, -6.523849e-02, 6.523849e-02, -7.634760e-02, 7.634760e-02, -7.263038e-02, 7.263038e-02, -7.164396e-02, 7.164396e-02, -8.745559e-02, 8.745559e-02, -6.960181e-02, 6.960181e-02, -8.500098e-02, 8.500098e-02, -6.523260e-02, 6.523260e-02, -7.319714e-02, 7.319714e-02, -6.268125e-02, 6.268125e-02, -7.083135e-02, 7.083135e-02, -7.984517e-02, 7.984517e-02, -1.256265e-01, 1.256265e-01, -1.065412e-01, 1.065412e-01, -8.524323e-02, 8.524323e-02, -9.291364e-02, 9.291364e-02, -7.936567e-02, 7.936567e-02, -8.607723e-02, 8.607723e-02, -7.583416e-02, 7.583416e-02, -7.931928e-02, 7.931928e-02, -7.408357e-02, 7.408357e-02, -1.034404e-01, 1.034404e-01, -1.012127e-01, 1.012127e-01, -7.916689e-02, 7.916689e-02, -8.753651e-02, 8.753651e-02, -6.090366e-02, 6.090366e-02, -7.500103e-02, 7.500103e-02, -1.228709e-01, 1.228709e-01, -6.318201e-02, 6.318201e-02, -7.585420e-02, 7.585420e-02, -7.089090e-02, 7.089090e-02, -1.053542e-01, 1.053542e-01, -8.549521e-02, 8.549521e-02, -7.906308e-02, 7.906308e-02, -6.338780e-02, 6.338780e-02, -8.417910e-02, 8.417910e-02, -7.115511e-02, 7.115511e-02, -7.693949e-02, 7.693949e-02, -7.446749e-02, 7.446749e-02, -1.037929e-01, 1.037929e-01, -7.991005e-02, 7.991005e-02, -7.119439e-02, 7.119439e-02, -7.071340e-02, 7.071340e-02, -8.587362e-02, 8.587362e-02, -7.001236e-02, 7.001236e-02, -7.567115e-02, 7.567115e-02, -7.118930e-02, 7.118930e-02, -6.844895e-02, 6.844895e-02, -1.035118e-01, 1.035118e-01, -8.156618e-02, 8.156618e-02, -7.449593e-02, 7.449593e-02, -8.154360e-02, 8.154360e-02, -9.110878e-02, 9.110878e-02, -6.222534e-02, 6.222534e-02, -1.033841e-01, 1.033841e-01, -6.811687e-02, 6.811687e-02, -6.828443e-02, 6.828443e-02, -5.769408e-02, 5.769408e-02, -5.917684e-02, 5.917684e-02, -8.358868e-02, 8.358868e-02] }] };\\n\\n/***/ }),\\n/* 2 */\\n/***/ (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\n/* eslint-disable_ */\\n\\n// jsfeat.imgproc.grayscale\\n\\n// jsfeat.matrix_t\\n// jsfeat.U8_t\\n// jsfeat.C1_t\\n\\n// jsfeat.bbf.build_pyramid\\n// jsfeat.bbf.detect\\n// jsfeat.bbf.group_rectangles\\n// jsfeat.bbf.face_cascade\\n\\nvar jsfeat = __webpack_require__(0);\\nvar bbfFaceCascade = __webpack_require__(1);\\n\\nvar imgU8 = void 0;\\nvar lastWidth = void 0,\\n    lastHeight = void 0;\\n\\nfunction init() {\\n  jsfeat.bbf.prepare_cascade(bbfFaceCascade);\\n\\n  lastWidth = -1;\\n  lastHeight = -1;\\n}\\n\\ninit();\\n\\nself.onmessage = function (e) {\\n  if (e.data.width !== lastWidth || e.data.height !== lastHeight) {\\n    // eslint-disable-next-line new-cap\\n    imgU8 = new jsfeat.matrix_t(e.data.width, e.data.height, jsfeat.U8_t | jsfeat.C1_t);\\n  }\\n\\n  var imageData = e.data.image;\\n  jsfeat.imgproc.grayscale(imageData.data, e.data.width, e.data.height, imgU8);\\n  // possible options\\n  // jsfeat.imgproc.equalize_histogram(imgU8, imgU8);\\n  var pyr = jsfeat.bbf.build_pyramid(imgU8, 24 * 2, 24 * 2, 4);\\n  var rects = jsfeat.bbf.detect(pyr, bbfFaceCascade);\\n  rects = jsfeat.bbf.group_rectangles(rects, 1);\\n\\n  // keep the best results\\n  var topResults = rects.sort(function (recA, recB) {\\n    return recB.confidence - recA.confidence;\\n  }).slice(0, e.data.maxDetectedFaces);\\n\\n  // scale and remove some values\\n  var scaledResults = topResults.map(function (res) {\\n    return {\\n      x: res.x * e.data.scale,\\n      y: res.y * e.data.scale,\\n      width: res.width * e.data.scale,\\n      height: res.height * e.data.scale\\n    };\\n  });\\n\\n  postMessage({\\n    id: e.data.id,\\n    result: scaledResults,\\n    err: null\\n  });\\n};\\n\\n/***/ })\\n/******/ ]);\\n//# sourceMappingURL=a221596b0004fd4893df.worker.js.map\", __webpack_public_path__ + \"a221596b0004fd4893df.worker.js\");\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/worker-loader?inline!./src/DecoderWorker.js\n// module id = 0\n// module chunks = 0","var Worker = require('worker-loader?inline!./DecoderWorker')\n\n// static\nlet lastMsgId = 0\nconst resolves = {}\nconst rejects = {}\n\nconst FaceDetectorCallback = (e) => {\n  // transform results in e.data.result\n  const id = e.data.id\n  const resolve = resolves[id]\n  // const results = [\n  //   {\n  //     boundingBox: {\n  //       x: 10,\n  //       y: 20,\n  //       width: 30,\n  //       height: 40,\n  //     },\n  //     landmarks: null\n  //   }\n  // ]\n\n  if (resolve !== undefined) {\n    const results = e.data.result.map(res => ({\n      boundingBox: res,\n      landmarks: null,\n    }))\n\n    resolve(results)\n  }\n\n  // cleanup\n  delete resolves[id]\n  delete rejects[id]\n}\n\nconst DEFAULT_OPTIONS = {\n  maxDetectedFaces: 1,\n  fastMode: true,\n}\nconst MAX_WORK_SIZE_FAST = 320\nconst MAX_WORK_SIZE_SLOW = 640\n\nexport default class Library {\n  constructor(options) {\n    const config = Object.assign({},\n      DEFAULT_OPTIONS,\n      options\n    )\n\n    this.maxDetectedFaces = config.maxDetectedFaces\n    this.maxWorkSize = config.fastMode ? MAX_WORK_SIZE_FAST : MAX_WORK_SIZE_SLOW\n    this.worker = new Worker();\n    this.canvas = document.createElement('canvas')\n    this.ctx = this.canvas.getContext('2d')\n\n    document.body.appendChild(this.canvas)\n\n    this.worker.onmessage = FaceDetectorCallback\n  }\n\n  detect(image) {\n    return new Promise((resolve, reject) => {\n      // book keeping\n      const msgId = lastMsgId++\n\n      resolves[msgId] = resolve\n      rejects[msgId] = reject\n\n      const scale = Math.min(this.maxWorkSize / image.naturalWidth, this.maxWorkSize / image.naturalHeight);\n      this.canvas.width = image.naturalWidth * scale;\n      this.canvas.height = image.naturalHeight * scale;\n      \n      this.ctx.drawImage(image, 0, 0, this.canvas.width, this.canvas.height);\n\n      let msg = {\n        id: msgId,\n        image: this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height),\n        width: this.canvas.width,\n        height: this.canvas.height,\n        scale: 1 / scale,\n        maxDetectedFaces: this.maxDetectedFaces,\n      }\n\n      this.worker.postMessage(msg)\n\n      msg = null\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\r\n\r\nvar URL = window.URL || window.webkitURL;\r\nmodule.exports = function(content, url) {\r\n  try {\r\n    try {\r\n      var blob;\r\n      try { // BlobBuilder = Deprecated, but widely implemented\r\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\r\n        blob = new BlobBuilder();\r\n        blob.append(content);\r\n        blob = blob.getBlob();\r\n      } catch(e) { // The proposed API\r\n        blob = new Blob([content]);\r\n      }\r\n      return new Worker(URL.createObjectURL(blob));\r\n    } catch(e) {\r\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\r\n    }\r\n  } catch(e) {\r\n    if (!url) {\r\n      throw Error('Inline worker is not supported');\r\n    }\r\n    return new Worker(url);\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/worker-loader/createInlineWorker.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}